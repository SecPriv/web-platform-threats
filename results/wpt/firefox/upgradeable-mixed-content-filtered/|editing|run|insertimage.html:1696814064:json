{"network":{"requests":{"3":{"requestId":"3","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696814057310,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"4":{"requestId":"4","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"","hostname":"","href":"about:blank","origin":"null","pathname":"blank","port":"","protocol":"about:","site":""},"documentUrl":{"host":"","hostname":"","href":"about:blank","origin":"null","pathname":"blank","port":"","protocol":"about:","site":""},"method":"GET","type":"main_frame","timeStamp":1696814057487,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"5":{"requestId":"5","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/reset.css","origin":"http://web-platform.test:8000","pathname":"/editing/include/reset.css","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"stylesheet","timeStamp":1696814057521,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/css,*/*;q=0.1"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"6":{"requestId":"6","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/implementation.js","origin":"http://web-platform.test:8000","pathname":"/editing/include/implementation.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057522,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"7":{"requestId":"7","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/tests.js","origin":"http://web-platform.test:8000","pathname":"/editing/include/tests.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057523,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"8":{"requestId":"8","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/data/insertimage.js","origin":"http://web-platform.test:8000","pathname":"/editing/data/insertimage.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057523,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"9":{"requestId":"9","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/resources/testharness.js","origin":"http://web-platform.test:8000","pathname":"/resources/testharness.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057523,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"10":{"requestId":"10","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/resources/testharnessreport.js","origin":"http://web-platform.test:8000","pathname":"/resources/testharnessreport.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057524,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"11":{"requestId":"11","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/subset-tests.js","origin":"http://web-platform.test:8000","pathname":"/common/subset-tests.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057525,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"12":{"requestId":"12","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/img/lion.svg","origin":"http://web-platform.test:8000","pathname":"/img/lion.svg","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"image","timeStamp":1696814057605,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"image/avif,image/webp,*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"13":{"requestId":"13","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","origin":"http://web-platform.test:8000","pathname":"/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"image","timeStamp":1696814058583,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"image/avif,image/webp,*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://web-platform.test:8000/editing/run/insertimage.html"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"14":{"requestId":"14","url":{"host":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","hostname":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","href":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it/download-trace","origin":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","pathname":"/download-trace","port":"","protocol":"http:","site":"mitm.it"},"originUrl":{"host":"ee99f122-5ec3-4c8b-92ea-93811618fa09","hostname":"ee99f122-5ec3-4c8b-92ea-93811618fa09","href":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09/_generated_background_page.html","origin":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"ee99f122-5ec3-4c8b-92ea-93811618fa09"},"documentUrl":{"host":"ee99f122-5ec3-4c8b-92ea-93811618fa09","hostname":"ee99f122-5ec3-4c8b-92ea-93811618fa09","href":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09/_generated_background_page.html","origin":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"ee99f122-5ec3-4c8b-92ea-93811618fa09"},"method":"GET","type":"xmlhttprequest","timeStamp":1696814059694,"tabId":-1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}},"responses":{"3":{"requestId":"3","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696814057355,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/html"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"},{"name":"Content-Length","value":"95"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":398,"responseSize":261},"4":{"requestId":"4","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696814057510,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/html"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":403,"responseSize":1760},"5":{"requestId":"5","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/reset.css","origin":"http://web-platform.test:8000","pathname":"/editing/include/reset.css","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"stylesheet","timeStamp":1696814057557,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/css"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":372,"responseSize":1292},"6":{"requestId":"6","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/implementation.js","origin":"http://web-platform.test:8000","pathname":"/editing/include/implementation.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057573,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":365,"responseSize":329875},"7":{"requestId":"7","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/include/tests.js","origin":"http://web-platform.test:8000","pathname":"/editing/include/tests.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057577,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":356,"responseSize":258698},"8":{"requestId":"8","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/data/insertimage.js","origin":"http://web-platform.test:8000","pathname":"/editing/data/insertimage.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057580,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":359,"responseSize":18720},"9":{"requestId":"9","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/resources/testharness.js","origin":"http://web-platform.test:8000","pathname":"/resources/testharness.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057582,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript; charset=utf-8"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":356,"responseSize":186910},"10":{"requestId":"10","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/resources/testharnessreport.js","origin":"http://web-platform.test:8000","pathname":"/resources/testharnessreport.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057569,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript;charset=utf8"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"},{"name":"Content-Length","value":"2385"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":362,"responseSize":2572},"11":{"requestId":"11","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/subset-tests.js","origin":"http://web-platform.test:8000","pathname":"/common/subset-tests.js","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696814057578,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":354,"responseSize":2158},"12":{"requestId":"12","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/img/lion.svg","origin":"http://web-platform.test:8000","pathname":"/img/lion.svg","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"image","timeStamp":1696814057654,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"application/json"},{"name":"Content-Length","value":"42"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:17 GMT"}],"statusCode":404,"statusLine":"HTTP/1.1 404 Not Found","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":366,"responseSize":193},"13":{"requestId":"13","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","origin":"http://web-platform.test:8000","pathname":"/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/editing/run/insertimage.html","origin":"http://web-platform.test:8000","pathname":"/editing/run/insertimage.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"image","timeStamp":1696814058591,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"application/json"},{"name":"Content-Length","value":"42"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Mon, 09 Oct 2023 01:14:18 GMT"}],"statusCode":404,"statusLine":"HTTP/1.1 404 Not Found","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":408,"responseSize":193},"14":{"requestId":"14","url":{"host":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","hostname":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","href":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it/download-trace","origin":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","pathname":"/download-trace","port":"","protocol":"http:","site":"mitm.it"},"originUrl":{"host":"ee99f122-5ec3-4c8b-92ea-93811618fa09","hostname":"ee99f122-5ec3-4c8b-92ea-93811618fa09","href":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09/_generated_background_page.html","origin":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"ee99f122-5ec3-4c8b-92ea-93811618fa09"},"documentUrl":{"host":"ee99f122-5ec3-4c8b-92ea-93811618fa09","hostname":"ee99f122-5ec3-4c8b-92ea-93811618fa09","href":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09/_generated_background_page.html","origin":"moz-extension://ee99f122-5ec3-4c8b-92ea-93811618fa09","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"ee99f122-5ec3-4c8b-92ea-93811618fa09"},"method":"GET","type":"xmlhttprequest","timeStamp":1696814059705,"tabId":-1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"application/json"},{"name":"Access-Control-Allow-Origin","value":"*"},{"name":"content-length","value":"1072913"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":313,"responseSize":1073021}},"redirects":{}},"events":[{"isSecure":false,"wid":"3f0ac45b-9cdc-4e4e-9a08-b8986214551d","orig":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"type":"WindowOpen","args":["about:blank","8d6eb827-ccb5-4500-ac69-24415df04d63","noopener"],"ret":null,"timeStamp":1696814057410}],"cookies":{},"tests":{"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057603,"end":1696814057606},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" checks for modifications to non-editable content":{"start":1696814057606,"end":1696814057609},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" compare innerHTML":{"start":1696814057609,"end":1696814057611},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057611,"end":1696814057613},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandState(\"insertimage\") before":{"start":1696814057613,"end":1696814057615},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandValue(\"insertimage\") before":{"start":1696814057615,"end":1696814057617},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057617,"end":1696814057619},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandState(\"insertimage\") after":{"start":1696814057619,"end":1696814057620},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[]bar\" queryCommandValue(\"insertimage\") after":{"start":1696814057620,"end":1696814057622},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057623,"end":1696814057625},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" checks for modifications to non-editable content":{"start":1696814057626,"end":1696814057628},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" compare innerHTML":{"start":1696814057628,"end":1696814057630},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057630,"end":1696814057632},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandState(\"insertimage\") before":{"start":1696814057632,"end":1696814057632},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandValue(\"insertimage\") before":{"start":1696814057633,"end":1696814057634},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057634,"end":1696814057635},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandState(\"insertimage\") after":{"start":1696814057636,"end":1696814057637},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo</span>{}<span>bar</span>\" queryCommandValue(\"insertimage\") after":{"start":1696814057638,"end":1696814057638},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057639,"end":1696814057640},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" checks for modifications to non-editable content":{"start":1696814057640,"end":1696814057641},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" compare innerHTML":{"start":1696814057641,"end":1696814057643},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057643,"end":1696814057643},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandState(\"insertimage\") before":{"start":1696814057643,"end":1696814057644},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandValue(\"insertimage\") before":{"start":1696814057644,"end":1696814057645},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057645,"end":1696814057647},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandState(\"insertimage\") after":{"start":1696814057647,"end":1696814057648},"[[\"insertimage\",\"/img/lion.svg\"]] \"<span>foo[</span><span>]bar</span>\" queryCommandValue(\"insertimage\") after":{"start":1696814057648,"end":1696814057649},"[[\"insertimage\",\"\"]] \"foo[bar]baz\": execCommand(\"insertimage\", false, \"\") return value":{"start":1696814057650,"end":1696814057650},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" checks for modifications to non-editable content":{"start":1696814057651,"end":1696814057652},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" compare innerHTML":{"start":1696814057652,"end":1696814057652},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057653,"end":1696814057654},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandState(\"insertimage\") before":{"start":1696814057654,"end":1696814057655},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057655,"end":1696814057655},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057656,"end":1696814057657},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandState(\"insertimage\") after":{"start":1696814057657,"end":1696814057657},"[[\"insertimage\",\"\"]] \"foo[bar]baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057657,"end":1696814057659},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057659,"end":1696814057660},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" checks for modifications to non-editable content":{"start":1696814057660,"end":1696814057661},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" compare innerHTML":{"start":1696814057661,"end":1696814057662},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057662,"end":1696814057663},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandState(\"insertimage\") before":{"start":1696814057663,"end":1696814057664},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057664,"end":1696814057665},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057665,"end":1696814057666},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandState(\"insertimage\") after":{"start":1696814057666,"end":1696814057667},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[bar]baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057667,"end":1696814057668},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057670,"end":1696814057670},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" checks for modifications to non-editable content":{"start":1696814057673,"end":1696814057674},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" compare innerHTML":{"start":1696814057674,"end":1696814057675},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057675,"end":1696814057676},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057676,"end":1696814057677},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057677,"end":1696814057678},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057678,"end":1696814057679},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057679,"end":1696814057680},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar]</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057680,"end":1696814057682},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057683,"end":1696814057684},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" checks for modifications to non-editable content":{"start":1696814057684,"end":1696814057685},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" compare innerHTML":{"start":1696814057685,"end":1696814057687},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057687,"end":1696814057688},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057688,"end":1696814057689},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057689,"end":1696814057690},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057690,"end":1696814057691},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057691,"end":1696814057692},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar}</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057692,"end":1696814057693},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057694,"end":1696814057695},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" checks for modifications to non-editable content":{"start":1696814057695,"end":1696814057696},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" compare innerHTML":{"start":1696814057696,"end":1696814057697},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057697,"end":1696814057698},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandState(\"insertimage\") before":{"start":1696814057698,"end":1696814057699},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057699,"end":1696814057700},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057700,"end":1696814057701},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandState(\"insertimage\") after":{"start":1696814057701,"end":1696814057702},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span style=color:#aBcDeF>bar</span>}baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057702,"end":1696814057703},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\": execCommand(\"stylewithcss\", false, \"true\") return value":{"start":1696814057704,"end":1696814057704},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057705,"end":1696814057706},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" checks for modifications to non-editable content":{"start":1696814057706,"end":1696814057707},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" compare innerHTML":{"start":1696814057707,"end":1696814057708},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057708,"end":1696814057709},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057709,"end":1696814057711},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057711,"end":1696814057711},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057712,"end":1696814057712},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057713,"end":1696814057713},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057714,"end":1696814057714},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057715,"end":1696814057716},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057716,"end":1696814057717},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057717,"end":1696814057719},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057719,"end":1696814057720},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057720,"end":1696814057721},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057721,"end":1696814057722},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\": execCommand(\"stylewithcss\", false, \"false\") return value":{"start":1696814057723,"end":1696814057723},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057723,"end":1696814057724},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" checks for modifications to non-editable content":{"start":1696814057724,"end":1696814057725},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" compare innerHTML":{"start":1696814057725,"end":1696814057727},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057727,"end":1696814057727},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057728,"end":1696814057728},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057729,"end":1696814057730},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057730,"end":1696814057730},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057730,"end":1696814057732},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057732,"end":1696814057732},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057733,"end":1696814057733},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057734,"end":1696814057734},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057735,"end":1696814057735},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057735,"end":1696814057736},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057736,"end":1696814057737},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"[foo<span style=color:#aBcDeF>bar]</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057737,"end":1696814057738},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\": execCommand(\"stylewithcss\", false, \"true\") return value":{"start":1696814057739,"end":1696814057740},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057740,"end":1696814057741},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" checks for modifications to non-editable content":{"start":1696814057741,"end":1696814057742},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" compare innerHTML":{"start":1696814057742,"end":1696814057743},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057743,"end":1696814057744},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057744,"end":1696814057745},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057745,"end":1696814057746},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057746,"end":1696814057747},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057747,"end":1696814057748},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057748,"end":1696814057749},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057749,"end":1696814057750},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057750,"end":1696814057751},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057751,"end":1696814057751},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057751,"end":1696814057752},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057752,"end":1696814057753},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057753,"end":1696814057754},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\": execCommand(\"stylewithcss\", false, \"false\") return value":{"start":1696814057754,"end":1696814057755},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057756,"end":1696814057756},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" checks for modifications to non-editable content":{"start":1696814057757,"end":1696814057758},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" compare innerHTML":{"start":1696814057758,"end":1696814057758},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057759,"end":1696814057759},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057760,"end":1696814057760},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057760,"end":1696814057761},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057761,"end":1696814057762},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057762,"end":1696814057763},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057763,"end":1696814057764},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057764,"end":1696814057765},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057765,"end":1696814057766},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057766,"end":1696814057767},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057767,"end":1696814057767},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057767,"end":1696814057768},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"{foo<span style=color:#aBcDeF>bar}</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057768,"end":1696814057769},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057770,"end":1696814057771},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" checks for modifications to non-editable content":{"start":1696814057771,"end":1696814057772},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" compare innerHTML":{"start":1696814057772,"end":1696814057773},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057773,"end":1696814057774},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandState(\"insertimage\") before":{"start":1696814057774,"end":1696814057775},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandValue(\"insertimage\") before":{"start":1696814057775,"end":1696814057777},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057777,"end":1696814057778},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandState(\"insertimage\") after":{"start":1696814057778,"end":1696814057779},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span>baz]\" queryCommandValue(\"insertimage\") after":{"start":1696814057779,"end":1696814057780},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057780,"end":1696814057781},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" checks for modifications to non-editable content":{"start":1696814057781,"end":1696814057782},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" compare innerHTML":{"start":1696814057782,"end":1696814057783},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057783,"end":1696814057784},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandState(\"insertimage\") before":{"start":1696814057785,"end":1696814057785},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandValue(\"insertimage\") before":{"start":1696814057785,"end":1696814057786},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057786,"end":1696814057787},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandState(\"insertimage\") after":{"start":1696814057787,"end":1696814057788},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>{bar</span>baz}\" queryCommandValue(\"insertimage\") after":{"start":1696814057788,"end":1696814057789},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\": execCommand(\"stylewithcss\", false, \"true\") return value":{"start":1696814057790,"end":1696814057791},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057791,"end":1696814057792},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" checks for modifications to non-editable content":{"start":1696814057792,"end":1696814057792},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" compare innerHTML":{"start":1696814057792,"end":1696814057793},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057793,"end":1696814057795},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057795,"end":1696814057795},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057795,"end":1696814057796},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057796,"end":1696814057797},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057797,"end":1696814057798},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057798,"end":1696814057798},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057799,"end":1696814057799},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"insertimage\") before":{"start":1696814057799,"end":1696814057801},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"insertimage\") before":{"start":1696814057801,"end":1696814057802},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057802,"end":1696814057803},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"insertimage\") after":{"start":1696814057803,"end":1696814057803},"[[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"insertimage\") after":{"start":1696814057804,"end":1696814057804},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\": execCommand(\"stylewithcss\", false, \"false\") return value":{"start":1696814057804,"end":1696814057805},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057805,"end":1696814057806},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" checks for modifications to non-editable content":{"start":1696814057807,"end":1696814057808},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" compare innerHTML":{"start":1696814057808,"end":1696814057809},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814057809,"end":1696814057809},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814057810,"end":1696814057810},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814057810,"end":1696814057811},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814057811,"end":1696814057812},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814057812,"end":1696814057813},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814057813,"end":1696814057814},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057814,"end":1696814057815},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"insertimage\") before":{"start":1696814057815,"end":1696814057816},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"insertimage\") before":{"start":1696814057816,"end":1696814057817},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057817,"end":1696814057817},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandState(\"insertimage\") after":{"start":1696814057818,"end":1696814057819},"[[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\" queryCommandValue(\"insertimage\") after":{"start":1696814057819,"end":1696814057819},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057821,"end":1696814057822},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" checks for modifications to non-editable content":{"start":1696814057823,"end":1696814057823},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" compare innerHTML":{"start":1696814057824,"end":1696814057824},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057825,"end":1696814057826},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057826,"end":1696814057826},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057826,"end":1696814057827},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057827,"end":1696814057828},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057828,"end":1696814057829},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>[bar]</b>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057829,"end":1696814057830},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057831,"end":1696814057832},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" checks for modifications to non-editable content":{"start":1696814057832,"end":1696814057833},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" compare innerHTML":{"start":1696814057833,"end":1696814057834},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057834,"end":1696814057835},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057835,"end":1696814057836},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057836,"end":1696814057837},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057837,"end":1696814057838},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057838,"end":1696814057839},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<b>{bar}</b>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057839,"end":1696814057840},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057840,"end":1696814057842},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" checks for modifications to non-editable content":{"start":1696814057842,"end":1696814057843},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" compare innerHTML":{"start":1696814057843,"end":1696814057844},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057844,"end":1696814057845},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandState(\"insertimage\") before":{"start":1696814057845,"end":1696814057846},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057846,"end":1696814057846},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057847,"end":1696814057847},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandState(\"insertimage\") after":{"start":1696814057847,"end":1696814057848},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<b>bar</b>}baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057848,"end":1696814057849},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057850,"end":1696814057850},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" checks for modifications to non-editable content":{"start":1696814057851,"end":1696814057852},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" compare innerHTML":{"start":1696814057852,"end":1696814057853},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057853,"end":1696814057854},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057854,"end":1696814057854},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057855,"end":1696814057855},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057855,"end":1696814057856},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057856,"end":1696814057857},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>[bar]</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057857,"end":1696814057858},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057858,"end":1696814057859},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" checks for modifications to non-editable content":{"start":1696814057859,"end":1696814057860},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" compare innerHTML":{"start":1696814057860,"end":1696814057861},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057861,"end":1696814057862},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandState(\"insertimage\") before":{"start":1696814057863,"end":1696814057863},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057863,"end":1696814057864},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057864,"end":1696814057865},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandState(\"insertimage\") after":{"start":1696814057865,"end":1696814057868},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo<span>{bar}</span>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057869,"end":1696814057869},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057870,"end":1696814057870},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" checks for modifications to non-editable content":{"start":1696814057870,"end":1696814057871},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" compare innerHTML":{"start":1696814057871,"end":1696814057872},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057872,"end":1696814057873},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandState(\"insertimage\") before":{"start":1696814057873,"end":1696814057874},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandValue(\"insertimage\") before":{"start":1696814057874,"end":1696814057875},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057875,"end":1696814057876},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandState(\"insertimage\") after":{"start":1696814057876,"end":1696814057877},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo{<span>bar</span>}baz\" queryCommandValue(\"insertimage\") after":{"start":1696814057877,"end":1696814057877},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057879,"end":1696814057880},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" checks for modifications to non-editable content":{"start":1696814057880,"end":1696814057881},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" compare innerHTML":{"start":1696814057881,"end":1696814057882},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057882,"end":1696814057882},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandState(\"insertimage\") before":{"start":1696814057882,"end":1696814057883},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandValue(\"insertimage\") before":{"start":1696814057883,"end":1696814057884},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057884,"end":1696814057885},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandState(\"insertimage\") after":{"start":1696814057885,"end":1696814057886},"[[\"insertimage\",\"/img/lion.svg\"]] \"<b>foo[bar</b><i>baz]quz</i>\" queryCommandValue(\"insertimage\") after":{"start":1696814057886,"end":1696814057887},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057888,"end":1696814057889},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" checks for modifications to non-editable content":{"start":1696814057889,"end":1696814057890},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" compare innerHTML":{"start":1696814057890,"end":1696814057891},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057891,"end":1696814057893},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814057893,"end":1696814057893},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814057893,"end":1696814057894},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057895,"end":1696814057895},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814057895,"end":1696814057896},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>[bar]</p><p>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814057896,"end":1696814057897},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057898,"end":1696814057898},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" checks for modifications to non-editable content":{"start":1696814057899,"end":1696814057899},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" compare innerHTML":{"start":1696814057900,"end":1696814057900},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057900,"end":1696814057901},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814057901,"end":1696814057902},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814057902,"end":1696814057903},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057903,"end":1696814057904},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814057904,"end":1696814057905},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p><p>{bar}</p><p>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814057905,"end":1696814057906},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814057906,"end":1696814057907},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057908,"end":1696814057908},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" checks for modifications to non-editable content":{"start":1696814057909,"end":1696814057909},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" compare innerHTML":{"start":1696814057910,"end":1696814057911},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057911,"end":1696814057912},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057912,"end":1696814057913},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057913,"end":1696814057913},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057913,"end":1696814057913},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057914,"end":1696814057915},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057915,"end":1696814057916},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057916,"end":1696814057917},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814057917,"end":1696814057918},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814057918,"end":1696814057919},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057919,"end":1696814057920},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814057920,"end":1696814057921},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814057921,"end":1696814057921},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814057921,"end":1696814057923},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057923,"end":1696814057923},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" checks for modifications to non-editable content":{"start":1696814057923,"end":1696814057924},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" compare innerHTML":{"start":1696814057924,"end":1696814057925},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057925,"end":1696814057926},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057926,"end":1696814057927},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057927,"end":1696814057928},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057928,"end":1696814057929},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057929,"end":1696814057930},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057930,"end":1696814057931},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057931,"end":1696814057931},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814057931,"end":1696814057932},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814057932,"end":1696814057934},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057934,"end":1696814057934},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814057934,"end":1696814057935},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo</p>{<p>bar</p>}<p>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814057935,"end":1696814057936},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814057937,"end":1696814057937},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057937,"end":1696814057938},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" checks for modifications to non-editable content":{"start":1696814057939,"end":1696814057940},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" compare innerHTML":{"start":1696814057940,"end":1696814057941},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057941,"end":1696814057941},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057942,"end":1696814057942},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057942,"end":1696814057943},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057943,"end":1696814057944},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057944,"end":1696814057945},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057945,"end":1696814057946},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057946,"end":1696814057947},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814057947,"end":1696814057948},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814057948,"end":1696814057948},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057948,"end":1696814057949},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814057949,"end":1696814057950},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814057950,"end":1696814057951},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814057952,"end":1696814057953},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057953,"end":1696814057954},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" checks for modifications to non-editable content":{"start":1696814057954,"end":1696814057955},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" compare innerHTML":{"start":1696814057955,"end":1696814057956},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057956,"end":1696814057957},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057957,"end":1696814057958},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057958,"end":1696814057959},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057959,"end":1696814057960},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057960,"end":1696814057961},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057961,"end":1696814057962},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057962,"end":1696814057963},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814057963,"end":1696814057964},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814057964,"end":1696814057964},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057965,"end":1696814057965},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814057965,"end":1696814057966},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814057966,"end":1696814057967},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814057968,"end":1696814057969},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057969,"end":1696814057970},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" checks for modifications to non-editable content":{"start":1696814057970,"end":1696814057971},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" compare innerHTML":{"start":1696814057971,"end":1696814057972},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057972,"end":1696814057973},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057973,"end":1696814057974},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057974,"end":1696814057975},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057975,"end":1696814057975},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057976,"end":1696814057976},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057976,"end":1696814057977},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057977,"end":1696814057978},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"insertimage\") before":{"start":1696814057978,"end":1696814057979},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814057979,"end":1696814057980},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057981,"end":1696814057981},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"insertimage\") after":{"start":1696814057981,"end":1696814057982},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814057982,"end":1696814057983},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814057984,"end":1696814057984},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814057984,"end":1696814057985},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" checks for modifications to non-editable content":{"start":1696814057987,"end":1696814057987},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" compare innerHTML":{"start":1696814057987,"end":1696814057988},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814057988,"end":1696814057989},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814057989,"end":1696814057990},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814057990,"end":1696814057991},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814057991,"end":1696814057992},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814057992,"end":1696814057992},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814057993,"end":1696814057994},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814057994,"end":1696814057995},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"insertimage\") before":{"start":1696814057995,"end":1696814057996},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814057996,"end":1696814057997},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814057997,"end":1696814057997},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandState(\"insertimage\") after":{"start":1696814057997,"end":1696814057998},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<div>baz]quz</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814057998,"end":1696814057999},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058000,"end":1696814058002},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" checks for modifications to non-editable content":{"start":1696814058002,"end":1696814058003},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" compare innerHTML":{"start":1696814058003,"end":1696814058004},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058004,"end":1696814058005},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandState(\"insertimage\") before":{"start":1696814058005,"end":1696814058006},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandValue(\"insertimage\") before":{"start":1696814058006,"end":1696814058007},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058007,"end":1696814058008},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandState(\"insertimage\") after":{"start":1696814058008,"end":1696814058009},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<h1>baz]quz</h1>\" queryCommandValue(\"insertimage\") after":{"start":1696814058009,"end":1696814058010},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058011,"end":1696814058011},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058012,"end":1696814058013},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058013,"end":1696814058015},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" compare innerHTML":{"start":1696814058015,"end":1696814058016},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058016,"end":1696814058017},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058020,"end":1696814058021},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058021,"end":1696814058022},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058022,"end":1696814058023},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058023,"end":1696814058023},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058024,"end":1696814058024},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058024,"end":1696814058025},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058026,"end":1696814058026},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058026,"end":1696814058027},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058027,"end":1696814058028},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058028,"end":1696814058029},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058029,"end":1696814058030},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058030,"end":1696814058031},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058031,"end":1696814058032},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058033,"end":1696814058034},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" compare innerHTML":{"start":1696814058034,"end":1696814058035},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058035,"end":1696814058035},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058036,"end":1696814058036},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058036,"end":1696814058037},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058037,"end":1696814058038},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058038,"end":1696814058039},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058039,"end":1696814058040},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058040,"end":1696814058041},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058041,"end":1696814058042},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058042,"end":1696814058042},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058042,"end":1696814058042},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058042,"end":1696814058043},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058043,"end":1696814058044},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058047,"end":1696814058048},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" checks for modifications to non-editable content":{"start":1696814058048,"end":1696814058049},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" compare innerHTML":{"start":1696814058049,"end":1696814058050},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058050,"end":1696814058051},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandState(\"insertimage\") before":{"start":1696814058051,"end":1696814058052},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandValue(\"insertimage\") before":{"start":1696814058052,"end":1696814058053},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058053,"end":1696814058054},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandState(\"insertimage\") after":{"start":1696814058054,"end":1696814058054},"[[\"insertimage\",\"/img/lion.svg\"]] \"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\" queryCommandValue(\"insertimage\") after":{"start":1696814058054,"end":1696814058056},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058056,"end":1696814058056},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058056,"end":1696814058058},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058059,"end":1696814058060},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" compare innerHTML":{"start":1696814058060,"end":1696814058061},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058061,"end":1696814058061},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058061,"end":1696814058063},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058063,"end":1696814058064},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058064,"end":1696814058065},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058065,"end":1696814058066},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058066,"end":1696814058066},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058066,"end":1696814058066},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058066,"end":1696814058067},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058067,"end":1696814058068},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058068,"end":1696814058069},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058069,"end":1696814058070},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058070,"end":1696814058071},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058072,"end":1696814058072},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058073,"end":1696814058074},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058074,"end":1696814058075},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" compare innerHTML":{"start":1696814058075,"end":1696814058076},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058076,"end":1696814058077},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058077,"end":1696814058078},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058078,"end":1696814058079},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058079,"end":1696814058079},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058079,"end":1696814058080},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058080,"end":1696814058081},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058081,"end":1696814058082},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058082,"end":1696814058083},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058083,"end":1696814058084},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058084,"end":1696814058085},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058085,"end":1696814058085},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p><b>foo[bar</b><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058086,"end":1696814058086},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058087,"end":1696814058088},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058088,"end":1696814058089},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058089,"end":1696814058090},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" compare innerHTML":{"start":1696814058090,"end":1696814058091},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058091,"end":1696814058092},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058092,"end":1696814058093},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058093,"end":1696814058094},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058094,"end":1696814058095},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058095,"end":1696814058096},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058096,"end":1696814058096},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058097,"end":1696814058097},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058097,"end":1696814058098},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058098,"end":1696814058099},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058099,"end":1696814058100},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058100,"end":1696814058101},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058101,"end":1696814058102},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058103,"end":1696814058103},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058104,"end":1696814058105},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" checks for modifications to non-editable content":{"start":1696814058105,"end":1696814058106},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" compare innerHTML":{"start":1696814058106,"end":1696814058107},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058107,"end":1696814058108},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058108,"end":1696814058109},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058109,"end":1696814058109},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058110,"end":1696814058110},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058110,"end":1696814058111},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058111,"end":1696814058112},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058112,"end":1696814058113},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058113,"end":1696814058114},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058114,"end":1696814058114},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058115,"end":1696814058115},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058115,"end":1696814058117},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[bar</div><p>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058117,"end":1696814058118},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058119,"end":1696814058120},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058120,"end":1696814058120},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" checks for modifications to non-editable content":{"start":1696814058121,"end":1696814058122},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" compare innerHTML":{"start":1696814058122,"end":1696814058122},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058122,"end":1696814058123},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058123,"end":1696814058124},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058125,"end":1696814058125},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058125,"end":1696814058126},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058126,"end":1696814058127},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058127,"end":1696814058129},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058129,"end":1696814058130},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"insertimage\") before":{"start":1696814058130,"end":1696814058131},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"insertimage\") before":{"start":1696814058131,"end":1696814058131},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058132,"end":1696814058132},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"insertimage\") after":{"start":1696814058132,"end":1696814058132},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"insertimage\") after":{"start":1696814058133,"end":1696814058133},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058134,"end":1696814058135},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058135,"end":1696814058136},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" checks for modifications to non-editable content":{"start":1696814058136,"end":1696814058137},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" compare innerHTML":{"start":1696814058137,"end":1696814058138},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058138,"end":1696814058139},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058139,"end":1696814058140},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058140,"end":1696814058141},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058141,"end":1696814058142},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058142,"end":1696814058143},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058143,"end":1696814058144},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058144,"end":1696814058144},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"insertimage\") before":{"start":1696814058144,"end":1696814058145},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"insertimage\") before":{"start":1696814058145,"end":1696814058146},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058146,"end":1696814058148},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandState(\"insertimage\") after":{"start":1696814058148,"end":1696814058149},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\" queryCommandValue(\"insertimage\") after":{"start":1696814058149,"end":1696814058150},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"stylewithcss\", false, \"true\") return value":{"start":1696814058150,"end":1696814058151},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058151,"end":1696814058153},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058153,"end":1696814058154},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" checks for modifications to non-editable content":{"start":1696814058154,"end":1696814058155},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" compare innerHTML":{"start":1696814058155,"end":1696814058156},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814058156,"end":1696814058157},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814058157,"end":1696814058158},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814058158,"end":1696814058159},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814058159,"end":1696814058159},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814058159,"end":1696814058160},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814058160,"end":1696814058161},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058161,"end":1696814058162},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058162,"end":1696814058163},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058163,"end":1696814058163},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058164,"end":1696814058164},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058165,"end":1696814058166},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058166,"end":1696814058167},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058167,"end":1696814058167},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058167,"end":1696814058172},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058172,"end":1696814058173},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058173,"end":1696814058174},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058174,"end":1696814058175},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058175,"end":1696814058176},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"stylewithcss\", false, \"false\") return value":{"start":1696814058176,"end":1696814058177},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058177,"end":1696814058177},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058177,"end":1696814058179},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" checks for modifications to non-editable content":{"start":1696814058179,"end":1696814058180},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" compare innerHTML":{"start":1696814058180,"end":1696814058181},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814058181,"end":1696814058182},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814058182,"end":1696814058183},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814058183,"end":1696814058184},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814058184,"end":1696814058184},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814058185,"end":1696814058186},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814058186,"end":1696814058186},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058186,"end":1696814058187},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058187,"end":1696814058188},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058189,"end":1696814058189},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058190,"end":1696814058190},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058190,"end":1696814058191},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058191,"end":1696814058192},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058192,"end":1696814058193},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058193,"end":1696814058193},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058193,"end":1696814058194},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058194,"end":1696814058195},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058195,"end":1696814058196},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058196,"end":1696814058197},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"stylewithcss\", false, \"true\") return value":{"start":1696814058198,"end":1696814058198},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058199,"end":1696814058199},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058199,"end":1696814058200},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" checks for modifications to non-editable content":{"start":1696814058201,"end":1696814058202},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" compare innerHTML":{"start":1696814058202,"end":1696814058203},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814058203,"end":1696814058204},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814058204,"end":1696814058205},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814058205,"end":1696814058206},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814058206,"end":1696814058206},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814058206,"end":1696814058206},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814058207,"end":1696814058208},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058208,"end":1696814058209},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058209,"end":1696814058209},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058209,"end":1696814058211},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058211,"end":1696814058211},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058212,"end":1696814058212},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058212,"end":1696814058213},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058213,"end":1696814058214},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058214,"end":1696814058215},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058215,"end":1696814058216},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058216,"end":1696814058217},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058217,"end":1696814058218},"[[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058218,"end":1696814058218},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"stylewithcss\", false, \"false\") return value":{"start":1696814058218,"end":1696814058219},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058219,"end":1696814058220},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058220,"end":1696814058221},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" checks for modifications to non-editable content":{"start":1696814058221,"end":1696814058222},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" compare innerHTML":{"start":1696814058223,"end":1696814058223},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") before":{"start":1696814058223,"end":1696814058224},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") before":{"start":1696814058224,"end":1696814058225},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") before":{"start":1696814058225,"end":1696814058227},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"stylewithcss\") after":{"start":1696814058227,"end":1696814058227},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"stylewithcss\") after":{"start":1696814058228,"end":1696814058228},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"stylewithcss\") after":{"start":1696814058228,"end":1696814058229},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058229,"end":1696814058230},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058230,"end":1696814058230},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058230,"end":1696814058231},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058231,"end":1696814058232},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058232,"end":1696814058233},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058233,"end":1696814058234},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058234,"end":1696814058235},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") before":{"start":1696814058235,"end":1696814058236},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") before":{"start":1696814058236,"end":1696814058236},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058237,"end":1696814058237},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandState(\"insertimage\") after":{"start":1696814058237,"end":1696814058238},"[[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p style=color:blue>baz]quz\" queryCommandValue(\"insertimage\") after":{"start":1696814058238,"end":1696814058239},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058240,"end":1696814058241},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058241,"end":1696814058242},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" checks for modifications to non-editable content":{"start":1696814058242,"end":1696814058243},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" compare innerHTML":{"start":1696814058243,"end":1696814058244},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058244,"end":1696814058245},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058245,"end":1696814058246},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058246,"end":1696814058247},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058247,"end":1696814058248},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058248,"end":1696814058249},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058249,"end":1696814058249},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058250,"end":1696814058250},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"insertimage\") before":{"start":1696814058250,"end":1696814058251},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"insertimage\") before":{"start":1696814058251,"end":1696814058252},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058252,"end":1696814058253},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"insertimage\") after":{"start":1696814058253,"end":1696814058254},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"insertimage\") after":{"start":1696814058254,"end":1696814058255},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058256,"end":1696814058257},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058257,"end":1696814058258},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" checks for modifications to non-editable content":{"start":1696814058258,"end":1696814058259},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" compare innerHTML":{"start":1696814058259,"end":1696814058260},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058260,"end":1696814058260},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058261,"end":1696814058261},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058261,"end":1696814058262},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058262,"end":1696814058263},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058263,"end":1696814058264},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058264,"end":1696814058265},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058265,"end":1696814058266},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"insertimage\") before":{"start":1696814058266,"end":1696814058267},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"insertimage\") before":{"start":1696814058267,"end":1696814058268},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058268,"end":1696814058269},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandState(\"insertimage\") after":{"start":1696814058269,"end":1696814058270},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[bar<p><b>baz]quz</b>\" queryCommandValue(\"insertimage\") after":{"start":1696814058270,"end":1696814058271},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058271,"end":1696814058271},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058272,"end":1696814058273},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" checks for modifications to non-editable content":{"start":1696814058273,"end":1696814058274},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" compare innerHTML":{"start":1696814058274,"end":1696814058275},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058275,"end":1696814058277},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058277,"end":1696814058277},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058277,"end":1696814058278},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058278,"end":1696814058279},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058279,"end":1696814058280},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058280,"end":1696814058281},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058281,"end":1696814058282},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058282,"end":1696814058283},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058283,"end":1696814058284},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058284,"end":1696814058284},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058284,"end":1696814058285},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058285,"end":1696814058285},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058286,"end":1696814058287},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058287,"end":1696814058288},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" checks for modifications to non-editable content":{"start":1696814058288,"end":1696814058289},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" compare innerHTML":{"start":1696814058289,"end":1696814058290},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058290,"end":1696814058291},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058291,"end":1696814058292},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058292,"end":1696814058292},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058293,"end":1696814058294},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058294,"end":1696814058295},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058295,"end":1696814058296},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058296,"end":1696814058296},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058296,"end":1696814058297},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058297,"end":1696814058298},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058298,"end":1696814058298},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058299,"end":1696814058299},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo<p>[bar<p>baz]</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058299,"end":1696814058301},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058301,"end":1696814058302},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" checks for modifications to non-editable content":{"start":1696814058303,"end":1696814058303},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" compare innerHTML":{"start":1696814058303,"end":1696814058304},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058305,"end":1696814058305},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandState(\"insertimage\") before":{"start":1696814058306,"end":1696814058306},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandValue(\"insertimage\") before":{"start":1696814058306,"end":1696814058307},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058307,"end":1696814058308},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandState(\"insertimage\") after":{"start":1696814058308,"end":1696814058309},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<br>]bar\" queryCommandValue(\"insertimage\") after":{"start":1696814058309,"end":1696814058310},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058310,"end":1696814058312},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058312,"end":1696814058312},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" checks for modifications to non-editable content":{"start":1696814058313,"end":1696814058314},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" compare innerHTML":{"start":1696814058314,"end":1696814058315},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058315,"end":1696814058316},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058316,"end":1696814058317},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058317,"end":1696814058318},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058318,"end":1696814058319},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058319,"end":1696814058320},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058320,"end":1696814058321},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058321,"end":1696814058322},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058322,"end":1696814058322},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058323,"end":1696814058323},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058323,"end":1696814058324},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058324,"end":1696814058325},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058325,"end":1696814058326},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058327,"end":1696814058328},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058328,"end":1696814058329},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" checks for modifications to non-editable content":{"start":1696814058329,"end":1696814058331},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" compare innerHTML":{"start":1696814058331,"end":1696814058332},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058332,"end":1696814058333},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058333,"end":1696814058334},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058334,"end":1696814058334},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058335,"end":1696814058335},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058335,"end":1696814058336},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058336,"end":1696814058337},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058337,"end":1696814058338},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058338,"end":1696814058339},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058339,"end":1696814058340},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058340,"end":1696814058341},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058341,"end":1696814058341},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058342,"end":1696814058342},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058343,"end":1696814058344},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058344,"end":1696814058345},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" checks for modifications to non-editable content":{"start":1696814058345,"end":1696814058346},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" compare innerHTML":{"start":1696814058346,"end":1696814058347},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058347,"end":1696814058348},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058348,"end":1696814058349},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058349,"end":1696814058350},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058350,"end":1696814058351},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058351,"end":1696814058352},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058352,"end":1696814058353},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058353,"end":1696814058353},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058353,"end":1696814058354},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058354,"end":1696814058354},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058355,"end":1696814058355},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058356,"end":1696814058357},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058357,"end":1696814058358},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058359,"end":1696814058359},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058360,"end":1696814058361},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" checks for modifications to non-editable content":{"start":1696814058361,"end":1696814058362},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" compare innerHTML":{"start":1696814058362,"end":1696814058363},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058363,"end":1696814058364},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058364,"end":1696814058365},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058365,"end":1696814058365},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058365,"end":1696814058365},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058366,"end":1696814058366},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058366,"end":1696814058367},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058367,"end":1696814058368},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058368,"end":1696814058369},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058369,"end":1696814058370},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058370,"end":1696814058371},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058371,"end":1696814058372},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p><p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058372,"end":1696814058373},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058374,"end":1696814058374},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058374,"end":1696814058375},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" checks for modifications to non-editable content":{"start":1696814058376,"end":1696814058376},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" compare innerHTML":{"start":1696814058377,"end":1696814058377},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058377,"end":1696814058378},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058378,"end":1696814058379},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058379,"end":1696814058380},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058380,"end":1696814058381},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058381,"end":1696814058382},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058383,"end":1696814058384},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058384,"end":1696814058385},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058385,"end":1696814058387},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058387,"end":1696814058388},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058388,"end":1696814058389},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058389,"end":1696814058389},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058390,"end":1696814058390},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058391,"end":1696814058391},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058392,"end":1696814058393},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" checks for modifications to non-editable content":{"start":1696814058393,"end":1696814058394},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" compare innerHTML":{"start":1696814058394,"end":1696814058395},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058395,"end":1696814058396},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058396,"end":1696814058397},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058397,"end":1696814058398},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058398,"end":1696814058399},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058399,"end":1696814058400},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058400,"end":1696814058401},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058401,"end":1696814058402},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058402,"end":1696814058403},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058403,"end":1696814058404},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058404,"end":1696814058404},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058405,"end":1696814058405},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058405,"end":1696814058406},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058407,"end":1696814058407},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" checks for modifications to non-editable content":{"start":1696814058408,"end":1696814058409},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" compare innerHTML":{"start":1696814058409,"end":1696814058410},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058410,"end":1696814058411},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058411,"end":1696814058411},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058411,"end":1696814058412},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058412,"end":1696814058413},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058413,"end":1696814058414},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar<br>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058414,"end":1696814058415},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058416,"end":1696814058416},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058417,"end":1696814058417},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" checks for modifications to non-editable content":{"start":1696814058417,"end":1696814058419},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" compare innerHTML":{"start":1696814058419,"end":1696814058419},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058419,"end":1696814058419},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058420,"end":1696814058421},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058421,"end":1696814058422},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058422,"end":1696814058423},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058423,"end":1696814058424},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058424,"end":1696814058425},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058425,"end":1696814058426},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"insertimage\") before":{"start":1696814058426,"end":1696814058427},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814058427,"end":1696814058427},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058427,"end":1696814058428},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"insertimage\") after":{"start":1696814058428,"end":1696814058430},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814058430,"end":1696814058430},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058431,"end":1696814058432},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058432,"end":1696814058433},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" checks for modifications to non-editable content":{"start":1696814058433,"end":1696814058434},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" compare innerHTML":{"start":1696814058434,"end":1696814058441},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058442,"end":1696814058442},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058442,"end":1696814058443},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058444,"end":1696814058444},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058444,"end":1696814058445},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058445,"end":1696814058446},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058446,"end":1696814058447},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058447,"end":1696814058448},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"insertimage\") before":{"start":1696814058448,"end":1696814058449},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814058449,"end":1696814058451},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058451,"end":1696814058452},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandState(\"insertimage\") after":{"start":1696814058452,"end":1696814058452},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<p>]bar</p>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814058453,"end":1696814058454},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058454,"end":1696814058455},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" checks for modifications to non-editable content":{"start":1696814058456,"end":1696814058456},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" compare innerHTML":{"start":1696814058456,"end":1696814058457},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058457,"end":1696814058458},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandState(\"insertimage\") before":{"start":1696814058458,"end":1696814058459},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandValue(\"insertimage\") before":{"start":1696814058459,"end":1696814058460},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058460,"end":1696814058461},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandState(\"insertimage\") after":{"start":1696814058461,"end":1696814058462},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar\" queryCommandValue(\"insertimage\") after":{"start":1696814058462,"end":1696814058463},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058463,"end":1696814058465},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" checks for modifications to non-editable content":{"start":1696814058465,"end":1696814058466},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" compare innerHTML":{"start":1696814058466,"end":1696814058467},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058467,"end":1696814058468},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandState(\"insertimage\") before":{"start":1696814058468,"end":1696814058468},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandValue(\"insertimage\") before":{"start":1696814058468,"end":1696814058470},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058470,"end":1696814058470},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandState(\"insertimage\") after":{"start":1696814058470,"end":1696814058470},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<br>baz\" queryCommandValue(\"insertimage\") after":{"start":1696814058470,"end":1696814058472},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058472,"end":1696814058473},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" checks for modifications to non-editable content":{"start":1696814058474,"end":1696814058474},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" compare innerHTML":{"start":1696814058475,"end":1696814058475},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058475,"end":1696814058476},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandState(\"insertimage\") before":{"start":1696814058477,"end":1696814058477},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandValue(\"insertimage\") before":{"start":1696814058477,"end":1696814058478},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058478,"end":1696814058479},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandState(\"insertimage\") after":{"start":1696814058479,"end":1696814058480},"[[\"insertimage\",\"/img/lion.svg\"]] \"<p>foo[</p>]bar<p>baz</p>\" queryCommandValue(\"insertimage\") after":{"start":1696814058480,"end":1696814058480},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058480,"end":1696814058481},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058481,"end":1696814058482},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" checks for modifications to non-editable content":{"start":1696814058482,"end":1696814058483},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" compare innerHTML":{"start":1696814058483,"end":1696814058484},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058485,"end":1696814058485},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058485,"end":1696814058486},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058486,"end":1696814058487},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058487,"end":1696814058488},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058488,"end":1696814058489},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058489,"end":1696814058490},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058490,"end":1696814058491},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058491,"end":1696814058492},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058492,"end":1696814058492},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058492,"end":1696814058493},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058493,"end":1696814058493},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058494,"end":1696814058494},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058495,"end":1696814058496},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058496,"end":1696814058497},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" checks for modifications to non-editable content":{"start":1696814058498,"end":1696814058499},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" compare innerHTML":{"start":1696814058499,"end":1696814058500},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058500,"end":1696814058501},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058501,"end":1696814058502},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058502,"end":1696814058502},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058502,"end":1696814058503},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058503,"end":1696814058504},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058504,"end":1696814058505},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058505,"end":1696814058506},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058506,"end":1696814058507},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058508,"end":1696814058508},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058508,"end":1696814058509},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058509,"end":1696814058510},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058510,"end":1696814058511},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058512,"end":1696814058513},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" checks for modifications to non-editable content":{"start":1696814058513,"end":1696814058514},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" compare innerHTML":{"start":1696814058514,"end":1696814058515},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058515,"end":1696814058516},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandState(\"insertimage\") before":{"start":1696814058516,"end":1696814058517},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandValue(\"insertimage\") before":{"start":1696814058517,"end":1696814058518},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058518,"end":1696814058518},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandState(\"insertimage\") after":{"start":1696814058519,"end":1696814058519},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo[</p></div>]bar\" queryCommandValue(\"insertimage\") after":{"start":1696814058519,"end":1696814058520},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\": execCommand(\"defaultparagraphseparator\", false, \"div\") return value":{"start":1696814058521,"end":1696814058521},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058521,"end":1696814058522},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" checks for modifications to non-editable content":{"start":1696814058523,"end":1696814058523},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" compare innerHTML":{"start":1696814058524,"end":1696814058524},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058524,"end":1696814058525},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058525,"end":1696814058526},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058526,"end":1696814058527},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058527,"end":1696814058528},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058528,"end":1696814058529},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058529,"end":1696814058530},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058530,"end":1696814058530},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058531,"end":1696814058531},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058531,"end":1696814058532},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058532,"end":1696814058533},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058533,"end":1696814058533},"[[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058533,"end":1696814058534},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\": execCommand(\"defaultparagraphseparator\", false, \"p\") return value":{"start":1696814058535,"end":1696814058535},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058535,"end":1696814058536},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" checks for modifications to non-editable content":{"start":1696814058537,"end":1696814058538},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" compare innerHTML":{"start":1696814058538,"end":1696814058539},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") before":{"start":1696814058539,"end":1696814058540},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"defaultparagraphseparator\") before":{"start":1696814058540,"end":1696814058541},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"defaultparagraphseparator\") before":{"start":1696814058541,"end":1696814058542},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"defaultparagraphseparator\") after":{"start":1696814058542,"end":1696814058543},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"defaultparagraphseparator\") after":{"start":1696814058543,"end":1696814058544},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"defaultparagraphseparator\") after":{"start":1696814058544,"end":1696814058544},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058545,"end":1696814058545},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"insertimage\") before":{"start":1696814058545,"end":1696814058546},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058546,"end":1696814058546},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058546,"end":1696814058547},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandState(\"insertimage\") after":{"start":1696814058547,"end":1696814058548},"[[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div><p>]bar</p>baz</div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058548,"end":1696814058549},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058549,"end":1696814058551},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" checks for modifications to non-editable content":{"start":1696814058551,"end":1696814058552},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" compare innerHTML":{"start":1696814058552,"end":1696814058552},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058553,"end":1696814058553},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandState(\"insertimage\") before":{"start":1696814058553,"end":1696814058555},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandValue(\"insertimage\") before":{"start":1696814058555,"end":1696814058556},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058556,"end":1696814058556},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandState(\"insertimage\") after":{"start":1696814058556,"end":1696814058558},"[[\"insertimage\",\"/img/lion.svg\"]] \"foo[<div>]bar<p>baz</p></div>\" queryCommandValue(\"insertimage\") after":{"start":1696814058558,"end":1696814058558},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058558,"end":1696814058559},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" checks for modifications to non-editable content":{"start":1696814058560,"end":1696814058561},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" compare innerHTML":{"start":1696814058561,"end":1696814058562},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058562,"end":1696814058563},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandState(\"insertimage\") before":{"start":1696814058563,"end":1696814058564},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandValue(\"insertimage\") before":{"start":1696814058564,"end":1696814058564},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058565,"end":1696814058565},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandState(\"insertimage\") after":{"start":1696814058565,"end":1696814058566},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div><p>foo</p>bar[</div>]baz\" queryCommandValue(\"insertimage\") after":{"start":1696814058566,"end":1696814058567},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\": execCommand(\"insertimage\", false, \"/img/lion.svg\") return value":{"start":1696814058568,"end":1696814058569},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" checks for modifications to non-editable content":{"start":1696814058569,"end":1696814058570},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" compare innerHTML":{"start":1696814058570,"end":1696814058570},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058570,"end":1696814058571},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandState(\"insertimage\") before":{"start":1696814058571,"end":1696814058572},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandValue(\"insertimage\") before":{"start":1696814058572,"end":1696814058573},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058573,"end":1696814058573},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandState(\"insertimage\") after":{"start":1696814058574,"end":1696814058575},"[[\"insertimage\",\"/img/lion.svg\"]] \"<div>foo<p>bar[</p></div>]baz\" queryCommandValue(\"insertimage\") after":{"start":1696814058575,"end":1696814058575},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\": execCommand(\"insertimage\", false, \"/日本語パス/lion.svg\") return value":{"start":1696814058576,"end":1696814058577},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" checks for modifications to non-editable content":{"start":1696814058577,"end":1696814058578},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" compare innerHTML":{"start":1696814058578,"end":1696814058579},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandIndeterm(\"insertimage\") before":{"start":1696814058579,"end":1696814058580},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandState(\"insertimage\") before":{"start":1696814058580,"end":1696814058581},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandValue(\"insertimage\") before":{"start":1696814058581,"end":1696814058582},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandIndeterm(\"insertimage\") after":{"start":1696814058582,"end":1696814058582},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandState(\"insertimage\") after":{"start":1696814058583,"end":1696814058583},"[[\"insertimage\",\"/日本語パス/lion.svg\"]] \"foo[]bar\" queryCommandValue(\"insertimage\") after":{"start":1696814058584,"end":1696814058584}},"proxy":{"requests":[{"url":"http://web-platform.test:8000/testharness_runner.html","request_start":1696814057.320421,"request_end":1696814057.3210893,"ts":1696814057.321332,"body":""},{"url":"http://web-platform.test:8000/editing/run/insertimage.html","request_start":1696814057.4902978,"request_end":1696814057.491119,"ts":1696814057.4913619,"body":""},{"url":"http://web-platform.test:8000/editing/include/reset.css","request_start":1696814057.5348542,"request_end":1696814057.5399134,"ts":1696814057.542024,"body":""},{"url":"http://web-platform.test:8000/editing/include/implementation.js","request_start":1696814057.5356047,"request_end":1696814057.5401444,"ts":1696814057.5425837,"body":""},{"url":"http://web-platform.test:8000/editing/include/tests.js","request_start":1696814057.536074,"request_end":1696814057.5404713,"ts":1696814057.542973,"body":""},{"url":"http://web-platform.test:8000/editing/data/insertimage.js","request_start":1696814057.5365202,"request_end":1696814057.540697,"ts":1696814057.543387,"body":""},{"url":"http://web-platform.test:8000/resources/testharness.js","request_start":1696814057.5369823,"request_end":1696814057.5409174,"ts":1696814057.5437884,"body":""},{"url":"http://web-platform.test:8000/resources/testharnessreport.js","request_start":1696814057.5374222,"request_end":1696814057.541517,"ts":1696814057.5441892,"body":""},{"url":"http://web-platform.test:8000/common/subset-tests.js","request_start":1696814057.539385,"request_end":1696814057.5417535,"ts":1696814057.544583,"body":""},{"url":"http://web-platform.test:8000/img/lion.svg","request_start":1696814057.6076303,"request_end":1696814057.6087005,"ts":1696814057.608933,"body":""},{"url":"http://web-platform.test:8000/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","request_start":1696814058.5851817,"request_end":1696814058.5861745,"ts":1696814058.586495,"body":""}],"responses":[{"url":"http://web-platform.test:8000/testharness_runner.html","request_start":1696814057.320421,"response_start":1696814057.3250763,"request_end":1696814057.3210893,"response_end":1696814057.3257678,"ts":1696814057.325935,"body":"<!doctype html>\n<title></title>\n<script>\nvar timeout_multiplier = 1;\nvar win = null;\n</script>\n"},{"url":"http://web-platform.test:8000/editing/run/insertimage.html","request_start":1696814057.4902978,"response_start":1696814057.4971786,"request_end":1696814057.491119,"response_end":1696814057.4977646,"ts":1696814057.4979804,"body":"<!doctype html>\n<meta charset=utf-8>\n<meta name=\"timeout\" content=\"long\">\n<link rel=stylesheet href=../include/reset.css>\n<title>insertimage - HTML editing conformance tests</title>\n\n<div id=log></div>\n\n<div id=test-container></div>\n\n<script src=../include/implementation.js></script>\n<script>var testsJsLibraryOnly = true</script>\n<script src=../include/tests.js></script>\n<script src=../data/insertimage.js></script>\n<script src=/resources/testharness.js></script>\n<script src=/resources/testharnessreport.js></script>\n<script src=\"/common/subset-tests.js\"></script>\n<script>\n\"use strict\";\n\n(function() {\n    // Make document.body.innerHTML more tidy by removing unnecessary things.\n    [].forEach.call(document.querySelectorAll(\"script\"), function(node) {\n        node.parentNode.removeChild(node);\n    });\n\n    if (true) {\n        // Silly hack: the CSS styling flag should be true, not false, to match\n        // expected results.  This is because every group of tests except the\n        // last (multitest) sets styleWithCSS automatically, and it sets it\n        // first to false and then to true.  Thus it's left at true at the end\n        // of each group of tests, so in gentest.html it will be true when\n        // starting each group of tests other than the first.  But browsers are\n        // supposed to default it to false when the page loads, so flip it.\n        try { document.execCommand(\"styleWithCSS\", false, \"true\") } catch(e) {}\n    }\n\n    browserTests.forEach(runConformanceTest);\n\n    document.getElementById(\"test-container\").parentNode\n        .removeChild(document.getElementById(\"test-container\"));\n})();\n</script>\n"},{"url":"http://web-platform.test:8000/editing/include/reset.css","request_start":1696814057.5348542,"response_start":1696814057.5547578,"request_end":1696814057.5399134,"response_end":1696814057.555361,"ts":1696814057.5555668,"body":"/* Make sure various CSS values are what are expected, so that tests work\n * right. */\nbody { font-family: serif }\n/* http://www.w3.org/Bugs/Public/show_bug.cgi?id=12154\n * https://bugzilla.mozilla.org/show_bug.cgi?id=589124\n * https://bugs.webkit.org/show_bug.cgi?id=56400 */\nb, strong { font-weight: bold }\n.bold { font-weight: bold }\n.notbold { font-weight: normal }\n.underline { text-decoration: underline }\n.line-through { text-decoration: line-through }\n.underline-and-line-through { text-decoration: underline line-through }\n#purple { color: purple }\n/* https://bugs.webkit.org/show_bug.cgi?id=56670 */\ndfn { font-style: italic }\n/* Opera has weird default blockquote style */\nblockquote { margin: 1em 40px }\n/* Some tests assume links are blue, for the sake of argument, but they aren't\n * blue in any browser.  And :visited definitely isn't blue, except in engines\n * like Gecko that lie.\n *\n * This should really be #00e, probably.  See:\n * http://www.w3.org/Bugs/Public/show_bug.cgi?id=13330 */\n:link, :visited { color: blue }\n/* http://www.w3.org/Bugs/Public/show_bug.cgi?id=14066\n * https://bugs.webkit.org/show_bug.cgi?id=68392 */\nquasit { text-align: inherit }\n"},{"url":"http://web-platform.test:8000/resources/testharnessreport.js","request_start":1696814057.5374222,"response_start":1696814057.5650377,"request_end":1696814057.541517,"response_end":1696814057.5661535,"ts":1696814057.5672405,"body":"class MessageQueue {\n  constructor() {\n    this.item_id = 0;\n    this._queue = [];\n  }\n\n  push(item) {\n    let cmd_id = this.item_id++;\n    item.id = cmd_id;\n    this._queue.push(item);\n    __wptrunner_process_next_event();\n    return cmd_id;\n  }\n\n  shift() {\n    return this._queue.shift();\n  }\n}\n\nwindow.__wptrunner_testdriver_callback = null;\nwindow.__wptrunner_message_queue = new MessageQueue();\nwindow.__wptrunner_url = null;\n\nwindow.__wptrunner_process_next_event = function() {\n  /* This function handles the next testdriver event. The presence of\n     window.testdriver_callback is used as a switch; when that function\n     is present we are able to handle the next event and when is is not\n     present we must wait. Therefore to drive the event processing, this\n     function must be called in two circumstances:\n       * Every time there is a new event that we may be able to handle\n       * Every time we set the callback function\n     This function unsets the callback, so no further testdriver actions\n     will be run until it is reset, which wptrunner does after it has\n     completed handling the current action.\n   */\n\n  if (!window.__wptrunner_testdriver_callback) {\n    return;\n  }\n  var data = window.__wptrunner_message_queue.shift();\n  if (!data) {\n    return;\n  }\n\n  var payload = undefined;\n\n  switch(data.type) {\n  case \"complete\":\n    var tests = data.tests;\n    var status = data.status;\n\n    var subtest_results = tests.map(function(x) {\n      return [x.name, x.status, x.message, x.stack];\n    });\n    payload = [status.status,\n               status.message,\n               status.stack,\n               subtest_results];\n    clearTimeout(window.__wptrunner_timer);\n    break;\n  case \"action\":\n    payload = data;\n    break;\n  default:\n    return;\n  }\n  var callback = window.__wptrunner_testdriver_callback;\n  window.__wptrunner_testdriver_callback = null;\n  callback([__wptrunner_url, data.type, payload]);\n};\n\n(function() {\n  var props = {output: 1,\n               timeout_multiplier: 1,\n               explicit_timeout: false,\n               debug: false,\n               message_events: [\"completion\"]};\n\n  add_completion_callback(function(tests, harness_status) {\n    __wptrunner_message_queue.push({\n      \"type\": \"complete\",\n      \"tests\": tests,\n      \"status\": harness_status});\n    __wptrunner_process_next_event();\n  });\n  setup(props);\n})();\n\n"},{"url":"http://web-platform.test:8000/editing/include/implementation.js","request_start":1696814057.5356047,"response_start":1696814057.5634406,"request_end":1696814057.5401444,"response_end":1696814057.568208,"ts":1696814057.5685117,"body":"\"use strict\";\n\nvar htmlNamespace = \"http://www.w3.org/1999/xhtml\";\n\nvar cssStylingFlag = false;\n\nvar defaultSingleLineContainerName = \"div\";\n\n// This is bad :(\nvar globalRange = null;\n\n// Commands are stored in a dictionary where we call their actions and such\nvar commands = {};\n\n///////////////////////////////////////////////////////////////////////////////\n////////////////////////////// Utility functions //////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n//@{\n\nfunction nextNode(node) {\n    if (node.hasChildNodes()) {\n        return node.firstChild;\n    }\n    return nextNodeDescendants(node);\n}\n\nfunction previousNode(node) {\n    if (node.previousSibling) {\n        node = node.previousSibling;\n        while (node.hasChildNodes()) {\n            node = node.lastChild;\n        }\n        return node;\n    }\n    if (node.parentNode\n    && node.parentNode.nodeType == Node.ELEMENT_NODE) {\n        return node.parentNode;\n    }\n    return null;\n}\n\nfunction nextNodeDescendants(node) {\n    while (node && !node.nextSibling) {\n        node = node.parentNode;\n    }\n    if (!node) {\n        return null;\n    }\n    return node.nextSibling;\n}\n\n/**\n * Returns true if ancestor is an ancestor of descendant, false otherwise.\n */\nfunction isAncestor(ancestor, descendant) {\n    return ancestor\n        && descendant\n        && Boolean(ancestor.compareDocumentPosition(descendant) & Node.DOCUMENT_POSITION_CONTAINED_BY);\n}\n\n/**\n * Returns true if ancestor is an ancestor of or equal to descendant, false\n * otherwise.\n */\nfunction isAncestorContainer(ancestor, descendant) {\n    return (ancestor || descendant)\n        && (ancestor == descendant || isAncestor(ancestor, descendant));\n}\n\n/**\n * Returns true if descendant is a descendant of ancestor, false otherwise.\n */\nfunction isDescendant(descendant, ancestor) {\n    return ancestor\n        && descendant\n        && Boolean(ancestor.compareDocumentPosition(descendant) & Node.DOCUMENT_POSITION_CONTAINED_BY);\n}\n\n/**\n * Returns true if node1 is before node2 in tree order, false otherwise.\n */\nfunction isBefore(node1, node2) {\n    return Boolean(node1.compareDocumentPosition(node2) & Node.DOCUMENT_POSITION_FOLLOWING);\n}\n\n/**\n * Returns true if node1 is after node2 in tree order, false otherwise.\n */\nfunction isAfter(node1, node2) {\n    return Boolean(node1.compareDocumentPosition(node2) & Node.DOCUMENT_POSITION_PRECEDING);\n}\n\nfunction getAncestors(node) {\n    var ancestors = [];\n    while (node.parentNode) {\n        ancestors.unshift(node.parentNode);\n        node = node.parentNode;\n    }\n    return ancestors;\n}\n\nfunction getInclusiveAncestors(node) {\n    return getAncestors(node).concat(node);\n}\n\nfunction getDescendants(node) {\n    var descendants = [];\n    var stop = nextNodeDescendants(node);\n    while ((node = nextNode(node))\n    && node != stop) {\n        descendants.push(node);\n    }\n    return descendants;\n}\n\nfunction getInclusiveDescendants(node) {\n    return [node].concat(getDescendants(node));\n}\n\nfunction convertProperty(property) {\n    // Special-case for now\n    var map = {\n        \"fontFamily\": \"font-family\",\n        \"fontSize\": \"font-size\",\n        \"fontStyle\": \"font-style\",\n        \"fontWeight\": \"font-weight\",\n        \"textDecoration\": \"text-decoration\",\n    };\n    if (typeof map[property] != \"undefined\") {\n        return map[property];\n    }\n\n    return property;\n}\n\n// Return the <font size=X> value for the given CSS size, or undefined if there\n// is none.\nfunction cssSizeToLegacy(cssVal) {\n    return {\n        \"x-small\": 1,\n        \"small\": 2,\n        \"medium\": 3,\n        \"large\": 4,\n        \"x-large\": 5,\n        \"xx-large\": 6,\n        \"xxx-large\": 7\n    }[cssVal];\n}\n\n// Return the CSS size given a legacy size.\nfunction legacySizeToCss(legacyVal) {\n    return {\n        1: \"x-small\",\n        2: \"small\",\n        3: \"medium\",\n        4: \"large\",\n        5: \"x-large\",\n        6: \"xx-large\",\n        7: \"xxx-large\",\n    }[legacyVal];\n}\n\n// Opera 11 puts HTML elements in the null namespace, it seems.\nfunction isHtmlNamespace(ns) {\n    return ns === null\n        || ns === htmlNamespace;\n}\n\n// \"the directionality\" from HTML.  I don't bother caring about non-HTML\n// elements.\n//\n// \"The directionality of an element is either 'ltr' or 'rtl', and is\n// determined as per the first appropriate set of steps from the following\n// list:\"\nfunction getDirectionality(element) {\n    // \"If the element's dir attribute is in the ltr state\n    //     The directionality of the element is 'ltr'.\"\n    if (element.dir == \"ltr\") {\n        return \"ltr\";\n    }\n\n    // \"If the element's dir attribute is in the rtl state\n    //     The directionality of the element is 'rtl'.\"\n    if (element.dir == \"rtl\") {\n        return \"rtl\";\n    }\n\n    // \"If the element's dir attribute is in the auto state\n    // \"If the element is a bdi element and the dir attribute is not in a\n    // defined state (i.e. it is not present or has an invalid value)\n    //     [lots of complicated stuff]\n    //\n    // Skip this, since no browser implements it anyway.\n\n    // \"If the element is a root element and the dir attribute is not in a\n    // defined state (i.e. it is not present or has an invalid value)\n    //     The directionality of the element is 'ltr'.\"\n    if (!isHtmlElement(element.parentNode)) {\n        return \"ltr\";\n    }\n\n    // \"If the element has a parent element and the dir attribute is not in a\n    // defined state (i.e. it is not present or has an invalid value)\n    //     The directionality of the element is the same as the element's\n    //     parent element's directionality.\"\n    return getDirectionality(element.parentNode);\n}\n\n//@}\n\n///////////////////////////////////////////////////////////////////////////////\n///////////////////////////// DOM Range functions /////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n//@{\n\nfunction getNodeIndex(node) {\n    var ret = 0;\n    while (node.previousSibling) {\n        ret++;\n        node = node.previousSibling;\n    }\n    return ret;\n}\n\n// \"The length of a Node node is the following, depending on node:\n//\n// ProcessingInstruction\n// DocumentType\n//   Always 0.\n// Text\n// Comment\n//   node's length.\n// Any other node\n//   node's childNodes's length.\"\nfunction getNodeLength(node) {\n    switch (node.nodeType) {\n        case Node.PROCESSING_INSTRUCTION_NODE:\n        case Node.DOCUMENT_TYPE_NODE:\n            return 0;\n\n        case Node.TEXT_NODE:\n        case Node.COMMENT_NODE:\n            return node.length;\n\n        default:\n            return node.childNodes.length;\n    }\n}\n\n/**\n * The position of two boundary points relative to one another, as defined by\n * DOM Range.\n */\nfunction getPosition(nodeA, offsetA, nodeB, offsetB) {\n    // \"If node A is the same as node B, return equal if offset A equals offset\n    // B, before if offset A is less than offset B, and after if offset A is\n    // greater than offset B.\"\n    if (nodeA == nodeB) {\n        if (offsetA == offsetB) {\n            return \"equal\";\n        }\n        if (offsetA < offsetB) {\n            return \"before\";\n        }\n        if (offsetA > offsetB) {\n            return \"after\";\n        }\n    }\n\n    // \"If node A is after node B in tree order, compute the position of (node\n    // B, offset B) relative to (node A, offset A). If it is before, return\n    // after. If it is after, return before.\"\n    if (nodeB.compareDocumentPosition(nodeA) & Node.DOCUMENT_POSITION_FOLLOWING) {\n        var pos = getPosition(nodeB, offsetB, nodeA, offsetA);\n        if (pos == \"before\") {\n            return \"after\";\n        }\n        if (pos == \"after\") {\n            return \"before\";\n        }\n    }\n\n    // \"If node A is an ancestor of node B:\"\n    if (nodeB.compareDocumentPosition(nodeA) & Node.DOCUMENT_POSITION_CONTAINS) {\n        // \"Let child equal node B.\"\n        var child = nodeB;\n\n        // \"While child is not a child of node A, set child to its parent.\"\n        while (child.parentNode != nodeA) {\n            child = child.parentNode;\n        }\n\n        // \"If the index of child is less than offset A, return after.\"\n        if (getNodeIndex(child) < offsetA) {\n            return \"after\";\n        }\n    }\n\n    // \"Return before.\"\n    return \"before\";\n}\n\n/**\n * Returns the furthest ancestor of a Node as defined by DOM Range.\n */\nfunction getFurthestAncestor(node) {\n    var root = node;\n    while (root.parentNode != null) {\n        root = root.parentNode;\n    }\n    return root;\n}\n\n/**\n * \"contained\" as defined by DOM Range: \"A Node node is contained in a range\n * range if node's furthest ancestor is the same as range's root, and (node, 0)\n * is after range's start, and (node, length of node) is before range's end.\"\n */\nfunction isContained(node, range) {\n    var pos1 = getPosition(node, 0, range.startContainer, range.startOffset);\n    var pos2 = getPosition(node, getNodeLength(node), range.endContainer, range.endOffset);\n\n    return getFurthestAncestor(node) == getFurthestAncestor(range.startContainer)\n        && pos1 == \"after\"\n        && pos2 == \"before\";\n}\n\n/**\n * Return all nodes contained in range that the provided function returns true\n * for, omitting any with an ancestor already being returned.\n */\nfunction getContainedNodes(range, condition) {\n    if (typeof condition == \"undefined\") {\n        condition = function() { return true };\n    }\n    var node = range.startContainer;\n    if (node.hasChildNodes()\n    && range.startOffset < node.childNodes.length) {\n        // A child is contained\n        node = node.childNodes[range.startOffset];\n    } else if (range.startOffset == getNodeLength(node)) {\n        // No descendant can be contained\n        node = nextNodeDescendants(node);\n    } else {\n        // No children; this node at least can't be contained\n        node = nextNode(node);\n    }\n\n    var stop = range.endContainer;\n    if (stop.hasChildNodes()\n    && range.endOffset < stop.childNodes.length) {\n        // The node after the last contained node is a child\n        stop = stop.childNodes[range.endOffset];\n    } else {\n        // This node and/or some of its children might be contained\n        stop = nextNodeDescendants(stop);\n    }\n\n    var nodeList = [];\n    while (isBefore(node, stop)) {\n        if (isContained(node, range)\n        && condition(node)) {\n            nodeList.push(node);\n            node = nextNodeDescendants(node);\n            continue;\n        }\n        node = nextNode(node);\n    }\n    return nodeList;\n}\n\n/**\n * As above, but includes nodes with an ancestor that's already been returned.\n */\nfunction getAllContainedNodes(range, condition) {\n    if (typeof condition == \"undefined\") {\n        condition = function() { return true };\n    }\n    var node = range.startContainer;\n    if (node.hasChildNodes()\n    && range.startOffset < node.childNodes.length) {\n        // A child is contained\n        node = node.childNodes[range.startOffset];\n    } else if (range.startOffset == getNodeLength(node)) {\n        // No descendant can be contained\n        node = nextNodeDescendants(node);\n    } else {\n        // No children; this node at least can't be contained\n        node = nextNode(node);\n    }\n\n    var stop = range.endContainer;\n    if (stop.hasChildNodes()\n    && range.endOffset < stop.childNodes.length) {\n        // The node after the last contained node is a child\n        stop = stop.childNodes[range.endOffset];\n    } else {\n        // This node and/or some of its children might be contained\n        stop = nextNodeDescendants(stop);\n    }\n\n    var nodeList = [];\n    while (isBefore(node, stop)) {\n        if (isContained(node, range)\n        && condition(node)) {\n            nodeList.push(node);\n        }\n        node = nextNode(node);\n    }\n    return nodeList;\n}\n\n// Returns either null, or something of the form rgb(x, y, z), or something of\n// the form rgb(x, y, z, w) with w != 0.\nfunction normalizeColor(color) {\n    if (color.toLowerCase() == \"currentcolor\") {\n        return null;\n    }\n\n    if (normalizeColor.resultCache === undefined) {\n        normalizeColor.resultCache = {};\n    }\n\n    if (normalizeColor.resultCache[color] !== undefined) {\n        return normalizeColor.resultCache[color];\n    }\n\n    var originalColor = color;\n\n    var outerSpan = document.createElement(\"span\");\n    document.body.appendChild(outerSpan);\n    outerSpan.style.color = \"black\";\n\n    var innerSpan = document.createElement(\"span\");\n    outerSpan.appendChild(innerSpan);\n    innerSpan.style.color = color;\n    color = getComputedStyle(innerSpan).color;\n\n    if (color == \"rgb(0, 0, 0)\") {\n        // Maybe it's really black, maybe it's invalid.\n        outerSpan.color = \"white\";\n        color = getComputedStyle(innerSpan).color;\n        if (color != \"rgb(0, 0, 0)\") {\n            return normalizeColor.resultCache[originalColor] = null;\n        }\n    }\n\n    document.body.removeChild(outerSpan);\n\n    // I rely on the fact that browsers generally provide consistent syntax for\n    // getComputedStyle(), although it's not standardized.  There are only\n    // three exceptions I found:\n    if (/^rgba\\([0-9]+, [0-9]+, [0-9]+, 1\\)$/.test(color)) {\n        // IE10PP2 seems to do this sometimes.\n        return normalizeColor.resultCache[originalColor] =\n            color.replace(\"rgba\", \"rgb\").replace(\", 1)\", \")\");\n    }\n    if (color == \"transparent\") {\n        // IE10PP2, Firefox 7.0a2, and Opera 11.50 all return \"transparent\" if\n        // the specified value is \"transparent\".\n        return normalizeColor.resultCache[originalColor] =\n            \"rgba(0, 0, 0, 0)\";\n    }\n    // Chrome 15 dev adds way too many significant figures.  This isn't a full\n    // fix, it just fixes one case that comes up in tests.\n    color = color.replace(/, 0.496094\\)$/, \", 0.5)\");\n    return normalizeColor.resultCache[originalColor] = color;\n}\n\n// Returns either null, or something of the form #xxxxxx.\nfunction parseSimpleColor(color) {\n    color = normalizeColor(color);\n    var matches = /^rgb\\(([0-9]+), ([0-9]+), ([0-9]+)\\)$/.exec(color);\n    if (matches) {\n        return \"#\"\n            + parseInt(matches[1]).toString(16).replace(/^.$/, \"0$&\")\n            + parseInt(matches[2]).toString(16).replace(/^.$/, \"0$&\")\n            + parseInt(matches[3]).toString(16).replace(/^.$/, \"0$&\");\n    }\n    return null;\n}\n\n//@}\n\n//////////////////////////////////////////////////////////////////////////////\n/////////////////////////// Edit command functions ///////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////\n///// Methods of the HTMLDocument interface /////\n/////////////////////////////////////////////////\n//@{\n\nvar executionStackDepth = 0;\n\n// Helper function for common behavior.\nfunction editCommandMethod(command, range, callback) {\n    // Set up our global range magic, but only if we're the outermost function\n    if (executionStackDepth == 0 && typeof range != \"undefined\") {\n        globalRange = range;\n    } else if (executionStackDepth == 0) {\n        globalRange = null;\n        globalRange = getActiveRange();\n    }\n\n    executionStackDepth++;\n    try {\n        var ret = callback();\n    } catch(e) {\n        executionStackDepth--;\n        throw e;\n    }\n    executionStackDepth--;\n    return ret;\n}\n\nfunction myExecCommand(command, showUi, value, range) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    // \"If only one argument was provided, let show UI be false.\"\n    //\n    // If range was passed, I can't actually detect how many args were passed\n    // . . .\n    if (arguments.length == 1\n    || (arguments.length >=4 && typeof showUi == \"undefined\")) {\n        showUi = false;\n    }\n\n    // \"If only one or two arguments were provided, let value be the empty\n    // string.\"\n    if (arguments.length <= 2\n    || (arguments.length >=4 && typeof value == \"undefined\")) {\n        value = \"\";\n    }\n\n    return editCommandMethod(command, range, (function(command, showUi, value) { return function() {\n        // \"If command is not supported or not enabled, return false.\"\n        if (!(command in commands) || !myQueryCommandEnabled(command)) {\n            return false;\n        }\n\n        // \"Take the action for command, passing value to the instructions as an\n        // argument.\"\n        var ret = commands[command].action(value);\n\n        // Check for bugs\n        if (ret !== true && ret !== false) {\n            throw \"execCommand() didn't return true or false: \" + ret;\n        }\n\n        // \"If the previous step returned false, return false.\"\n        if (ret === false) {\n            return false;\n        }\n\n        // \"Return true.\"\n        return true;\n    }})(command, showUi, value));\n}\n\nfunction myQueryCommandEnabled(command, range) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    return editCommandMethod(command, range, (function(command) { return function() {\n        // \"Return true if command is both supported and enabled, false\n        // otherwise.\"\n        if (!(command in commands)) {\n            return false;\n        }\n\n        // \"Among commands defined in this specification, those listed in\n        // Miscellaneous commands are always enabled, except for the cut\n        // command and the paste command. The other commands defined here are\n        // enabled if the active range is not null, its start node is either\n        // editable or an editing host, its end node is either editable or an\n        // editing host, and there is some editing host that is an inclusive\n        // ancestor of both its start node and its end node.\"\n        return [\"copy\", \"defaultparagraphseparator\", \"selectall\", \"stylewithcss\",\n        \"usecss\"].indexOf(command) != -1\n            || (\n                getActiveRange() !== null\n                && (isEditable(getActiveRange().startContainer) || isEditingHost(getActiveRange().startContainer))\n                && (isEditable(getActiveRange().endContainer) || isEditingHost(getActiveRange().endContainer))\n                && (getInclusiveAncestors(getActiveRange().commonAncestorContainer).some(isEditingHost))\n            );\n    }})(command));\n}\n\nfunction myQueryCommandIndeterm(command, range) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    return editCommandMethod(command, range, (function(command) { return function() {\n        // \"If command is not supported or has no indeterminacy, return false.\"\n        if (!(command in commands) || !(\"indeterm\" in commands[command])) {\n            return false;\n        }\n\n        // \"Return true if command is indeterminate, otherwise false.\"\n        return commands[command].indeterm();\n    }})(command));\n}\n\nfunction myQueryCommandState(command, range) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    return editCommandMethod(command, range, (function(command) { return function() {\n        // \"If command is not supported or has no state, return false.\"\n        if (!(command in commands) || !(\"state\" in commands[command])) {\n            return false;\n        }\n\n        // \"If the state override for command is set, return it.\"\n        if (typeof getStateOverride(command) != \"undefined\") {\n            return getStateOverride(command);\n        }\n\n        // \"Return true if command's state is true, otherwise false.\"\n        return commands[command].state();\n    }})(command));\n}\n\n// \"When the queryCommandSupported(command) method on the HTMLDocument\n// interface is invoked, the user agent must return true if command is\n// supported, and false otherwise.\"\nfunction myQueryCommandSupported(command) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    return command in commands;\n}\n\nfunction myQueryCommandValue(command, range) {\n    // \"All of these methods must treat their command argument ASCII\n    // case-insensitively.\"\n    command = command.toLowerCase();\n\n    return editCommandMethod(command, range, function() {\n        // \"If command is not supported or has no value, return the empty string.\"\n        if (!(command in commands) || !(\"value\" in commands[command])) {\n            return \"\";\n        }\n\n        // \"If command is \"fontSize\" and its value override is set, convert the\n        // value override to an integer number of pixels and return the legacy\n        // font size for the result.\"\n        if (command == \"fontsize\"\n        && getValueOverride(\"fontsize\") !== undefined) {\n            return getLegacyFontSize(getValueOverride(\"fontsize\"));\n        }\n\n        // \"If the value override for command is set, return it.\"\n        if (typeof getValueOverride(command) != \"undefined\") {\n            return getValueOverride(command);\n        }\n\n        // \"Return command's value.\"\n        return commands[command].value();\n    });\n}\n//@}\n\n//////////////////////////////\n///// Common definitions /////\n//////////////////////////////\n//@{\n\n// \"An HTML element is an Element whose namespace is the HTML namespace.\"\n//\n// I allow an extra argument to more easily check whether something is a\n// particular HTML element, like isHtmlElement(node, \"OL\").  It accepts arrays\n// too, like isHtmlElement(node, [\"OL\", \"UL\"]) to check if it's an ol or ul.\nfunction isHtmlElement(node, tags) {\n    if (typeof tags == \"string\") {\n        tags = [tags];\n    }\n    if (typeof tags == \"object\") {\n        tags = tags.map(function(tag) { return tag.toUpperCase() });\n    }\n    return node\n        && node.nodeType == Node.ELEMENT_NODE\n        && isHtmlNamespace(node.namespaceURI)\n        && (typeof tags == \"undefined\" || tags.indexOf(node.tagName) != -1);\n}\n\n// \"A prohibited paragraph child name is \"address\", \"article\", \"aside\",\n// \"blockquote\", \"caption\", \"center\", \"col\", \"colgroup\", \"dd\", \"details\",\n// \"dir\", \"div\", \"dl\", \"dt\", \"fieldset\", \"figcaption\", \"figure\", \"footer\",\n// \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"li\",\n// \"listing\", \"menu\", \"nav\", \"ol\", \"p\", \"plaintext\", \"pre\", \"section\",\n// \"summary\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"ul\", or\n// \"xmp\".\"\nvar prohibitedParagraphChildNames = [\"address\", \"article\", \"aside\",\n    \"blockquote\", \"caption\", \"center\", \"col\", \"colgroup\", \"dd\", \"details\",\n    \"dir\", \"div\", \"dl\", \"dt\", \"fieldset\", \"figcaption\", \"figure\", \"footer\",\n    \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"li\",\n    \"listing\", \"menu\", \"nav\", \"ol\", \"p\", \"plaintext\", \"pre\", \"section\",\n    \"summary\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"ul\",\n    \"xmp\"];\n\n// \"A prohibited paragraph child is an HTML element whose local name is a\n// prohibited paragraph child name.\"\nfunction isProhibitedParagraphChild(node) {\n    return isHtmlElement(node, prohibitedParagraphChildNames);\n}\n\n// \"A block node is either an Element whose \"display\" property does not have\n// resolved value \"inline\" or \"inline-block\" or \"inline-table\" or \"none\", or a\n// Document, or a DocumentFragment.\"\nfunction isBlockNode(node) {\n    return node\n        && ((node.nodeType == Node.ELEMENT_NODE && [\"inline\", \"inline-block\", \"inline-table\", \"none\"].indexOf(getComputedStyle(node).display) == -1)\n        || node.nodeType == Node.DOCUMENT_NODE\n        || node.nodeType == Node.DOCUMENT_FRAGMENT_NODE);\n}\n\n// \"An inline node is a node that is not a block node.\"\nfunction isInlineNode(node) {\n    return node && !isBlockNode(node);\n}\n\n// \"An editing host is a node that is either an HTML element with a\n// contenteditable attribute set to the true state, or the HTML element child\n// of a Document whose designMode is enabled.\"\nfunction isEditingHost(node) {\n    return node\n        && isHtmlElement(node)\n        && (node.contentEditable == \"true\"\n        || (node.parentNode\n        && node.parentNode.nodeType == Node.DOCUMENT_NODE\n        && node.parentNode.designMode == \"on\"));\n}\n\n// \"Something is editable if it is a node; it is not an editing host; it does\n// not have a contenteditable attribute set to the false state; its parent is\n// an editing host or editable; and either it is an HTML element, or it is an\n// svg or math element, or it is not an Element and its parent is an HTML\n// element.\"\nfunction isEditable(node) {\n    return node\n        && !isEditingHost(node)\n        && (node.nodeType != Node.ELEMENT_NODE || node.contentEditable != \"false\")\n        && (isEditingHost(node.parentNode) || isEditable(node.parentNode))\n        && (isHtmlElement(node)\n        || (node.nodeType == Node.ELEMENT_NODE && node.namespaceURI == \"http://www.w3.org/2000/svg\" && node.localName == \"svg\")\n        || (node.nodeType == Node.ELEMENT_NODE && node.namespaceURI == \"http://www.w3.org/1998/Math/MathML\" && node.localName == \"math\")\n        || (node.nodeType != Node.ELEMENT_NODE && isHtmlElement(node.parentNode)));\n}\n\n// Helper function, not defined in the spec\nfunction hasEditableDescendants(node) {\n    for (var i = 0; i < node.childNodes.length; i++) {\n        if (isEditable(node.childNodes[i])\n        || hasEditableDescendants(node.childNodes[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// \"The editing host of node is null if node is neither editable nor an editing\n// host; node itself, if node is an editing host; or the nearest ancestor of\n// node that is an editing host, if node is editable.\"\nfunction getEditingHostOf(node) {\n    if (isEditingHost(node)) {\n        return node;\n    } else if (isEditable(node)) {\n        var ancestor = node.parentNode;\n        while (!isEditingHost(ancestor)) {\n            ancestor = ancestor.parentNode;\n        }\n        return ancestor;\n    } else {\n        return null;\n    }\n}\n\n// \"Two nodes are in the same editing host if the editing host of the first is\n// non-null and the same as the editing host of the second.\"\nfunction inSameEditingHost(node1, node2) {\n    return getEditingHostOf(node1)\n        && getEditingHostOf(node1) == getEditingHostOf(node2);\n}\n\n// \"A collapsed line break is a br that begins a line box which has nothing\n// else in it, and therefore has zero height.\"\nfunction isCollapsedLineBreak(br) {\n    if (!isHtmlElement(br, \"br\")) {\n        return false;\n    }\n\n    // Add a zwsp after it and see if that changes the height of the nearest\n    // non-inline parent.  Note: this is not actually reliable, because the\n    // parent might have a fixed height or something.\n    var ref = br.parentNode;\n    while (getComputedStyle(ref).display == \"inline\") {\n        ref = ref.parentNode;\n    }\n    var refStyle = ref.hasAttribute(\"style\") ? ref.getAttribute(\"style\") : null;\n    ref.style.height = \"auto\";\n    ref.style.maxHeight = \"none\";\n    ref.style.minHeight = \"0\";\n    var space = document.createTextNode(\"\\u200b\");\n    var origHeight = ref.offsetHeight;\n    if (origHeight == 0) {\n        throw \"isCollapsedLineBreak: original height is zero, bug?\";\n    }\n    br.parentNode.insertBefore(space, br.nextSibling);\n    var finalHeight = ref.offsetHeight;\n    space.parentNode.removeChild(space);\n    if (refStyle === null) {\n        // Without the setAttribute() line, removeAttribute() doesn't work in\n        // Chrome 14 dev.  I have no idea why.\n        ref.setAttribute(\"style\", \"\");\n        ref.removeAttribute(\"style\");\n    } else {\n        ref.setAttribute(\"style\", refStyle);\n    }\n\n    // Allow some leeway in case the zwsp didn't create a whole new line, but\n    // only made an existing line slightly higher.  Firefox 6.0a2 shows this\n    // behavior when the first line is bold.\n    return origHeight < finalHeight - 5;\n}\n\n// \"An extraneous line break is a br that has no visual effect, in that\n// removing it from the DOM would not change layout, except that a br that is\n// the sole child of an li is not extraneous.\"\n//\n// FIXME: This doesn't work in IE, since IE ignores display: none in\n// contenteditable.\nfunction isExtraneousLineBreak(br) {\n    if (!isHtmlElement(br, \"br\")) {\n        return false;\n    }\n\n    if (isHtmlElement(br.parentNode, \"li\")\n    && br.parentNode.childNodes.length == 1) {\n        return false;\n    }\n\n    // Make the line break disappear and see if that changes the block's\n    // height.  Yes, this is an absurd hack.  We have to reset height etc. on\n    // the reference node because otherwise its height won't change if it's not\n    // auto.\n    var ref = br.parentNode;\n    while (getComputedStyle(ref).display == \"inline\") {\n        ref = ref.parentNode;\n    }\n    var refStyle = ref.hasAttribute(\"style\") ? ref.getAttribute(\"style\") : null;\n    ref.style.height = \"auto\";\n    ref.style.maxHeight = \"none\";\n    ref.style.minHeight = \"0\";\n    var brStyle = br.hasAttribute(\"style\") ? br.getAttribute(\"style\") : null;\n    var origHeight = ref.offsetHeight;\n    if (origHeight == 0) {\n        throw \"isExtraneousLineBreak: original height is zero, bug?\";\n    }\n    br.setAttribute(\"style\", \"display:none\");\n    var finalHeight = ref.offsetHeight;\n    if (refStyle === null) {\n        // Without the setAttribute() line, removeAttribute() doesn't work in\n        // Chrome 14 dev.  I have no idea why.\n        ref.setAttribute(\"style\", \"\");\n        ref.removeAttribute(\"style\");\n    } else {\n        ref.setAttribute(\"style\", refStyle);\n    }\n    if (brStyle === null) {\n        br.removeAttribute(\"style\");\n    } else {\n        br.setAttribute(\"style\", brStyle);\n    }\n\n    return origHeight == finalHeight;\n}\n\n// \"A whitespace node is either a Text node whose data is the empty string; or\n// a Text node whose data consists only of one or more tabs (0x0009), line\n// feeds (0x000A), carriage returns (0x000D), and/or spaces (0x0020), and whose\n// parent is an Element whose resolved value for \"white-space\" is \"normal\" or\n// \"nowrap\"; or a Text node whose data consists only of one or more tabs\n// (0x0009), carriage returns (0x000D), and/or spaces (0x0020), and whose\n// parent is an Element whose resolved value for \"white-space\" is \"pre-line\".\"\nfunction isWhitespaceNode(node) {\n    return node\n        && node.nodeType == Node.TEXT_NODE\n        && (node.data == \"\"\n        || (\n            /^[\\t\\n\\r ]+$/.test(node.data)\n            && node.parentNode\n            && node.parentNode.nodeType == Node.ELEMENT_NODE\n            && [\"normal\", \"nowrap\"].indexOf(getComputedStyle(node.parentNode).whiteSpace) != -1\n        ) || (\n            /^[\\t\\r ]+$/.test(node.data)\n            && node.parentNode\n            && node.parentNode.nodeType == Node.ELEMENT_NODE\n            && getComputedStyle(node.parentNode).whiteSpace == \"pre-line\"\n        ));\n}\n\n// \"node is a collapsed whitespace node if the following algorithm returns\n// true:\"\nfunction isCollapsedWhitespaceNode(node) {\n    // \"If node is not a whitespace node, return false.\"\n    if (!isWhitespaceNode(node)) {\n        return false;\n    }\n\n    // \"If node's data is the empty string, return true.\"\n    if (node.data == \"\") {\n        return true;\n    }\n\n    // \"Let ancestor be node's parent.\"\n    var ancestor = node.parentNode;\n\n    // \"If ancestor is null, return true.\"\n    if (!ancestor) {\n        return true;\n    }\n\n    // \"If the \"display\" property of some ancestor of node has resolved value\n    // \"none\", return true.\"\n    if (getAncestors(node).some(function(ancestor) {\n        return ancestor.nodeType == Node.ELEMENT_NODE\n            && getComputedStyle(ancestor).display == \"none\";\n    })) {\n        return true;\n    }\n\n    // \"While ancestor is not a block node and its parent is not null, set\n    // ancestor to its parent.\"\n    while (!isBlockNode(ancestor)\n    && ancestor.parentNode) {\n        ancestor = ancestor.parentNode;\n    }\n\n    // \"Let reference be node.\"\n    var reference = node;\n\n    // \"While reference is a descendant of ancestor:\"\n    while (reference != ancestor) {\n        // \"Let reference be the node before it in tree order.\"\n        reference = previousNode(reference);\n\n        // \"If reference is a block node or a br, return true.\"\n        if (isBlockNode(reference)\n        || isHtmlElement(reference, \"br\")) {\n            return true;\n        }\n\n        // \"If reference is a Text node that is not a whitespace node, or is an\n        // img, break from this loop.\"\n        if ((reference.nodeType == Node.TEXT_NODE && !isWhitespaceNode(reference))\n        || isHtmlElement(reference, \"img\")) {\n            break;\n        }\n    }\n\n    // \"Let reference be node.\"\n    reference = node;\n\n    // \"While reference is a descendant of ancestor:\"\n    var stop = nextNodeDescendants(ancestor);\n    while (reference != stop) {\n        // \"Let reference be the node after it in tree order, or null if there\n        // is no such node.\"\n        reference = nextNode(reference);\n\n        // \"If reference is a block node or a br, return true.\"\n        if (isBlockNode(reference)\n        || isHtmlElement(reference, \"br\")) {\n            return true;\n        }\n\n        // \"If reference is a Text node that is not a whitespace node, or is an\n        // img, break from this loop.\"\n        if ((reference && reference.nodeType == Node.TEXT_NODE && !isWhitespaceNode(reference))\n        || isHtmlElement(reference, \"img\")) {\n            break;\n        }\n    }\n\n    // \"Return false.\"\n    return false;\n}\n\n// \"Something is visible if it is a node that either is a block node, or a Text\n// node that is not a collapsed whitespace node, or an img, or a br that is not\n// an extraneous line break, or any node with a visible descendant; excluding\n// any node with an ancestor container Element whose \"display\" property has\n// resolved value \"none\".\"\nfunction isVisible(node) {\n    if (!node) {\n        return false;\n    }\n\n    if (getAncestors(node).concat(node)\n    .filter(function(node) { return node.nodeType == Node.ELEMENT_NODE })\n    .some(function(node) { return getComputedStyle(node).display == \"none\" })) {\n        return false;\n    }\n\n    if (isBlockNode(node)\n    || (node.nodeType == Node.TEXT_NODE && !isCollapsedWhitespaceNode(node))\n    || isHtmlElement(node, \"img\")\n    || (isHtmlElement(node, \"br\") && !isExtraneousLineBreak(node))) {\n        return true;\n    }\n\n    for (var i = 0; i < node.childNodes.length; i++) {\n        if (isVisible(node.childNodes[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// \"Something is invisible if it is a node that is not visible.\"\nfunction isInvisible(node) {\n    return node && !isVisible(node);\n}\n\n// \"A collapsed block prop is either a collapsed line break that is not an\n// extraneous line break, or an Element that is an inline node and whose\n// children are all either invisible or collapsed block props and that has at\n// least one child that is a collapsed block prop.\"\nfunction isCollapsedBlockProp(node) {\n    if (isCollapsedLineBreak(node)\n    && !isExtraneousLineBreak(node)) {\n        return true;\n    }\n\n    if (!isInlineNode(node)\n    || node.nodeType != Node.ELEMENT_NODE) {\n        return false;\n    }\n\n    var hasCollapsedBlockPropChild = false;\n    for (var i = 0; i < node.childNodes.length; i++) {\n        if (!isInvisible(node.childNodes[i])\n        && !isCollapsedBlockProp(node.childNodes[i])) {\n            return false;\n        }\n        if (isCollapsedBlockProp(node.childNodes[i])) {\n            hasCollapsedBlockPropChild = true;\n        }\n    }\n\n    return hasCollapsedBlockPropChild;\n}\n\n// \"The active range is the range of the selection given by calling\n// getSelection() on the context object. (Thus the active range may be null.)\"\n//\n// We cheat and return globalRange if that's defined.  We also ensure that the\n// active range meets the requirements that selection boundary points are\n// supposed to meet, i.e., that the nodes are both Text or Element nodes that\n// descend from a Document.\nfunction getActiveRange() {\n    var ret;\n    if (globalRange) {\n        ret = globalRange;\n    } else if (getSelection().rangeCount) {\n        ret = getSelection().getRangeAt(0);\n    } else {\n        return null;\n    }\n    if ([Node.TEXT_NODE, Node.ELEMENT_NODE].indexOf(ret.startContainer.nodeType) == -1\n    || [Node.TEXT_NODE, Node.ELEMENT_NODE].indexOf(ret.endContainer.nodeType) == -1\n    || !ret.startContainer.ownerDocument\n    || !ret.endContainer.ownerDocument\n    || !isDescendant(ret.startContainer, ret.startContainer.ownerDocument)\n    || !isDescendant(ret.endContainer, ret.endContainer.ownerDocument)) {\n        throw \"Invalid active range; test bug?\";\n    }\n    return ret;\n}\n\n// \"For some commands, each HTMLDocument must have a boolean state override\n// and/or a string value override. These do not change the command's state or\n// value, but change the way some algorithms behave, as specified in those\n// algorithms' definitions. Initially, both must be unset for every command.\n// Whenever the number of ranges in the Selection changes to something\n// different, and whenever a boundary point of the range at a given index in\n// the Selection changes to something different, the state override and value\n// override must be unset for every command.\"\n//\n// We implement this crudely by using setters and getters.  To verify that the\n// selection hasn't changed, we copy the active range and just check the\n// endpoints match.  This isn't really correct, but it's good enough for us.\n// Unset state/value overrides are undefined.  We put everything in a function\n// so no one can access anything except via the provided functions, since\n// otherwise callers might mistakenly use outdated overrides (if the selection\n// has changed).\nvar getStateOverride, setStateOverride, unsetStateOverride,\n    getValueOverride, setValueOverride, unsetValueOverride;\n(function() {\n    var stateOverrides = {};\n    var valueOverrides = {};\n    var storedRange = null;\n\n    function resetOverrides() {\n        if (!storedRange\n        || storedRange.startContainer != getActiveRange().startContainer\n        || storedRange.endContainer != getActiveRange().endContainer\n        || storedRange.startOffset != getActiveRange().startOffset\n        || storedRange.endOffset != getActiveRange().endOffset) {\n            stateOverrides = {};\n            valueOverrides = {};\n            storedRange = getActiveRange().cloneRange();\n        }\n    }\n\n    getStateOverride = function(command) {\n        resetOverrides();\n        return stateOverrides[command];\n    };\n\n    setStateOverride = function(command, newState) {\n        resetOverrides();\n        stateOverrides[command] = newState;\n    };\n\n    unsetStateOverride = function(command) {\n        resetOverrides();\n        delete stateOverrides[command];\n    }\n\n    getValueOverride = function(command) {\n        resetOverrides();\n        return valueOverrides[command];\n    }\n\n    // \"The value override for the backColor command must be the same as the\n    // value override for the hiliteColor command, such that setting one sets\n    // the other to the same thing and unsetting one unsets the other.\"\n    setValueOverride = function(command, newValue) {\n        resetOverrides();\n        valueOverrides[command] = newValue;\n        if (command == \"backcolor\") {\n            valueOverrides.hilitecolor = newValue;\n        } else if (command == \"hilitecolor\") {\n            valueOverrides.backcolor = newValue;\n        }\n    }\n\n    unsetValueOverride = function(command) {\n        resetOverrides();\n        delete valueOverrides[command];\n        if (command == \"backcolor\") {\n            delete valueOverrides.hilitecolor;\n        } else if (command == \"hilitecolor\") {\n            delete valueOverrides.backcolor;\n        }\n    }\n})();\n\n//@}\n\n/////////////////////////////\n///// Common algorithms /////\n/////////////////////////////\n\n///// Assorted common algorithms /////\n//@{\n\n// Magic array of extra ranges whose endpoints we want to preserve.\nvar extraRanges = [];\n\nfunction movePreservingRanges(node, newParent, newIndex) {\n    // For convenience, I allow newIndex to be -1 to mean \"insert at the end\".\n    if (newIndex == -1) {\n        newIndex = newParent.childNodes.length;\n    }\n\n    // \"When the user agent is to move a Node to a new location, preserving\n    // ranges, it must remove the Node from its original parent (if any), then\n    // insert it in the new location. In doing so, however, it must ignore the\n    // regular range mutation rules, and instead follow these rules:\"\n\n    // \"Let node be the moved Node, old parent and old index be the old parent\n    // (which may be null) and index, and new parent and new index be the new\n    // parent and index.\"\n    var oldParent = node.parentNode;\n    var oldIndex = getNodeIndex(node);\n\n    // We preserve the global range object, the ranges in the selection, and\n    // any range that's in the extraRanges array.  Any other ranges won't get\n    // updated, because we have no references to them.\n    var ranges = [globalRange].concat(extraRanges);\n    for (var i = 0; i < getSelection().rangeCount; i++) {\n        ranges.push(getSelection().getRangeAt(i));\n    }\n    var boundaryPoints = [];\n    ranges.forEach(function(range) {\n        boundaryPoints.push([range.startContainer, range.startOffset]);\n        boundaryPoints.push([range.endContainer, range.endOffset]);\n    });\n\n    boundaryPoints.forEach(function(boundaryPoint) {\n        // \"If a boundary point's node is the same as or a descendant of node,\n        // leave it unchanged, so it moves to the new location.\"\n        //\n        // No modifications necessary.\n\n        // \"If a boundary point's node is new parent and its offset is greater\n        // than new index, add one to its offset.\"\n        if (boundaryPoint[0] == newParent\n        && boundaryPoint[1] > newIndex) {\n            boundaryPoint[1]++;\n        }\n\n        // \"If a boundary point's node is old parent and its offset is old index or\n        // old index + 1, set its node to new parent and add new index â old index\n        // to its offset.\"\n        if (boundaryPoint[0] == oldParent\n        && (boundaryPoint[1] == oldIndex\n        || boundaryPoint[1] == oldIndex + 1)) {\n            boundaryPoint[0] = newParent;\n            boundaryPoint[1] += newIndex - oldIndex;\n        }\n\n        // \"If a boundary point's node is old parent and its offset is greater than\n        // old index + 1, subtract one from its offset.\"\n        if (boundaryPoint[0] == oldParent\n        && boundaryPoint[1] > oldIndex + 1) {\n            boundaryPoint[1]--;\n        }\n    });\n\n    // Now actually move it and preserve the ranges.\n    if (newParent.childNodes.length == newIndex) {\n        newParent.appendChild(node);\n    } else {\n        newParent.insertBefore(node, newParent.childNodes[newIndex]);\n    }\n\n    globalRange.setStart(boundaryPoints[0][0], boundaryPoints[0][1]);\n    globalRange.setEnd(boundaryPoints[1][0], boundaryPoints[1][1]);\n\n    for (var i = 0; i < extraRanges.length; i++) {\n        extraRanges[i].setStart(boundaryPoints[2*i + 2][0], boundaryPoints[2*i + 2][1]);\n        extraRanges[i].setEnd(boundaryPoints[2*i + 3][0], boundaryPoints[2*i + 3][1]);\n    }\n\n    getSelection().removeAllRanges();\n    for (var i = 1 + extraRanges.length; i < ranges.length; i++) {\n        var newRange = document.createRange();\n        newRange.setStart(boundaryPoints[2*i][0], boundaryPoints[2*i][1]);\n        newRange.setEnd(boundaryPoints[2*i + 1][0], boundaryPoints[2*i + 1][1]);\n        getSelection().addRange(newRange);\n    }\n}\n\nfunction setTagName(element, newName) {\n    // \"If element is an HTML element with local name equal to new name, return\n    // element.\"\n    if (isHtmlElement(element, newName.toUpperCase())) {\n        return element;\n    }\n\n    // \"If element's parent is null, return element.\"\n    if (!element.parentNode) {\n        return element;\n    }\n\n    // \"Let replacement element be the result of calling createElement(new\n    // name) on the ownerDocument of element.\"\n    var replacementElement = element.ownerDocument.createElement(newName);\n\n    // \"Insert replacement element into element's parent immediately before\n    // element.\"\n    element.parentNode.insertBefore(replacementElement, element);\n\n    // \"Copy all attributes of element to replacement element, in order.\"\n    for (var i = 0; i < element.attributes.length; i++) {\n        replacementElement.setAttributeNS(element.attributes[i].namespaceURI, element.attributes[i].name, element.attributes[i].value);\n    }\n\n    // \"While element has children, append the first child of element as the\n    // last child of replacement element, preserving ranges.\"\n    while (element.childNodes.length) {\n        movePreservingRanges(element.firstChild, replacementElement, replacementElement.childNodes.length);\n    }\n\n    // \"Remove element from its parent.\"\n    element.parentNode.removeChild(element);\n\n    // \"Return replacement element.\"\n    return replacementElement;\n}\n\nfunction removeExtraneousLineBreaksBefore(node) {\n    // \"Let ref be the previousSibling of node.\"\n    var ref = node.previousSibling;\n\n    // \"If ref is null, abort these steps.\"\n    if (!ref) {\n        return;\n    }\n\n    // \"While ref has children, set ref to its lastChild.\"\n    while (ref.hasChildNodes()) {\n        ref = ref.lastChild;\n    }\n\n    // \"While ref is invisible but not an extraneous line break, and ref does\n    // not equal node's parent, set ref to the node before it in tree order.\"\n    while (isInvisible(ref)\n    && !isExtraneousLineBreak(ref)\n    && ref != node.parentNode) {\n        ref = previousNode(ref);\n    }\n\n    // \"If ref is an editable extraneous line break, remove it from its\n    // parent.\"\n    if (isEditable(ref)\n    && isExtraneousLineBreak(ref)) {\n        ref.parentNode.removeChild(ref);\n    }\n}\n\nfunction removeExtraneousLineBreaksAtTheEndOf(node) {\n    // \"Let ref be node.\"\n    var ref = node;\n\n    // \"While ref has children, set ref to its lastChild.\"\n    while (ref.hasChildNodes()) {\n        ref = ref.lastChild;\n    }\n\n    // \"While ref is invisible but not an extraneous line break, and ref does\n    // not equal node, set ref to the node before it in tree order.\"\n    while (isInvisible(ref)\n    && !isExtraneousLineBreak(ref)\n    && ref != node) {\n        ref = previousNode(ref);\n    }\n\n    // \"If ref is an editable extraneous line break:\"\n    if (isEditable(ref)\n    && isExtraneousLineBreak(ref)) {\n        // \"While ref's parent is editable and invisible, set ref to its\n        // parent.\"\n        while (isEditable(ref.parentNode)\n        && isInvisible(ref.parentNode)) {\n            ref = ref.parentNode;\n        }\n\n        // \"Remove ref from its parent.\"\n        ref.parentNode.removeChild(ref);\n    }\n}\n\n// \"To remove extraneous line breaks from a node, first remove extraneous line\n// breaks before it, then remove extraneous line breaks at the end of it.\"\nfunction removeExtraneousLineBreaksFrom(node) {\n    removeExtraneousLineBreaksBefore(node);\n    removeExtraneousLineBreaksAtTheEndOf(node);\n}\n\n//@}\n///// Wrapping a list of nodes /////\n//@{\n\nfunction wrap(nodeList, siblingCriteria, newParentInstructions) {\n    // \"If not provided, sibling criteria returns false and new parent\n    // instructions returns null.\"\n    if (typeof siblingCriteria == \"undefined\") {\n        siblingCriteria = function() { return false };\n    }\n    if (typeof newParentInstructions == \"undefined\") {\n        newParentInstructions = function() { return null };\n    }\n\n    // \"If every member of node list is invisible, and none is a br, return\n    // null and abort these steps.\"\n    if (nodeList.every(isInvisible)\n    && !nodeList.some(function(node) { return isHtmlElement(node, \"br\") })) {\n        return null;\n    }\n\n    // \"If node list's first member's parent is null, return null and abort\n    // these steps.\"\n    if (!nodeList[0].parentNode) {\n        return null;\n    }\n\n    // \"If node list's last member is an inline node that's not a br, and node\n    // list's last member's nextSibling is a br, append that br to node list.\"\n    if (isInlineNode(nodeList[nodeList.length - 1])\n    && !isHtmlElement(nodeList[nodeList.length - 1], \"br\")\n    && isHtmlElement(nodeList[nodeList.length - 1].nextSibling, \"br\")) {\n        nodeList.push(nodeList[nodeList.length - 1].nextSibling);\n    }\n\n    // \"While node list's first member's previousSibling is invisible, prepend\n    // it to node list.\"\n    while (isInvisible(nodeList[0].previousSibling)) {\n        nodeList.unshift(nodeList[0].previousSibling);\n    }\n\n    // \"While node list's last member's nextSibling is invisible, append it to\n    // node list.\"\n    while (isInvisible(nodeList[nodeList.length - 1].nextSibling)) {\n        nodeList.push(nodeList[nodeList.length - 1].nextSibling);\n    }\n\n    // \"If the previousSibling of the first member of node list is editable and\n    // running sibling criteria on it returns true, let new parent be the\n    // previousSibling of the first member of node list.\"\n    var newParent;\n    if (isEditable(nodeList[0].previousSibling)\n    && siblingCriteria(nodeList[0].previousSibling)) {\n        newParent = nodeList[0].previousSibling;\n\n    // \"Otherwise, if the nextSibling of the last member of node list is\n    // editable and running sibling criteria on it returns true, let new parent\n    // be the nextSibling of the last member of node list.\"\n    } else if (isEditable(nodeList[nodeList.length - 1].nextSibling)\n    && siblingCriteria(nodeList[nodeList.length - 1].nextSibling)) {\n        newParent = nodeList[nodeList.length - 1].nextSibling;\n\n    // \"Otherwise, run new parent instructions, and let new parent be the\n    // result.\"\n    } else {\n        newParent = newParentInstructions();\n    }\n\n    // \"If new parent is null, abort these steps and return null.\"\n    if (!newParent) {\n        return null;\n    }\n\n    // \"If new parent's parent is null:\"\n    if (!newParent.parentNode) {\n        // \"Insert new parent into the parent of the first member of node list\n        // immediately before the first member of node list.\"\n        nodeList[0].parentNode.insertBefore(newParent, nodeList[0]);\n\n        // \"If any range has a boundary point with node equal to the parent of\n        // new parent and offset equal to the index of new parent, add one to\n        // that boundary point's offset.\"\n        //\n        // Only try to fix the global range.\n        if (globalRange.startContainer == newParent.parentNode\n        && globalRange.startOffset == getNodeIndex(newParent)) {\n            globalRange.setStart(globalRange.startContainer, globalRange.startOffset + 1);\n        }\n        if (globalRange.endContainer == newParent.parentNode\n        && globalRange.endOffset == getNodeIndex(newParent)) {\n            globalRange.setEnd(globalRange.endContainer, globalRange.endOffset + 1);\n        }\n    }\n\n    // \"Let original parent be the parent of the first member of node list.\"\n    var originalParent = nodeList[0].parentNode;\n\n    // \"If new parent is before the first member of node list in tree order:\"\n    if (isBefore(newParent, nodeList[0])) {\n        // \"If new parent is not an inline node, but the last visible child of\n        // new parent and the first visible member of node list are both inline\n        // nodes, and the last child of new parent is not a br, call\n        // createElement(\"br\") on the ownerDocument of new parent and append\n        // the result as the last child of new parent.\"\n        if (!isInlineNode(newParent)\n        && isInlineNode([].filter.call(newParent.childNodes, isVisible).slice(-1)[0])\n        && isInlineNode(nodeList.filter(isVisible)[0])\n        && !isHtmlElement(newParent.lastChild, \"BR\")) {\n            newParent.appendChild(newParent.ownerDocument.createElement(\"br\"));\n        }\n\n        // \"For each node in node list, append node as the last child of new\n        // parent, preserving ranges.\"\n        for (var i = 0; i < nodeList.length; i++) {\n            movePreservingRanges(nodeList[i], newParent, -1);\n        }\n\n    // \"Otherwise:\"\n    } else {\n        // \"If new parent is not an inline node, but the first visible child of\n        // new parent and the last visible member of node list are both inline\n        // nodes, and the last member of node list is not a br, call\n        // createElement(\"br\") on the ownerDocument of new parent and insert\n        // the result as the first child of new parent.\"\n        if (!isInlineNode(newParent)\n        && isInlineNode([].filter.call(newParent.childNodes, isVisible)[0])\n        && isInlineNode(nodeList.filter(isVisible).slice(-1)[0])\n        && !isHtmlElement(nodeList[nodeList.length - 1], \"BR\")) {\n            newParent.insertBefore(newParent.ownerDocument.createElement(\"br\"), newParent.firstChild);\n        }\n\n        // \"For each node in node list, in reverse order, insert node as the\n        // first child of new parent, preserving ranges.\"\n        for (var i = nodeList.length - 1; i >= 0; i--) {\n            movePreservingRanges(nodeList[i], newParent, 0);\n        }\n    }\n\n    // \"If original parent is editable and has no children, remove it from its\n    // parent.\"\n    if (isEditable(originalParent) && !originalParent.hasChildNodes()) {\n        originalParent.parentNode.removeChild(originalParent);\n    }\n\n    // \"If new parent's nextSibling is editable and running sibling criteria on\n    // it returns true:\"\n    if (isEditable(newParent.nextSibling)\n    && siblingCriteria(newParent.nextSibling)) {\n        // \"If new parent is not an inline node, but new parent's last child\n        // and new parent's nextSibling's first child are both inline nodes,\n        // and new parent's last child is not a br, call createElement(\"br\") on\n        // the ownerDocument of new parent and append the result as the last\n        // child of new parent.\"\n        if (!isInlineNode(newParent)\n        && isInlineNode(newParent.lastChild)\n        && isInlineNode(newParent.nextSibling.firstChild)\n        && !isHtmlElement(newParent.lastChild, \"BR\")) {\n            newParent.appendChild(newParent.ownerDocument.createElement(\"br\"));\n        }\n\n        // \"While new parent's nextSibling has children, append its first child\n        // as the last child of new parent, preserving ranges.\"\n        while (newParent.nextSibling.hasChildNodes()) {\n            movePreservingRanges(newParent.nextSibling.firstChild, newParent, -1);\n        }\n\n        // \"Remove new parent's nextSibling from its parent.\"\n        newParent.parentNode.removeChild(newParent.nextSibling);\n    }\n\n    // \"Remove extraneous line breaks from new parent.\"\n    removeExtraneousLineBreaksFrom(newParent);\n\n    // \"Return new parent.\"\n    return newParent;\n}\n\n\n//@}\n///// Allowed children /////\n//@{\n\n// \"A name of an element with inline contents is \"a\", \"abbr\", \"b\", \"bdi\",\n// \"bdo\", \"cite\", \"code\", \"dfn\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"i\",\n// \"kbd\", \"mark\", \"p\", \"pre\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"small\",\n// \"span\", \"strong\", \"sub\", \"sup\", \"u\", \"var\", \"acronym\", \"listing\", \"strike\",\n// \"xmp\", \"big\", \"blink\", \"font\", \"marquee\", \"nobr\", or \"tt\".\"\nvar namesOfElementsWithInlineContents = [\"a\", \"abbr\", \"b\", \"bdi\", \"bdo\",\n    \"cite\", \"code\", \"dfn\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"i\",\n    \"kbd\", \"mark\", \"p\", \"pre\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"small\",\n    \"span\", \"strong\", \"sub\", \"sup\", \"u\", \"var\", \"acronym\", \"listing\", \"strike\",\n    \"xmp\", \"big\", \"blink\", \"font\", \"marquee\", \"nobr\", \"tt\"];\n\n// \"An element with inline contents is an HTML element whose local name is a\n// name of an element with inline contents.\"\nfunction isElementWithInlineContents(node) {\n    return isHtmlElement(node, namesOfElementsWithInlineContents);\n}\n\nfunction isAllowedChild(child, parent_) {\n    // \"If parent is \"colgroup\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", or\n    // an HTML element with local name equal to one of those, and child is a\n    // Text node whose data does not consist solely of space characters, return\n    // false.\"\n    if (([\"colgroup\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"].indexOf(parent_) != -1\n    || isHtmlElement(parent_, [\"colgroup\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"]))\n    && typeof child == \"object\"\n    && child.nodeType == Node.TEXT_NODE\n    && !/^[ \\t\\n\\f\\r]*$/.test(child.data)) {\n        return false;\n    }\n\n    // \"If parent is \"script\", \"style\", \"plaintext\", or \"xmp\", or an HTML\n    // element with local name equal to one of those, and child is not a Text\n    // node, return false.\"\n    if (([\"script\", \"style\", \"plaintext\", \"xmp\"].indexOf(parent_) != -1\n    || isHtmlElement(parent_, [\"script\", \"style\", \"plaintext\", \"xmp\"]))\n    && (typeof child != \"object\" || child.nodeType != Node.TEXT_NODE)) {\n        return false;\n    }\n\n    // \"If child is a Document, DocumentFragment, or DocumentType, return\n    // false.\"\n    if (typeof child == \"object\"\n    && (child.nodeType == Node.DOCUMENT_NODE\n    || child.nodeType == Node.DOCUMENT_FRAGMENT_NODE\n    || child.nodeType == Node.DOCUMENT_TYPE_NODE)) {\n        return false;\n    }\n\n    // \"If child is an HTML element, set child to the local name of child.\"\n    if (isHtmlElement(child)) {\n        child = child.tagName.toLowerCase();\n    }\n\n    // \"If child is not a string, return true.\"\n    if (typeof child != \"string\") {\n        return true;\n    }\n\n    // \"If parent is an HTML element:\"\n    if (isHtmlElement(parent_)) {\n        // \"If child is \"a\", and parent or some ancestor of parent is an a,\n        // return false.\"\n        //\n        // \"If child is a prohibited paragraph child name and parent or some\n        // ancestor of parent is an element with inline contents, return\n        // false.\"\n        //\n        // \"If child is \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", or \"h6\", and parent or\n        // some ancestor of parent is an HTML element with local name \"h1\",\n        // \"h2\", \"h3\", \"h4\", \"h5\", or \"h6\", return false.\"\n        var ancestor = parent_;\n        while (ancestor) {\n            if (child == \"a\" && isHtmlElement(ancestor, \"a\")) {\n                return false;\n            }\n            if (prohibitedParagraphChildNames.indexOf(child) != -1\n            && isElementWithInlineContents(ancestor)) {\n                return false;\n            }\n            if (/^h[1-6]$/.test(child)\n            && isHtmlElement(ancestor)\n            && /^H[1-6]$/.test(ancestor.tagName)) {\n                return false;\n            }\n            ancestor = ancestor.parentNode;\n        }\n\n        // \"Let parent be the local name of parent.\"\n        parent_ = parent_.tagName.toLowerCase();\n    }\n\n    // \"If parent is an Element or DocumentFragment, return true.\"\n    if (typeof parent_ == \"object\"\n    && (parent_.nodeType == Node.ELEMENT_NODE\n    || parent_.nodeType == Node.DOCUMENT_FRAGMENT_NODE)) {\n        return true;\n    }\n\n    // \"If parent is not a string, return false.\"\n    if (typeof parent_ != \"string\") {\n        return false;\n    }\n\n    // \"If parent is on the left-hand side of an entry on the following list,\n    // then return true if child is listed on the right-hand side of that\n    // entry, and false otherwise.\"\n    switch (parent_) {\n        case \"colgroup\":\n            return child == \"col\";\n        case \"table\":\n            return [\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"].indexOf(child) != -1;\n        case \"tbody\":\n        case \"thead\":\n        case \"tfoot\":\n            return [\"td\", \"th\", \"tr\"].indexOf(child) != -1;\n        case \"tr\":\n            return [\"td\", \"th\"].indexOf(child) != -1;\n        case \"dl\":\n            return [\"dt\", \"dd\"].indexOf(child) != -1;\n        case \"dir\":\n        case \"ol\":\n        case \"ul\":\n            return [\"dir\", \"li\", \"ol\", \"ul\"].indexOf(child) != -1;\n        case \"hgroup\":\n            return /^h[1-6]$/.test(child);\n    }\n\n    // \"If child is \"body\", \"caption\", \"col\", \"colgroup\", \"frame\", \"frameset\",\n    // \"head\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", or \"tr\", return\n    // false.\"\n    if ([\"body\", \"caption\", \"col\", \"colgroup\", \"frame\", \"frameset\", \"head\",\n    \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"].indexOf(child) != -1) {\n        return false;\n    }\n\n    // \"If child is \"dd\" or \"dt\" and parent is not \"dl\", return false.\"\n    if ([\"dd\", \"dt\"].indexOf(child) != -1\n    && parent_ != \"dl\") {\n        return false;\n    }\n\n    // \"If child is \"li\" and parent is not \"ol\" or \"ul\", return false.\"\n    if (child == \"li\"\n    && parent_ != \"ol\"\n    && parent_ != \"ul\") {\n        return false;\n    }\n\n    // \"If parent is on the left-hand side of an entry on the following list\n    // and child is listed on the right-hand side of that entry, return false.\"\n    var table = [\n        [[\"a\"], [\"a\"]],\n        [[\"dd\", \"dt\"], [\"dd\", \"dt\"]],\n        [[\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"], [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]],\n        [[\"li\"], [\"li\"]],\n        [[\"nobr\"], [\"nobr\"]],\n        [namesOfElementsWithInlineContents, prohibitedParagraphChildNames],\n        [[\"td\", \"th\"], [\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"]],\n    ];\n    for (var i = 0; i < table.length; i++) {\n        if (table[i][0].indexOf(parent_) != -1\n        && table[i][1].indexOf(child) != -1) {\n            return false;\n        }\n    }\n\n    // \"Return true.\"\n    return true;\n}\n\n\n//@}\n\n//////////////////////////////////////\n///// Inline formatting commands /////\n//////////////////////////////////////\n\n///// Inline formatting command definitions /////\n//@{\n\n// \"A node node is effectively contained in a range range if range is not\n// collapsed, and at least one of the following holds:\"\nfunction isEffectivelyContained(node, range) {\n    if (range.collapsed) {\n        return false;\n    }\n\n    // \"node is contained in range.\"\n    if (isContained(node, range)) {\n        return true;\n    }\n\n    // \"node is range's start node, it is a Text node, and its length is\n    // different from range's start offset.\"\n    if (node == range.startContainer\n    && node.nodeType == Node.TEXT_NODE\n    && getNodeLength(node) != range.startOffset) {\n        return true;\n    }\n\n    // \"node is range's end node, it is a Text node, and range's end offset is\n    // not 0.\"\n    if (node == range.endContainer\n    && node.nodeType == Node.TEXT_NODE\n    && range.endOffset != 0) {\n        return true;\n    }\n\n    // \"node has at least one child; and all its children are effectively\n    // contained in range; and either range's start node is not a descendant of\n    // node or is not a Text node or range's start offset is zero; and either\n    // range's end node is not a descendant of node or is not a Text node or\n    // range's end offset is its end node's length.\"\n    if (node.hasChildNodes()\n    && [].every.call(node.childNodes, function(child) { return isEffectivelyContained(child, range) })\n    && (!isDescendant(range.startContainer, node)\n    || range.startContainer.nodeType != Node.TEXT_NODE\n    || range.startOffset == 0)\n    && (!isDescendant(range.endContainer, node)\n    || range.endContainer.nodeType != Node.TEXT_NODE\n    || range.endOffset == getNodeLength(range.endContainer))) {\n        return true;\n    }\n\n    return false;\n}\n\n// Like get(All)ContainedNodes(), but for effectively contained nodes.\nfunction getEffectivelyContainedNodes(range, condition) {\n    if (typeof condition == \"undefined\") {\n        condition = function() { return true };\n    }\n    var node = range.startContainer;\n    while (isEffectivelyContained(node.parentNode, range)) {\n        node = node.parentNode;\n    }\n\n    var stop = nextNodeDescendants(range.endContainer);\n\n    var nodeList = [];\n    while (isBefore(node, stop)) {\n        if (isEffectivelyContained(node, range)\n        && condition(node)) {\n            nodeList.push(node);\n            node = nextNodeDescendants(node);\n            continue;\n        }\n        node = nextNode(node);\n    }\n    return nodeList;\n}\n\nfunction getAllEffectivelyContainedNodes(range, condition) {\n    if (typeof condition == \"undefined\") {\n        condition = function() { return true };\n    }\n    var node = range.startContainer;\n    while (isEffectivelyContained(node.parentNode, range)) {\n        node = node.parentNode;\n    }\n\n    var stop = nextNodeDescendants(range.endContainer);\n\n    var nodeList = [];\n    while (isBefore(node, stop)) {\n        if (isEffectivelyContained(node, range)\n        && condition(node)) {\n            nodeList.push(node);\n        }\n        node = nextNode(node);\n    }\n    return nodeList;\n}\n\n// \"A modifiable element is a b, em, i, s, span, strong, sub, sup, or u element\n// with no attributes except possibly style; or a font element with no\n// attributes except possibly style, color, face, and/or size; or an a element\n// with no attributes except possibly style and/or href.\"\nfunction isModifiableElement(node) {\n    if (!isHtmlElement(node)) {\n        return false;\n    }\n\n    if ([\"B\", \"EM\", \"I\", \"S\", \"SPAN\", \"STRIKE\", \"STRONG\", \"SUB\", \"SUP\", \"U\"].indexOf(node.tagName) != -1) {\n        if (node.attributes.length == 0) {\n            return true;\n        }\n\n        if (node.attributes.length == 1\n        && node.hasAttribute(\"style\")) {\n            return true;\n        }\n    }\n\n    if (node.tagName == \"FONT\" || node.tagName == \"A\") {\n        var numAttrs = node.attributes.length;\n\n        if (node.hasAttribute(\"style\")) {\n            numAttrs--;\n        }\n\n        if (node.tagName == \"FONT\") {\n            if (node.hasAttribute(\"color\")) {\n                numAttrs--;\n            }\n\n            if (node.hasAttribute(\"face\")) {\n                numAttrs--;\n            }\n\n            if (node.hasAttribute(\"size\")) {\n                numAttrs--;\n            }\n        }\n\n        if (node.tagName == \"A\"\n        && node.hasAttribute(\"href\")) {\n            numAttrs--;\n        }\n\n        if (numAttrs == 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isSimpleModifiableElement(node) {\n    // \"A simple modifiable element is an HTML element for which at least one\n    // of the following holds:\"\n    if (!isHtmlElement(node)) {\n        return false;\n    }\n\n    // Only these elements can possibly be a simple modifiable element.\n    if ([\"A\", \"B\", \"EM\", \"FONT\", \"I\", \"S\", \"SPAN\", \"STRIKE\", \"STRONG\", \"SUB\", \"SUP\", \"U\"].indexOf(node.tagName) == -1) {\n        return false;\n    }\n\n    // \"It is an a, b, em, font, i, s, span, strike, strong, sub, sup, or u\n    // element with no attributes.\"\n    if (node.attributes.length == 0) {\n        return true;\n    }\n\n    // If it's got more than one attribute, everything after this fails.\n    if (node.attributes.length > 1) {\n        return false;\n    }\n\n    // \"It is an a, b, em, font, i, s, span, strike, strong, sub, sup, or u\n    // element with exactly one attribute, which is style, which sets no CSS\n    // properties (including invalid or unrecognized properties).\"\n    //\n    // Not gonna try for invalid or unrecognized.\n    if (node.hasAttribute(\"style\")\n    && node.style.length == 0) {\n        return true;\n    }\n\n    // \"It is an a element with exactly one attribute, which is href.\"\n    if (node.tagName == \"A\"\n    && node.hasAttribute(\"href\")) {\n        return true;\n    }\n\n    // \"It is a font element with exactly one attribute, which is either color,\n    // face, or size.\"\n    if (node.tagName == \"FONT\"\n    && (node.hasAttribute(\"color\")\n    || node.hasAttribute(\"face\")\n    || node.hasAttribute(\"size\")\n    )) {\n        return true;\n    }\n\n    // \"It is a b or strong element with exactly one attribute, which is style,\n    // and the style attribute sets exactly one CSS property (including invalid\n    // or unrecognized properties), which is \"font-weight\".\"\n    if ((node.tagName == \"B\" || node.tagName == \"STRONG\")\n    && node.hasAttribute(\"style\")\n    && node.style.length == 1\n    && node.style.fontWeight != \"\") {\n        return true;\n    }\n\n    // \"It is an i or em element with exactly one attribute, which is style,\n    // and the style attribute sets exactly one CSS property (including invalid\n    // or unrecognized properties), which is \"font-style\".\"\n    if ((node.tagName == \"I\" || node.tagName == \"EM\")\n    && node.hasAttribute(\"style\")\n    && node.style.length == 1\n    && node.style.fontStyle != \"\") {\n        return true;\n    }\n\n    // \"It is an a, font, or span element with exactly one attribute, which is\n    // style, and the style attribute sets exactly one CSS property (including\n    // invalid or unrecognized properties), and that property is not\n    // \"text-decoration\".\"\n    if ((node.tagName == \"A\" || node.tagName == \"FONT\" || node.tagName == \"SPAN\")\n    && node.hasAttribute(\"style\")\n    && node.style.length == 1\n    && node.style.textDecoration == \"\") {\n        return true;\n    }\n\n    // \"It is an a, font, s, span, strike, or u element with exactly one\n    // attribute, which is style, and the style attribute sets exactly one CSS\n    // property (including invalid or unrecognized properties), which is\n    // \"text-decoration\", which is set to \"line-through\" or \"underline\" or\n    // \"overline\" or \"none\".\"\n    //\n    // The weird extra node.style.length check is for Firefox, which as of\n    // 8.0a2 has annoying and weird behavior here.\n    if ([\"A\", \"FONT\", \"S\", \"SPAN\", \"STRIKE\", \"U\"].indexOf(node.tagName) != -1\n    && node.hasAttribute(\"style\")\n    && (node.style.length == 1\n        || (node.style.length == 4\n            && \"MozTextBlink\" in node.style\n            && \"MozTextDecorationColor\" in node.style\n            && \"MozTextDecorationLine\" in node.style\n            && \"MozTextDecorationStyle\" in node.style)\n        || (node.style.length == 4\n            && \"MozTextBlink\" in node.style\n            && \"textDecorationColor\" in node.style\n            && \"textDecorationLine\" in node.style\n            && \"textDecorationStyle\" in node.style)\n    )\n    && (node.style.textDecoration == \"line-through\"\n    || node.style.textDecoration == \"underline\"\n    || node.style.textDecoration == \"overline\"\n    || node.style.textDecoration == \"none\")) {\n        return true;\n    }\n\n    return false;\n}\n\n// \"A formattable node is an editable visible node that is either a Text node,\n// an img, or a br.\"\nfunction isFormattableNode(node) {\n    return isEditable(node)\n        && isVisible(node)\n        && (node.nodeType == Node.TEXT_NODE\n        || isHtmlElement(node, [\"img\", \"br\"]));\n}\n\n// \"Two quantities are equivalent values for a command if either both are null,\n// or both are strings and they're equal and the command does not define any\n// equivalent values, or both are strings and the command defines equivalent\n// values and they match the definition.\"\nfunction areEquivalentValues(command, val1, val2) {\n    if (val1 === null && val2 === null) {\n        return true;\n    }\n\n    if (typeof val1 == \"string\"\n    && typeof val2 == \"string\"\n    && val1 == val2\n    && !(\"equivalentValues\" in commands[command])) {\n        return true;\n    }\n\n    if (typeof val1 == \"string\"\n    && typeof val2 == \"string\"\n    && \"equivalentValues\" in commands[command]\n    && commands[command].equivalentValues(val1, val2)) {\n        return true;\n    }\n\n    return false;\n}\n\n// \"Two quantities are loosely equivalent values for a command if either they\n// are equivalent values for the command, or if the command is the fontSize\n// command; one of the quantities is one of \"x-small\", \"small\", \"medium\",\n// \"large\", \"x-large\", \"xx-large\", or \"xxx-large\"; and the other quantity is\n// the resolved value of \"font-size\" on a font element whose size attribute has\n// the corresponding value set (\"1\" through \"7\" respectively).\"\nfunction areLooselyEquivalentValues(command, val1, val2) {\n    if (areEquivalentValues(command, val1, val2)) {\n        return true;\n    }\n\n    if (command != \"fontsize\"\n    || typeof val1 != \"string\"\n    || typeof val2 != \"string\") {\n        return false;\n    }\n\n    // Static variables in JavaScript?\n    var callee = areLooselyEquivalentValues;\n    if (callee.sizeMap === undefined) {\n        callee.sizeMap = {};\n        var font = document.createElement(\"font\");\n        document.body.appendChild(font);\n        [\"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\",\n        \"xxx-large\"].forEach(function(keyword) {\n            font.size = cssSizeToLegacy(keyword);\n            callee.sizeMap[keyword] = getComputedStyle(font).fontSize;\n        });\n        document.body.removeChild(font);\n    }\n\n    return val1 === callee.sizeMap[val2]\n        || val2 === callee.sizeMap[val1];\n}\n\n//@}\n///// Assorted inline formatting command algorithms /////\n//@{\n\nfunction getEffectiveCommandValue(node, command) {\n    // \"If neither node nor its parent is an Element, return null.\"\n    if (node.nodeType != Node.ELEMENT_NODE\n    && (!node.parentNode || node.parentNode.nodeType != Node.ELEMENT_NODE)) {\n        return null;\n    }\n\n    // \"If node is not an Element, return the effective command value of its\n    // parent for command.\"\n    if (node.nodeType != Node.ELEMENT_NODE) {\n        return getEffectiveCommandValue(node.parentNode, command);\n    }\n\n    // \"If command is \"createLink\" or \"unlink\":\"\n    if (command == \"createlink\" || command == \"unlink\") {\n        // \"While node is not null, and is not an a element that has an href\n        // attribute, set node to its parent.\"\n        while (node\n        && (!isHtmlElement(node)\n        || node.tagName != \"A\"\n        || !node.hasAttribute(\"href\"))) {\n            node = node.parentNode;\n        }\n\n        // \"If node is null, return null.\"\n        if (!node) {\n            return null;\n        }\n\n        // \"Return the value of node's href attribute.\"\n        return node.getAttribute(\"href\");\n    }\n\n    // \"If command is \"backColor\" or \"hiliteColor\":\"\n    if (command == \"backcolor\"\n    || command == \"hilitecolor\") {\n        // \"While the resolved value of \"background-color\" on node is any\n        // fully transparent value, and node's parent is an Element, set\n        // node to its parent.\"\n        //\n        // Another lame hack to avoid flawed APIs.\n        while ((getComputedStyle(node).backgroundColor == \"rgba(0, 0, 0, 0)\"\n        || getComputedStyle(node).backgroundColor === \"\"\n        || getComputedStyle(node).backgroundColor == \"transparent\")\n        && node.parentNode\n        && node.parentNode.nodeType == Node.ELEMENT_NODE) {\n            node = node.parentNode;\n        }\n\n        // \"Return the resolved value of \"background-color\" for node.\"\n        return getComputedStyle(node).backgroundColor;\n    }\n\n    // \"If command is \"subscript\" or \"superscript\":\"\n    if (command == \"subscript\" || command == \"superscript\") {\n        // \"Let affected by subscript and affected by superscript be two\n        // boolean variables, both initially false.\"\n        var affectedBySubscript = false;\n        var affectedBySuperscript = false;\n\n        // \"While node is an inline node:\"\n        while (isInlineNode(node)) {\n            var verticalAlign = getComputedStyle(node).verticalAlign;\n\n            // \"If node is a sub, set affected by subscript to true.\"\n            if (isHtmlElement(node, \"sub\")) {\n                affectedBySubscript = true;\n            // \"Otherwise, if node is a sup, set affected by superscript to\n            // true.\"\n            } else if (isHtmlElement(node, \"sup\")) {\n                affectedBySuperscript = true;\n            }\n\n            // \"Set node to its parent.\"\n            node = node.parentNode;\n        }\n\n        // \"If affected by subscript and affected by superscript are both true,\n        // return the string \"mixed\".\"\n        if (affectedBySubscript && affectedBySuperscript) {\n            return \"mixed\";\n        }\n\n        // \"If affected by subscript is true, return \"subscript\".\"\n        if (affectedBySubscript) {\n            return \"subscript\";\n        }\n\n        // \"If affected by superscript is true, return \"superscript\".\"\n        if (affectedBySuperscript) {\n            return \"superscript\";\n        }\n\n        // \"Return null.\"\n        return null;\n    }\n\n    // \"If command is \"strikethrough\", and the \"text-decoration\" property of\n    // node or any of its ancestors has resolved value containing\n    // \"line-through\", return \"line-through\". Otherwise, return null.\"\n    if (command == \"strikethrough\") {\n        do {\n            if (getComputedStyle(node).textDecoration.indexOf(\"line-through\") != -1) {\n                return \"line-through\";\n            }\n            node = node.parentNode;\n        } while (node && node.nodeType == Node.ELEMENT_NODE);\n        return null;\n    }\n\n    // \"If command is \"underline\", and the \"text-decoration\" property of node\n    // or any of its ancestors has resolved value containing \"underline\",\n    // return \"underline\". Otherwise, return null.\"\n    if (command == \"underline\") {\n        do {\n            if (getComputedStyle(node).textDecoration.indexOf(\"underline\") != -1) {\n                return \"underline\";\n            }\n            node = node.parentNode;\n        } while (node && node.nodeType == Node.ELEMENT_NODE);\n        return null;\n    }\n\n    if (!(\"relevantCssProperty\" in commands[command])) {\n        throw \"Bug: no relevantCssProperty for \" + command + \" in getEffectiveCommandValue\";\n    }\n\n    // \"Return the resolved value for node of the relevant CSS property for\n    // command.\"\n    return getComputedStyle(node)[commands[command].relevantCssProperty];\n}\n\nfunction getSpecifiedCommandValue(element, command) {\n    // \"If command is \"backColor\" or \"hiliteColor\" and element's display\n    // property does not have resolved value \"inline\", return null.\"\n    if ((command == \"backcolor\" || command == \"hilitecolor\")\n    && getComputedStyle(element).display != \"inline\") {\n        return null;\n    }\n\n    // \"If command is \"createLink\" or \"unlink\":\"\n    if (command == \"createlink\" || command == \"unlink\") {\n        // \"If element is an a element and has an href attribute, return the\n        // value of that attribute.\"\n        if (isHtmlElement(element)\n        && element.tagName == \"A\"\n        && element.hasAttribute(\"href\")) {\n            return element.getAttribute(\"href\");\n        }\n\n        // \"Return null.\"\n        return null;\n    }\n\n    // \"If command is \"subscript\" or \"superscript\":\"\n    if (command == \"subscript\" || command == \"superscript\") {\n        // \"If element is a sup, return \"superscript\".\"\n        if (isHtmlElement(element, \"sup\")) {\n            return \"superscript\";\n        }\n\n        // \"If element is a sub, return \"subscript\".\"\n        if (isHtmlElement(element, \"sub\")) {\n            return \"subscript\";\n        }\n\n        // \"Return null.\"\n        return null;\n    }\n\n    // \"If command is \"strikethrough\", and element has a style attribute set,\n    // and that attribute sets \"text-decoration\":\"\n    if (command == \"strikethrough\"\n    && element.style.textDecoration != \"\") {\n        // \"If element's style attribute sets \"text-decoration\" to a value\n        // containing \"line-through\", return \"line-through\".\"\n        if (element.style.textDecoration.indexOf(\"line-through\") != -1) {\n            return \"line-through\";\n        }\n\n        // \"Return null.\"\n        return null;\n    }\n\n    // \"If command is \"strikethrough\" and element is a s or strike element,\n    // return \"line-through\".\"\n    if (command == \"strikethrough\"\n    && isHtmlElement(element, [\"S\", \"STRIKE\"])) {\n        return \"line-through\";\n    }\n\n    // \"If command is \"underline\", and element has a style attribute set, and\n    // that attribute sets \"text-decoration\":\"\n    if (command == \"underline\"\n    && element.style.textDecoration != \"\") {\n        // \"If element's style attribute sets \"text-decoration\" to a value\n        // containing \"underline\", return \"underline\".\"\n        if (element.style.textDecoration.indexOf(\"underline\") != -1) {\n            return \"underline\";\n        }\n\n        // \"Return null.\"\n        return null;\n    }\n\n    // \"If command is \"underline\" and element is a u element, return\n    // \"underline\".\"\n    if (command == \"underline\"\n    && isHtmlElement(element, \"U\")) {\n        return \"underline\";\n    }\n\n    // \"Let property be the relevant CSS property for command.\"\n    var property = commands[command].relevantCssProperty;\n\n    // \"If property is null, return null.\"\n    if (property === null) {\n        return null;\n    }\n\n    // \"If element has a style attribute set, and that attribute has the\n    // effect of setting property, return the value that it sets property to.\"\n    if (element.style[property] != \"\") {\n        return element.style[property];\n    }\n\n    // \"If element is a font element that has an attribute whose effect is\n    // to create a presentational hint for property, return the value that the\n    // hint sets property to.  (For a size of 7, this will be the non-CSS value\n    // \"xxx-large\".)\"\n    if (isHtmlNamespace(element.namespaceURI)\n    && element.tagName == \"FONT\") {\n        if (property == \"color\" && element.hasAttribute(\"color\")) {\n            return element.color;\n        }\n        if (property == \"fontFamily\" && element.hasAttribute(\"face\")) {\n            return element.face;\n        }\n        if (property == \"fontSize\" && element.hasAttribute(\"size\")) {\n            // This is not even close to correct in general.\n            var size = parseInt(element.size);\n            if (size < 1) {\n                size = 1;\n            }\n            if (size > 7) {\n                size = 7;\n            }\n            return {\n                1: \"x-small\",\n                2: \"small\",\n                3: \"medium\",\n                4: \"large\",\n                5: \"x-large\",\n                6: \"xx-large\",\n                7: \"xxx-large\"\n            }[size];\n        }\n    }\n\n    // \"If element is in the following list, and property is equal to the\n    // CSS property name listed for it, return the string listed for it.\"\n    //\n    // A list follows, whose meaning is copied here.\n    if (property == \"fontWeight\"\n    && (element.tagName == \"B\" || element.tagName == \"STRONG\")) {\n        return \"bold\";\n    }\n    if (property == \"fontStyle\"\n    && (element.tagName == \"I\" || element.tagName == \"EM\")) {\n        return \"italic\";\n    }\n\n    // \"Return null.\"\n    return null;\n}\n\nfunction reorderModifiableDescendants(node, command, newValue) {\n    // \"Let candidate equal node.\"\n    var candidate = node;\n\n    // \"While candidate is a modifiable element, and candidate has exactly one\n    // child, and that child is also a modifiable element, and candidate is not\n    // a simple modifiable element or candidate's specified command value for\n    // command is not equivalent to new value, set candidate to its child.\"\n    while (isModifiableElement(candidate)\n    && candidate.childNodes.length == 1\n    && isModifiableElement(candidate.firstChild)\n    && (!isSimpleModifiableElement(candidate)\n    || !areEquivalentValues(command, getSpecifiedCommandValue(candidate, command), newValue))) {\n        candidate = candidate.firstChild;\n    }\n\n    // \"If candidate is node, or is not a simple modifiable element, or its\n    // specified command value is not equivalent to new value, or its effective\n    // command value is not loosely equivalent to new value, abort these\n    // steps.\"\n    if (candidate == node\n    || !isSimpleModifiableElement(candidate)\n    || !areEquivalentValues(command, getSpecifiedCommandValue(candidate, command), newValue)\n    || !areLooselyEquivalentValues(command, getEffectiveCommandValue(candidate, command), newValue)) {\n        return;\n    }\n\n    // \"While candidate has children, insert the first child of candidate into\n    // candidate's parent immediately before candidate, preserving ranges.\"\n    while (candidate.hasChildNodes()) {\n        movePreservingRanges(candidate.firstChild, candidate.parentNode, getNodeIndex(candidate));\n    }\n\n    // \"Insert candidate into node's parent immediately after node.\"\n    node.parentNode.insertBefore(candidate, node.nextSibling);\n\n    // \"Append the node as the last child of candidate, preserving ranges.\"\n    movePreservingRanges(node, candidate, -1);\n}\n\nfunction recordValues(nodeList) {\n    // \"Let values be a list of (node, command, specified command value)\n    // triples, initially empty.\"\n    var values = [];\n\n    // \"For each node in node list, for each command in the list \"subscript\",\n    // \"bold\", \"fontName\", \"fontSize\", \"foreColor\", \"hiliteColor\", \"italic\",\n    // \"strikethrough\", and \"underline\" in that order:\"\n    nodeList.forEach(function(node) {\n        [\"subscript\", \"bold\", \"fontname\", \"fontsize\", \"forecolor\",\n        \"hilitecolor\", \"italic\", \"strikethrough\", \"underline\"].forEach(function(command) {\n            // \"Let ancestor equal node.\"\n            var ancestor = node;\n\n            // \"If ancestor is not an Element, set it to its parent.\"\n            if (ancestor.nodeType != Node.ELEMENT_NODE) {\n                ancestor = ancestor.parentNode;\n            }\n\n            // \"While ancestor is an Element and its specified command value\n            // for command is null, set it to its parent.\"\n            while (ancestor\n            && ancestor.nodeType == Node.ELEMENT_NODE\n            && getSpecifiedCommandValue(ancestor, command) === null) {\n                ancestor = ancestor.parentNode;\n            }\n\n            // \"If ancestor is an Element, add (node, command, ancestor's\n            // specified command value for command) to values. Otherwise add\n            // (node, command, null) to values.\"\n            if (ancestor && ancestor.nodeType == Node.ELEMENT_NODE) {\n                values.push([node, command, getSpecifiedCommandValue(ancestor, command)]);\n            } else {\n                values.push([node, command, null]);\n            }\n        });\n    });\n\n    // \"Return values.\"\n    return values;\n}\n\nfunction restoreValues(values) {\n    // \"For each (node, command, value) triple in values:\"\n    values.forEach(function(triple) {\n        var node = triple[0];\n        var command = triple[1];\n        var value = triple[2];\n\n        // \"Let ancestor equal node.\"\n        var ancestor = node;\n\n        // \"If ancestor is not an Element, set it to its parent.\"\n        if (!ancestor || ancestor.nodeType != Node.ELEMENT_NODE) {\n            ancestor = ancestor.parentNode;\n        }\n\n        // \"While ancestor is an Element and its specified command value for\n        // command is null, set it to its parent.\"\n        while (ancestor\n        && ancestor.nodeType == Node.ELEMENT_NODE\n        && getSpecifiedCommandValue(ancestor, command) === null) {\n            ancestor = ancestor.parentNode;\n        }\n\n        // \"If value is null and ancestor is an Element, push down values on\n        // node for command, with new value null.\"\n        if (value === null\n        && ancestor\n        && ancestor.nodeType == Node.ELEMENT_NODE) {\n            pushDownValues(node, command, null);\n\n        // \"Otherwise, if ancestor is an Element and its specified command\n        // value for command is not equivalent to value, or if ancestor is not\n        // an Element and value is not null, force the value of command to\n        // value on node.\"\n        } else if ((ancestor\n        && ancestor.nodeType == Node.ELEMENT_NODE\n        && !areEquivalentValues(command, getSpecifiedCommandValue(ancestor, command), value))\n        || ((!ancestor || ancestor.nodeType != Node.ELEMENT_NODE)\n        && value !== null)) {\n            forceValue(node, command, value);\n        }\n    });\n}\n\n\n//@}\n///// Clearing an element's value /////\n//@{\n\nfunction clearValue(element, command) {\n    // \"If element is not editable, return the empty list.\"\n    if (!isEditable(element)) {\n        return [];\n    }\n\n    // \"If element's specified command value for command is null, return the\n    // empty list.\"\n    if (getSpecifiedCommandValue(element, command) === null) {\n        return [];\n    }\n\n    // \"If element is a simple modifiable element:\"\n    if (isSimpleModifiableElement(element)) {\n        // \"Let children be the children of element.\"\n        var children = Array.prototype.slice.call(element.childNodes);\n\n        // \"For each child in children, insert child into element's parent\n        // immediately before element, preserving ranges.\"\n        for (var i = 0; i < children.length; i++) {\n            movePreservingRanges(children[i], element.parentNode, getNodeIndex(element));\n        }\n\n        // \"Remove element from its parent.\"\n        element.parentNode.removeChild(element);\n\n        // \"Return children.\"\n        return children;\n    }\n\n    // \"If command is \"strikethrough\", and element has a style attribute that\n    // sets \"text-decoration\" to some value containing \"line-through\", delete\n    // \"line-through\" from the value.\"\n    if (command == \"strikethrough\"\n    && element.style.textDecoration.indexOf(\"line-through\") != -1) {\n        if (element.style.textDecoration == \"line-through\") {\n            element.style.textDecoration = \"\";\n        } else {\n            element.style.textDecoration = element.style.textDecoration.replace(\"line-through\", \"\");\n        }\n        if (element.getAttribute(\"style\") == \"\") {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    // \"If command is \"underline\", and element has a style attribute that sets\n    // \"text-decoration\" to some value containing \"underline\", delete\n    // \"underline\" from the value.\"\n    if (command == \"underline\"\n    && element.style.textDecoration.indexOf(\"underline\") != -1) {\n        if (element.style.textDecoration == \"underline\") {\n            element.style.textDecoration = \"\";\n        } else {\n            element.style.textDecoration = element.style.textDecoration.replace(\"underline\", \"\");\n        }\n        if (element.getAttribute(\"style\") == \"\") {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    // \"If the relevant CSS property for command is not null, unset the CSS\n    // property property of element.\"\n    if (commands[command].relevantCssProperty !== null) {\n        element.style[commands[command].relevantCssProperty] = '';\n        if (element.getAttribute(\"style\") == \"\") {\n            element.removeAttribute(\"style\");\n        }\n    }\n\n    // \"If element is a font element:\"\n    if (isHtmlNamespace(element.namespaceURI) && element.tagName == \"FONT\") {\n        // \"If command is \"foreColor\", unset element's color attribute, if set.\"\n        if (command == \"forecolor\") {\n            element.removeAttribute(\"color\");\n        }\n\n        // \"If command is \"fontName\", unset element's face attribute, if set.\"\n        if (command == \"fontname\") {\n            element.removeAttribute(\"face\");\n        }\n\n        // \"If command is \"fontSize\", unset element's size attribute, if set.\"\n        if (command == \"fontsize\") {\n            element.removeAttribute(\"size\");\n        }\n    }\n\n    // \"If element is an a element and command is \"createLink\" or \"unlink\",\n    // unset the href property of element.\"\n    if (isHtmlElement(element, \"A\")\n    && (command == \"createlink\" || command == \"unlink\")) {\n        element.removeAttribute(\"href\");\n    }\n\n    // \"If element's specified command value for command is null, return the\n    // empty list.\"\n    if (getSpecifiedCommandValue(element, command) === null) {\n        return [];\n    }\n\n    // \"Set the tag name of element to \"span\", and return the one-node list\n    // consisting of the result.\"\n    return [setTagName(element, \"span\")];\n}\n\n\n//@}\n///// Pushing down values /////\n//@{\n\nfunction pushDownValues(node, command, newValue) {\n    // \"If node's parent is not an Element, abort this algorithm.\"\n    if (!node.parentNode\n    || node.parentNode.nodeType != Node.ELEMENT_NODE) {\n        return;\n    }\n\n    // \"If the effective command value of command is loosely equivalent to new\n    // value on node, abort this algorithm.\"\n    if (areLooselyEquivalentValues(command, getEffectiveCommandValue(node, command), newValue)) {\n        return;\n    }\n\n    // \"Let current ancestor be node's parent.\"\n    var currentAncestor = node.parentNode;\n\n    // \"Let ancestor list be a list of Nodes, initially empty.\"\n    var ancestorList = [];\n\n    // \"While current ancestor is an editable Element and the effective command\n    // value of command is not loosely equivalent to new value on it, append\n    // current ancestor to ancestor list, then set current ancestor to its\n    // parent.\"\n    while (isEditable(currentAncestor)\n    && currentAncestor.nodeType == Node.ELEMENT_NODE\n    && !areLooselyEquivalentValues(command, getEffectiveCommandValue(currentAncestor, command), newValue)) {\n        ancestorList.push(currentAncestor);\n        currentAncestor = currentAncestor.parentNode;\n    }\n\n    // \"If ancestor list is empty, abort this algorithm.\"\n    if (!ancestorList.length) {\n        return;\n    }\n\n    // \"Let propagated value be the specified command value of command on the\n    // last member of ancestor list.\"\n    var propagatedValue = getSpecifiedCommandValue(ancestorList[ancestorList.length - 1], command);\n\n    // \"If propagated value is null and is not equal to new value, abort this\n    // algorithm.\"\n    if (propagatedValue === null && propagatedValue != newValue) {\n        return;\n    }\n\n    // \"If the effective command value for the parent of the last member of\n    // ancestor list is not loosely equivalent to new value, and new value is\n    // not null, abort this algorithm.\"\n    if (newValue !== null\n    && !areLooselyEquivalentValues(command, getEffectiveCommandValue(ancestorList[ancestorList.length - 1].parentNode, command), newValue)) {\n        return;\n    }\n\n    // \"While ancestor list is not empty:\"\n    while (ancestorList.length) {\n        // \"Let current ancestor be the last member of ancestor list.\"\n        // \"Remove the last member from ancestor list.\"\n        var currentAncestor = ancestorList.pop();\n\n        // \"If the specified command value of current ancestor for command is\n        // not null, set propagated value to that value.\"\n        if (getSpecifiedCommandValue(currentAncestor, command) !== null) {\n            propagatedValue = getSpecifiedCommandValue(currentAncestor, command);\n        }\n\n        // \"Let children be the children of current ancestor.\"\n        var children = Array.prototype.slice.call(currentAncestor.childNodes);\n\n        // \"If the specified command value of current ancestor for command is\n        // not null, clear the value of current ancestor.\"\n        if (getSpecifiedCommandValue(currentAncestor, command) !== null) {\n            clearValue(currentAncestor, command);\n        }\n\n        // \"For every child in children:\"\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n\n            // \"If child is node, continue with the next child.\"\n            if (child == node) {\n                continue;\n            }\n\n            // \"If child is an Element whose specified command value for\n            // command is neither null nor equivalent to propagated value,\n            // continue with the next child.\"\n            if (child.nodeType == Node.ELEMENT_NODE\n            && getSpecifiedCommandValue(child, command) !== null\n            && !areEquivalentValues(command, propagatedValue, getSpecifiedCommandValue(child, command))) {\n                continue;\n            }\n\n            // \"If child is the last member of ancestor list, continue with the\n            // next child.\"\n            if (child == ancestorList[ancestorList.length - 1]) {\n                continue;\n            }\n\n            // \"Force the value of child, with command as in this algorithm\n            // and new value equal to propagated value.\"\n            forceValue(child, command, propagatedValue);\n        }\n    }\n}\n\n\n//@}\n///// Forcing the value of a node /////\n//@{\n\nfunction forceValue(node, command, newValue) {\n    // \"If node's parent is null, abort this algorithm.\"\n    if (!node.parentNode) {\n        return;\n    }\n\n    // \"If new value is null, abort this algorithm.\"\n    if (newValue === null) {\n        return;\n    }\n\n    // \"If node is an allowed child of \"span\":\"\n    if (isAllowedChild(node, \"span\")) {\n        // \"Reorder modifiable descendants of node's previousSibling.\"\n        reorderModifiableDescendants(node.previousSibling, command, newValue);\n\n        // \"Reorder modifiable descendants of node's nextSibling.\"\n        reorderModifiableDescendants(node.nextSibling, command, newValue);\n\n        // \"Wrap the one-node list consisting of node, with sibling criteria\n        // returning true for a simple modifiable element whose specified\n        // command value is equivalent to new value and whose effective command\n        // value is loosely equivalent to new value and false otherwise, and\n        // with new parent instructions returning null.\"\n        wrap([node],\n            function(node) {\n                return isSimpleModifiableElement(node)\n                    && areEquivalentValues(command, getSpecifiedCommandValue(node, command), newValue)\n                    && areLooselyEquivalentValues(command, getEffectiveCommandValue(node, command), newValue);\n            },\n            function() { return null }\n        );\n    }\n\n    // \"If node is invisible, abort this algorithm.\"\n    if (isInvisible(node)) {\n        return;\n    }\n\n    // \"If the effective command value of command is loosely equivalent to new\n    // value on node, abort this algorithm.\"\n    if (areLooselyEquivalentValues(command, getEffectiveCommandValue(node, command), newValue)) {\n        return;\n    }\n\n    // \"If node is not an allowed child of \"span\":\"\n    if (!isAllowedChild(node, \"span\")) {\n        // \"Let children be all children of node, omitting any that are\n        // Elements whose specified command value for command is neither null\n        // nor equivalent to new value.\"\n        var children = [];\n        for (var i = 0; i < node.childNodes.length; i++) {\n            if (node.childNodes[i].nodeType == Node.ELEMENT_NODE) {\n                var specifiedValue = getSpecifiedCommandValue(node.childNodes[i], command);\n\n                if (specifiedValue !== null\n                && !areEquivalentValues(command, newValue, specifiedValue)) {\n                    continue;\n                }\n            }\n            children.push(node.childNodes[i]);\n        }\n\n        // \"Force the value of each Node in children, with command and new\n        // value as in this invocation of the algorithm.\"\n        for (var i = 0; i < children.length; i++) {\n            forceValue(children[i], command, newValue);\n        }\n\n        // \"Abort this algorithm.\"\n        return;\n    }\n\n    // \"If the effective command value of command is loosely equivalent to new\n    // value on node, abort this algorithm.\"\n    if (areLooselyEquivalentValues(command, getEffectiveCommandValue(node, command), newValue)) {\n        return;\n    }\n\n    // \"Let new parent be null.\"\n    var newParent = null;\n\n    // \"If the CSS styling flag is false:\"\n    if (!cssStylingFlag) {\n        // \"If command is \"bold\" and new value is \"bold\", let new parent be the\n        // result of calling createElement(\"b\") on the ownerDocument of node.\"\n        if (command == \"bold\" && (newValue == \"bold\" || newValue == \"700\")) {\n            newParent = node.ownerDocument.createElement(\"b\");\n        }\n\n        // \"If command is \"italic\" and new value is \"italic\", let new parent be\n        // the result of calling createElement(\"i\") on the ownerDocument of\n        // node.\"\n        if (command == \"italic\" && newValue == \"italic\") {\n            newParent = node.ownerDocument.createElement(\"i\");\n        }\n\n        // \"If command is \"strikethrough\" and new value is \"line-through\", let\n        // new parent be the result of calling createElement(\"s\") on the\n        // ownerDocument of node.\"\n        if (command == \"strikethrough\" && newValue == \"line-through\") {\n            newParent = node.ownerDocument.createElement(\"s\");\n        }\n\n        // \"If command is \"underline\" and new value is \"underline\", let new\n        // parent be the result of calling createElement(\"u\") on the\n        // ownerDocument of node.\"\n        if (command == \"underline\" && newValue == \"underline\") {\n            newParent = node.ownerDocument.createElement(\"u\");\n        }\n\n        // \"If command is \"foreColor\", and new value is fully opaque with red,\n        // green, and blue components in the range 0 to 255:\"\n        if (command == \"forecolor\" && parseSimpleColor(newValue)) {\n            // \"Let new parent be the result of calling createElement(\"font\")\n            // on the ownerDocument of node.\"\n            newParent = node.ownerDocument.createElement(\"font\");\n\n            // \"Set the color attribute of new parent to the result of applying\n            // the rules for serializing simple color values to new value\n            // (interpreted as a simple color).\"\n            newParent.setAttribute(\"color\", parseSimpleColor(newValue));\n        }\n\n        // \"If command is \"fontName\", let new parent be the result of calling\n        // createElement(\"font\") on the ownerDocument of node, then set the\n        // face attribute of new parent to new value.\"\n        if (command == \"fontname\") {\n            newParent = node.ownerDocument.createElement(\"font\");\n            newParent.face = newValue;\n        }\n    }\n\n    // \"If command is \"createLink\" or \"unlink\":\"\n    if (command == \"createlink\" || command == \"unlink\") {\n        // \"Let new parent be the result of calling createElement(\"a\") on the\n        // ownerDocument of node.\"\n        newParent = node.ownerDocument.createElement(\"a\");\n\n        // \"Set the href attribute of new parent to new value.\"\n        newParent.setAttribute(\"href\", newValue);\n\n        // \"Let ancestor be node's parent.\"\n        var ancestor = node.parentNode;\n\n        // \"While ancestor is not null:\"\n        while (ancestor) {\n            // \"If ancestor is an a, set the tag name of ancestor to \"span\",\n            // and let ancestor be the result.\"\n            if (isHtmlElement(ancestor, \"A\")) {\n                ancestor = setTagName(ancestor, \"span\");\n            }\n\n            // \"Set ancestor to its parent.\"\n            ancestor = ancestor.parentNode;\n        }\n    }\n\n    // \"If command is \"fontSize\"; and new value is one of \"x-small\", \"small\",\n    // \"medium\", \"large\", \"x-large\", \"xx-large\", or \"xxx-large\"; and either the\n    // CSS styling flag is false, or new value is \"xxx-large\": let new parent\n    // be the result of calling createElement(\"font\") on the ownerDocument of\n    // node, then set the size attribute of new parent to the number from the\n    // following table based on new value: [table omitted]\"\n    if (command == \"fontsize\"\n    && [\"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\", \"xxx-large\"].indexOf(newValue) != -1\n    && (!cssStylingFlag || newValue == \"xxx-large\")) {\n        newParent = node.ownerDocument.createElement(\"font\");\n        newParent.size = cssSizeToLegacy(newValue);\n    }\n\n    // \"If command is \"subscript\" or \"superscript\" and new value is\n    // \"subscript\", let new parent be the result of calling\n    // createElement(\"sub\") on the ownerDocument of node.\"\n    if ((command == \"subscript\" || command == \"superscript\")\n    && newValue == \"subscript\") {\n        newParent = node.ownerDocument.createElement(\"sub\");\n    }\n\n    // \"If command is \"subscript\" or \"superscript\" and new value is\n    // \"superscript\", let new parent be the result of calling\n    // createElement(\"sup\") on the ownerDocument of node.\"\n    if ((command == \"subscript\" || command == \"superscript\")\n    && newValue == \"superscript\") {\n        newParent = node.ownerDocument.createElement(\"sup\");\n    }\n\n    // \"If new parent is null, let new parent be the result of calling\n    // createElement(\"span\") on the ownerDocument of node.\"\n    if (!newParent) {\n        newParent = node.ownerDocument.createElement(\"span\");\n    }\n\n    // \"Insert new parent in node's parent before node.\"\n    node.parentNode.insertBefore(newParent, node);\n\n    // \"If the effective command value of command for new parent is not loosely\n    // equivalent to new value, and the relevant CSS property for command is\n    // not null, set that CSS property of new parent to new value (if the new\n    // value would be valid).\"\n    var property = commands[command].relevantCssProperty;\n    if (property !== null\n    && !areLooselyEquivalentValues(command, getEffectiveCommandValue(newParent, command), newValue)) {\n        newParent.style[property] = newValue;\n    }\n\n    // \"If command is \"strikethrough\", and new value is \"line-through\", and the\n    // effective command value of \"strikethrough\" for new parent is not\n    // \"line-through\", set the \"text-decoration\" property of new parent to\n    // \"line-through\".\"\n    if (command == \"strikethrough\"\n    && newValue == \"line-through\"\n    && getEffectiveCommandValue(newParent, \"strikethrough\") != \"line-through\") {\n        newParent.style.textDecoration = \"line-through\";\n    }\n\n    // \"If command is \"underline\", and new value is \"underline\", and the\n    // effective command value of \"underline\" for new parent is not\n    // \"underline\", set the \"text-decoration\" property of new parent to\n    // \"underline\".\"\n    if (command == \"underline\"\n    && newValue == \"underline\"\n    && getEffectiveCommandValue(newParent, \"underline\") != \"underline\") {\n        newParent.style.textDecoration = \"underline\";\n    }\n\n    // \"Append node to new parent as its last child, preserving ranges.\"\n    movePreservingRanges(node, newParent, newParent.childNodes.length);\n\n    // \"If node is an Element and the effective command value of command for\n    // node is not loosely equivalent to new value:\"\n    if (node.nodeType == Node.ELEMENT_NODE\n    && !areEquivalentValues(command, getEffectiveCommandValue(node, command), newValue)) {\n        // \"Insert node into the parent of new parent before new parent,\n        // preserving ranges.\"\n        movePreservingRanges(node, newParent.parentNode, getNodeIndex(newParent));\n\n        // \"Remove new parent from its parent.\"\n        newParent.parentNode.removeChild(newParent);\n\n        // \"Let children be all children of node, omitting any that are\n        // Elements whose specified command value for command is neither null\n        // nor equivalent to new value.\"\n        var children = [];\n        for (var i = 0; i < node.childNodes.length; i++) {\n            if (node.childNodes[i].nodeType == Node.ELEMENT_NODE) {\n                var specifiedValue = getSpecifiedCommandValue(node.childNodes[i], command);\n\n                if (specifiedValue !== null\n                && !areEquivalentValues(command, newValue, specifiedValue)) {\n                    continue;\n                }\n            }\n            children.push(node.childNodes[i]);\n        }\n\n        // \"Force the value of each Node in children, with command and new\n        // value as in this invocation of the algorithm.\"\n        for (var i = 0; i < children.length; i++) {\n            forceValue(children[i], command, newValue);\n        }\n    }\n}\n\n\n//@}\n///// Setting the selection's value /////\n//@{\n\nfunction setSelectionValue(command, newValue) {\n    // \"If there is no formattable node effectively contained in the active\n    // range:\"\n    if (!getAllEffectivelyContainedNodes(getActiveRange())\n    .some(isFormattableNode)) {\n        // \"If command has inline command activated values, set the state\n        // override to true if new value is among them and false if it's not.\"\n        if (\"inlineCommandActivatedValues\" in commands[command]) {\n            setStateOverride(command, commands[command].inlineCommandActivatedValues\n                .indexOf(newValue) != -1);\n        }\n\n        // \"If command is \"subscript\", unset the state override for\n        // \"superscript\".\"\n        if (command == \"subscript\") {\n            unsetStateOverride(\"superscript\");\n        }\n\n        // \"If command is \"superscript\", unset the state override for\n        // \"subscript\".\"\n        if (command == \"superscript\") {\n            unsetStateOverride(\"subscript\");\n        }\n\n        // \"If new value is null, unset the value override (if any).\"\n        if (newValue === null) {\n            unsetValueOverride(command);\n\n        // \"Otherwise, if command is \"createLink\" or it has a value specified,\n        // set the value override to new value.\"\n        } else if (command == \"createlink\" || \"value\" in commands[command]) {\n            setValueOverride(command, newValue);\n        }\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If the active range's start node is an editable Text node, and its\n    // start offset is neither zero nor its start node's length, call\n    // splitText() on the active range's start node, with argument equal to the\n    // active range's start offset. Then set the active range's start node to\n    // the result, and its start offset to zero.\"\n    if (isEditable(getActiveRange().startContainer)\n    && getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n    && getActiveRange().startOffset != 0\n    && getActiveRange().startOffset != getNodeLength(getActiveRange().startContainer)) {\n        // Account for browsers not following range mutation rules\n        var newActiveRange = document.createRange();\n        var newNode;\n        if (getActiveRange().startContainer == getActiveRange().endContainer) {\n            var newEndOffset = getActiveRange().endOffset - getActiveRange().startOffset;\n            newNode = getActiveRange().startContainer.splitText(getActiveRange().startOffset);\n            newActiveRange.setEnd(newNode, newEndOffset);\n            getActiveRange().setEnd(newNode, newEndOffset);\n        } else {\n            newNode = getActiveRange().startContainer.splitText(getActiveRange().startOffset);\n        }\n        newActiveRange.setStart(newNode, 0);\n        getSelection().removeAllRanges();\n        getSelection().addRange(newActiveRange);\n\n        getActiveRange().setStart(newNode, 0);\n    }\n\n    // \"If the active range's end node is an editable Text node, and its end\n    // offset is neither zero nor its end node's length, call splitText() on\n    // the active range's end node, with argument equal to the active range's\n    // end offset.\"\n    if (isEditable(getActiveRange().endContainer)\n    && getActiveRange().endContainer.nodeType == Node.TEXT_NODE\n    && getActiveRange().endOffset != 0\n    && getActiveRange().endOffset != getNodeLength(getActiveRange().endContainer)) {\n        // IE seems to mutate the range incorrectly here, so we need correction\n        // here as well.  The active range will be temporarily in orphaned\n        // nodes, so calling getActiveRange() after splitText() but before\n        // fixing the range will throw an exception.\n        var activeRange = getActiveRange();\n        var newStart = [activeRange.startContainer, activeRange.startOffset];\n        var newEnd = [activeRange.endContainer, activeRange.endOffset];\n        activeRange.endContainer.splitText(activeRange.endOffset);\n        activeRange.setStart(newStart[0], newStart[1]);\n        activeRange.setEnd(newEnd[0], newEnd[1]);\n\n        getSelection().removeAllRanges();\n        getSelection().addRange(activeRange);\n    }\n\n    // \"Let element list be all editable Elements effectively contained in the\n    // active range.\n    //\n    // \"For each element in element list, clear the value of element.\"\n    getAllEffectivelyContainedNodes(getActiveRange(), function(node) {\n        return isEditable(node) && node.nodeType == Node.ELEMENT_NODE;\n    }).forEach(function(element) {\n        clearValue(element, command);\n    });\n\n    // \"Let node list be all editable nodes effectively contained in the active\n    // range.\n    //\n    // \"For each node in node list:\"\n    getAllEffectivelyContainedNodes(getActiveRange(), isEditable).forEach(function(node) {\n        // \"Push down values on node.\"\n        pushDownValues(node, command, newValue);\n\n        // \"If node is an allowed child of span, force the value of node.\"\n        if (isAllowedChild(node, \"span\")) {\n            forceValue(node, command, newValue);\n        }\n    });\n}\n\n\n//@}\n///// The backColor command /////\n//@{\ncommands.backcolor = {\n    // Copy-pasted, same as hiliteColor\n    action: function(value) {\n        // Action is further copy-pasted, same as foreColor\n\n        // \"If value is not a valid CSS color, prepend \"#\" to it.\"\n        //\n        // \"If value is still not a valid CSS color, or if it is currentColor,\n        // return false.\"\n        //\n        // Cheap hack for testing, no attempt to be comprehensive.\n        if (/^([0-9a-fA-F]{3}){1,2}$/.test(value)) {\n            value = \"#\" + value;\n        }\n        if (!/^(rgba?|hsla?)\\(.*\\)$/.test(value)\n        && !parseSimpleColor(value)\n        && value.toLowerCase() != \"transparent\") {\n            return false;\n        }\n\n        // \"Set the selection's value to value.\"\n        setSelectionValue(\"backcolor\", value);\n\n        // \"Return true.\"\n        return true;\n    }, standardInlineValueCommand: true, relevantCssProperty: \"backgroundColor\",\n    equivalentValues: function(val1, val2) {\n        // \"Either both strings are valid CSS colors and have the same red,\n        // green, blue, and alpha components, or neither string is a valid CSS\n        // color.\"\n        return normalizeColor(val1) === normalizeColor(val2);\n    },\n};\n\n//@}\n///// The bold command /////\n//@{\ncommands.bold = {\n    action: function() {\n        // \"If queryCommandState(\"bold\") returns true, set the selection's\n        // value to \"normal\". Otherwise set the selection's value to \"bold\".\n        // Either way, return true.\"\n        if (myQueryCommandState(\"bold\")) {\n            setSelectionValue(\"bold\", \"normal\");\n        } else {\n            setSelectionValue(\"bold\", \"bold\");\n        }\n        return true;\n    }, inlineCommandActivatedValues: [\"bold\", \"600\", \"700\", \"800\", \"900\"],\n    relevantCssProperty: \"fontWeight\",\n    equivalentValues: function(val1, val2) {\n        // \"Either the two strings are equal, or one is \"bold\" and the other is\n        // \"700\", or one is \"normal\" and the other is \"400\".\"\n        return val1 == val2\n            || (val1 == \"bold\" && val2 == \"700\")\n            || (val1 == \"700\" && val2 == \"bold\")\n            || (val1 == \"normal\" && val2 == \"400\")\n            || (val1 == \"400\" && val2 == \"normal\");\n    },\n};\n\n//@}\n///// The createLink command /////\n//@{\ncommands.createlink = {\n    action: function(value) {\n        // \"If value is the empty string, return false.\"\n        if (value === \"\") {\n            return false;\n        }\n\n        // \"For each editable a element that has an href attribute and is an\n        // ancestor of some node effectively contained in the active range, set\n        // that a element's href attribute to value.\"\n        //\n        // TODO: We don't actually do this in tree order, not that it matters\n        // unless you're spying with mutation events.\n        getAllEffectivelyContainedNodes(getActiveRange()).forEach(function(node) {\n            getAncestors(node).forEach(function(ancestor) {\n                if (isEditable(ancestor)\n                && isHtmlElement(ancestor, \"a\")\n                && ancestor.hasAttribute(\"href\")) {\n                    ancestor.setAttribute(\"href\", value);\n                }\n            });\n        });\n\n        // \"Set the selection's value to value.\"\n        setSelectionValue(\"createlink\", value);\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The fontName command /////\n//@{\ncommands.fontname = {\n    action: function(value) {\n        // \"Set the selection's value to value, then return true.\"\n        setSelectionValue(\"fontname\", value);\n        return true;\n    }, standardInlineValueCommand: true, relevantCssProperty: \"fontFamily\"\n};\n\n//@}\n///// The fontSize command /////\n//@{\n\n// Helper function for fontSize's action plus queryOutputHelper.  It's just the\n// middle of fontSize's action, ripped out into its own function.  Returns null\n// if the size is invalid.\nfunction normalizeFontSize(value) {\n    // \"Strip leading and trailing whitespace from value.\"\n    //\n    // Cheap hack, not following the actual algorithm.\n    value = value.trim();\n\n    // \"If value is not a valid floating point number, and would not be a valid\n    // floating point number if a single leading \"+\" character were stripped,\n    // return false.\"\n    if (!/^[-+]?[0-9]+(\\.[0-9]+)?([eE][-+]?[0-9]+)?$/.test(value)) {\n        return null;\n    }\n\n    var mode;\n\n    // \"If the first character of value is \"+\", delete the character and let\n    // mode be \"relative-plus\".\"\n    if (value[0] == \"+\") {\n        value = value.slice(1);\n        mode = \"relative-plus\";\n    // \"Otherwise, if the first character of value is \"-\", delete the character\n    // and let mode be \"relative-minus\".\"\n    } else if (value[0] == \"-\") {\n        value = value.slice(1);\n        mode = \"relative-minus\";\n    // \"Otherwise, let mode be \"absolute\".\"\n    } else {\n        mode = \"absolute\";\n    }\n\n    // \"Apply the rules for parsing non-negative integers to value, and let\n    // number be the result.\"\n    //\n    // Another cheap hack.\n    var num = parseInt(value);\n\n    // \"If mode is \"relative-plus\", add three to number.\"\n    if (mode == \"relative-plus\") {\n        num += 3;\n    }\n\n    // \"If mode is \"relative-minus\", negate number, then add three to it.\"\n    if (mode == \"relative-minus\") {\n        num = 3 - num;\n    }\n\n    // \"If number is less than one, let number equal 1.\"\n    if (num < 1) {\n        num = 1;\n    }\n\n    // \"If number is greater than seven, let number equal 7.\"\n    if (num > 7) {\n        num = 7;\n    }\n\n    // \"Set value to the string here corresponding to number:\" [table omitted]\n    value = {\n        1: \"x-small\",\n        2: \"small\",\n        3: \"medium\",\n        4: \"large\",\n        5: \"x-large\",\n        6: \"xx-large\",\n        7: \"xxx-large\"\n    }[num];\n\n    return value;\n}\n\ncommands.fontsize = {\n    action: function(value) {\n        value = normalizeFontSize(value);\n        if (value === null) {\n            return false;\n        }\n\n        // \"Set the selection's value to value.\"\n        setSelectionValue(\"fontsize\", value);\n\n        // \"Return true.\"\n        return true;\n    }, indeterm: function() {\n        // \"True if among formattable nodes that are effectively contained in\n        // the active range, there are two that have distinct effective command\n        // values.  Otherwise false.\"\n        return getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode)\n        .map(function(node) {\n            return getEffectiveCommandValue(node, \"fontsize\");\n        }).filter(function(value, i, arr) {\n            return arr.slice(0, i).indexOf(value) == -1;\n        }).length >= 2;\n    }, value: function() {\n        // \"If the active range is null, return the empty string.\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n\n        // \"Let pixel size be the effective command value of the first\n        // formattable node that is effectively contained in the active range,\n        // or if there is no such node, the effective command value of the\n        // active range's start node, in either case interpreted as a number of\n        // pixels.\"\n        var node = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode)[0];\n        if (node === undefined) {\n            node = getActiveRange().startContainer;\n        }\n        var pixelSize = getEffectiveCommandValue(node, \"fontsize\");\n\n        // \"Return the legacy font size for pixel size.\"\n        return getLegacyFontSize(pixelSize);\n    }, relevantCssProperty: \"fontSize\"\n};\n\nfunction getLegacyFontSize(size) {\n    if (getLegacyFontSize.resultCache === undefined) {\n        getLegacyFontSize.resultCache = {};\n    }\n\n    if (getLegacyFontSize.resultCache[size] !== undefined) {\n        return getLegacyFontSize.resultCache[size];\n    }\n\n    // For convenience in other places in my code, I handle all sizes, not just\n    // pixel sizes as the spec says.  This means pixel sizes have to be passed\n    // in suffixed with \"px\", not as plain numbers.\n    if (normalizeFontSize(size) !== null) {\n        return getLegacyFontSize.resultCache[size] = cssSizeToLegacy(normalizeFontSize(size));\n    }\n\n    if ([\"x-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\", \"xxx-large\"].indexOf(size) == -1\n    && !/^[0-9]+(\\.[0-9]+)?(cm|mm|in|pt|pc|px)$/.test(size)) {\n        // There is no sensible legacy size for things like \"2em\".\n        return getLegacyFontSize.resultCache[size] = null;\n    }\n\n    var font = document.createElement(\"font\");\n    document.body.appendChild(font);\n    if (size == \"xxx-large\") {\n        font.size = 7;\n    } else {\n        font.style.fontSize = size;\n    }\n    var pixelSize = parseInt(getComputedStyle(font).fontSize);\n    document.body.removeChild(font);\n\n    // \"Let returned size be 1.\"\n    var returnedSize = 1;\n\n    // \"While returned size is less than 7:\"\n    while (returnedSize < 7) {\n        // \"Let lower bound be the resolved value of \"font-size\" in pixels\n        // of a font element whose size attribute is set to returned size.\"\n        var font = document.createElement(\"font\");\n        font.size = returnedSize;\n        document.body.appendChild(font);\n        var lowerBound = parseInt(getComputedStyle(font).fontSize);\n\n        // \"Let upper bound be the resolved value of \"font-size\" in pixels\n        // of a font element whose size attribute is set to one plus\n        // returned size.\"\n        font.size = 1 + returnedSize;\n        var upperBound = parseInt(getComputedStyle(font).fontSize);\n        document.body.removeChild(font);\n\n        // \"Let average be the average of upper bound and lower bound.\"\n        var average = (upperBound + lowerBound)/2;\n\n        // \"If pixel size is less than average, return the one-element\n        // string consisting of the digit returned size.\"\n        if (pixelSize < average) {\n            return getLegacyFontSize.resultCache[size] = String(returnedSize);\n        }\n\n        // \"Add one to returned size.\"\n        returnedSize++;\n    }\n\n    // \"Return \"7\".\"\n    return getLegacyFontSize.resultCache[size] = \"7\";\n}\n\n//@}\n///// The foreColor command /////\n//@{\ncommands.forecolor = {\n    action: function(value) {\n        // Copy-pasted, same as backColor and hiliteColor\n\n        // \"If value is not a valid CSS color, prepend \"#\" to it.\"\n        //\n        // \"If value is still not a valid CSS color, or if it is currentColor,\n        // return false.\"\n        //\n        // Cheap hack for testing, no attempt to be comprehensive.\n        if (/^([0-9a-fA-F]{3}){1,2}$/.test(value)) {\n            value = \"#\" + value;\n        }\n        if (!/^(rgba?|hsla?)\\(.*\\)$/.test(value)\n        && !parseSimpleColor(value)\n        && value.toLowerCase() != \"transparent\") {\n            return false;\n        }\n\n        // \"Set the selection's value to value.\"\n        setSelectionValue(\"forecolor\", value);\n\n        // \"Return true.\"\n        return true;\n    }, standardInlineValueCommand: true, relevantCssProperty: \"color\",\n    equivalentValues: function(val1, val2) {\n        // \"Either both strings are valid CSS colors and have the same red,\n        // green, blue, and alpha components, or neither string is a valid CSS\n        // color.\"\n        return normalizeColor(val1) === normalizeColor(val2);\n    },\n};\n\n//@}\n///// The hiliteColor command /////\n//@{\ncommands.hilitecolor = {\n    // Copy-pasted, same as backColor\n    action: function(value) {\n        // Action is further copy-pasted, same as foreColor\n\n        // \"If value is not a valid CSS color, prepend \"#\" to it.\"\n        //\n        // \"If value is still not a valid CSS color, or if it is currentColor,\n        // return false.\"\n        //\n        // Cheap hack for testing, no attempt to be comprehensive.\n        if (/^([0-9a-fA-F]{3}){1,2}$/.test(value)) {\n            value = \"#\" + value;\n        }\n        if (!/^(rgba?|hsla?)\\(.*\\)$/.test(value)\n        && !parseSimpleColor(value)\n        && value.toLowerCase() != \"transparent\") {\n            return false;\n        }\n\n        // \"Set the selection's value to value.\"\n        setSelectionValue(\"hilitecolor\", value);\n\n        // \"Return true.\"\n        return true;\n    }, indeterm: function() {\n        // \"True if among editable Text nodes that are effectively contained in\n        // the active range, there are two that have distinct effective command\n        // values.  Otherwise false.\"\n        return getAllEffectivelyContainedNodes(getActiveRange(), function(node) {\n            return isEditable(node) && node.nodeType == Node.TEXT_NODE;\n        }).map(function(node) {\n            return getEffectiveCommandValue(node, \"hilitecolor\");\n        }).filter(function(value, i, arr) {\n            return arr.slice(0, i).indexOf(value) == -1;\n        }).length >= 2;\n    }, standardInlineValueCommand: true, relevantCssProperty: \"backgroundColor\",\n    equivalentValues: function(val1, val2) {\n        // \"Either both strings are valid CSS colors and have the same red,\n        // green, blue, and alpha components, or neither string is a valid CSS\n        // color.\"\n        return normalizeColor(val1) === normalizeColor(val2);\n    },\n};\n\n//@}\n///// The italic command /////\n//@{\ncommands.italic = {\n    action: function() {\n        // \"If queryCommandState(\"italic\") returns true, set the selection's\n        // value to \"normal\". Otherwise set the selection's value to \"italic\".\n        // Either way, return true.\"\n        if (myQueryCommandState(\"italic\")) {\n            setSelectionValue(\"italic\", \"normal\");\n        } else {\n            setSelectionValue(\"italic\", \"italic\");\n        }\n        return true;\n    }, inlineCommandActivatedValues: [\"italic\", \"oblique\"],\n    relevantCssProperty: \"fontStyle\"\n};\n\n//@}\n///// The removeFormat command /////\n//@{\ncommands.removeformat = {\n    action: function() {\n        // \"A removeFormat candidate is an editable HTML element with local\n        // name \"abbr\", \"acronym\", \"b\", \"bdi\", \"bdo\", \"big\", \"blink\", \"cite\",\n        // \"code\", \"dfn\", \"em\", \"font\", \"i\", \"ins\", \"kbd\", \"mark\", \"nobr\", \"q\",\n        // \"s\", \"samp\", \"small\", \"span\", \"strike\", \"strong\", \"sub\", \"sup\",\n        // \"tt\", \"u\", or \"var\".\"\n        function isRemoveFormatCandidate(node) {\n            return isEditable(node)\n                && isHtmlElement(node, [\"abbr\", \"acronym\", \"b\", \"bdi\", \"bdo\",\n                \"big\", \"blink\", \"cite\", \"code\", \"dfn\", \"em\", \"font\", \"i\",\n                \"ins\", \"kbd\", \"mark\", \"nobr\", \"q\", \"s\", \"samp\", \"small\",\n                \"span\", \"strike\", \"strong\", \"sub\", \"sup\", \"tt\", \"u\", \"var\"]);\n        }\n\n        // \"Let elements to remove be a list of every removeFormat candidate\n        // effectively contained in the active range.\"\n        var elementsToRemove = getAllEffectivelyContainedNodes(getActiveRange(), isRemoveFormatCandidate);\n\n        // \"For each element in elements to remove:\"\n        elementsToRemove.forEach(function(element) {\n            // \"While element has children, insert the first child of element\n            // into the parent of element immediately before element,\n            // preserving ranges.\"\n            while (element.hasChildNodes()) {\n                movePreservingRanges(element.firstChild, element.parentNode, getNodeIndex(element));\n            }\n\n            // \"Remove element from its parent.\"\n            element.parentNode.removeChild(element);\n        });\n\n        // \"If the active range's start node is an editable Text node, and its\n        // start offset is neither zero nor its start node's length, call\n        // splitText() on the active range's start node, with argument equal to\n        // the active range's start offset. Then set the active range's start\n        // node to the result, and its start offset to zero.\"\n        if (isEditable(getActiveRange().startContainer)\n        && getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().startOffset != 0\n        && getActiveRange().startOffset != getNodeLength(getActiveRange().startContainer)) {\n            // Account for browsers not following range mutation rules\n            if (getActiveRange().startContainer == getActiveRange().endContainer) {\n                var newEnd = getActiveRange().endOffset - getActiveRange().startOffset;\n                var newNode = getActiveRange().startContainer.splitText(getActiveRange().startOffset);\n                getActiveRange().setStart(newNode, 0);\n                getActiveRange().setEnd(newNode, newEnd);\n            } else {\n                getActiveRange().setStart(getActiveRange().startContainer.splitText(getActiveRange().startOffset), 0);\n            }\n        }\n\n        // \"If the active range's end node is an editable Text node, and its\n        // end offset is neither zero nor its end node's length, call\n        // splitText() on the active range's end node, with argument equal to\n        // the active range's end offset.\"\n        if (isEditable(getActiveRange().endContainer)\n        && getActiveRange().endContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().endOffset != 0\n        && getActiveRange().endOffset != getNodeLength(getActiveRange().endContainer)) {\n            // IE seems to mutate the range incorrectly here, so we need\n            // correction here as well.  Have to be careful to set the range to\n            // something not including the text node so that getActiveRange()\n            // doesn't throw an exception due to a temporarily detached\n            // endpoint.\n            var newStart = [getActiveRange().startContainer, getActiveRange().startOffset];\n            var newEnd = [getActiveRange().endContainer, getActiveRange().endOffset];\n            getActiveRange().setEnd(document.documentElement, 0);\n            newEnd[0].splitText(newEnd[1]);\n            getActiveRange().setStart(newStart[0], newStart[1]);\n            getActiveRange().setEnd(newEnd[0], newEnd[1]);\n        }\n\n        // \"Let node list consist of all editable nodes effectively contained\n        // in the active range.\"\n        //\n        // \"For each node in node list, while node's parent is a removeFormat\n        // candidate in the same editing host as node, split the parent of the\n        // one-node list consisting of node.\"\n        getAllEffectivelyContainedNodes(getActiveRange(), isEditable).forEach(function(node) {\n            while (isRemoveFormatCandidate(node.parentNode)\n            && inSameEditingHost(node.parentNode, node)) {\n                splitParent([node]);\n            }\n        });\n\n        // \"For each of the entries in the following list, in the given order,\n        // set the selection's value to null, with command as given.\"\n        [\n            \"subscript\",\n            \"bold\",\n            \"fontname\",\n            \"fontsize\",\n            \"forecolor\",\n            \"hilitecolor\",\n            \"italic\",\n            \"strikethrough\",\n            \"underline\",\n        ].forEach(function(command) {\n            setSelectionValue(command, null);\n        });\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The strikethrough command /////\n//@{\ncommands.strikethrough = {\n    action: function() {\n        // \"If queryCommandState(\"strikethrough\") returns true, set the\n        // selection's value to null. Otherwise set the selection's value to\n        // \"line-through\".  Either way, return true.\"\n        if (myQueryCommandState(\"strikethrough\")) {\n            setSelectionValue(\"strikethrough\", null);\n        } else {\n            setSelectionValue(\"strikethrough\", \"line-through\");\n        }\n        return true;\n    }, inlineCommandActivatedValues: [\"line-through\"]\n};\n\n//@}\n///// The subscript command /////\n//@{\ncommands.subscript = {\n    action: function() {\n        // \"Call queryCommandState(\"subscript\"), and let state be the result.\"\n        var state = myQueryCommandState(\"subscript\");\n\n        // \"Set the selection's value to null.\"\n        setSelectionValue(\"subscript\", null);\n\n        // \"If state is false, set the selection's value to \"subscript\".\"\n        if (!state) {\n            setSelectionValue(\"subscript\", \"subscript\");\n        }\n\n        // \"Return true.\"\n        return true;\n    }, indeterm: function() {\n        // \"True if either among formattable nodes that are effectively\n        // contained in the active range, there is at least one with effective\n        // command value \"subscript\" and at least one with some other effective\n        // command value; or if there is some formattable node effectively\n        // contained in the active range with effective command value \"mixed\".\n        // Otherwise false.\"\n        var nodes = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode);\n        return (nodes.some(function(node) { return getEffectiveCommandValue(node, \"subscript\") == \"subscript\" })\n            && nodes.some(function(node) { return getEffectiveCommandValue(node, \"subscript\") != \"subscript\" }))\n            || nodes.some(function(node) { return getEffectiveCommandValue(node, \"subscript\") == \"mixed\" });\n    }, inlineCommandActivatedValues: [\"subscript\"],\n};\n\n//@}\n///// The superscript command /////\n//@{\ncommands.superscript = {\n    action: function() {\n        // \"Call queryCommandState(\"superscript\"), and let state be the\n        // result.\"\n        var state = myQueryCommandState(\"superscript\");\n\n        // \"Set the selection's value to null.\"\n        setSelectionValue(\"superscript\", null);\n\n        // \"If state is false, set the selection's value to \"superscript\".\"\n        if (!state) {\n            setSelectionValue(\"superscript\", \"superscript\");\n        }\n\n        // \"Return true.\"\n        return true;\n    }, indeterm: function() {\n        // \"True if either among formattable nodes that are effectively\n        // contained in the active range, there is at least one with effective\n        // command value \"superscript\" and at least one with some other\n        // effective command value; or if there is some formattable node\n        // effectively contained in the active range with effective command\n        // value \"mixed\".  Otherwise false.\"\n        var nodes = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode);\n        return (nodes.some(function(node) { return getEffectiveCommandValue(node, \"superscript\") == \"superscript\" })\n            && nodes.some(function(node) { return getEffectiveCommandValue(node, \"superscript\") != \"superscript\" }))\n            || nodes.some(function(node) { return getEffectiveCommandValue(node, \"superscript\") == \"mixed\" });\n    }, inlineCommandActivatedValues: [\"superscript\"],\n};\n\n//@}\n///// The underline command /////\n//@{\ncommands.underline = {\n    action: function() {\n        // \"If queryCommandState(\"underline\") returns true, set the selection's\n        // value to null. Otherwise set the selection's value to \"underline\".\n        // Either way, return true.\"\n        if (myQueryCommandState(\"underline\")) {\n            setSelectionValue(\"underline\", null);\n        } else {\n            setSelectionValue(\"underline\", \"underline\");\n        }\n        return true;\n    }, inlineCommandActivatedValues: [\"underline\"]\n};\n\n//@}\n///// The unlink command /////\n//@{\ncommands.unlink = {\n    action: function() {\n        // \"Let hyperlinks be a list of every a element that has an href\n        // attribute and is contained in the active range or is an ancestor of\n        // one of its boundary points.\"\n        //\n        // As usual, take care to ensure it's tree order.  The correctness of\n        // the following is left as an exercise for the reader.\n        var range = getActiveRange();\n        var hyperlinks = [];\n        for (\n            var node = range.startContainer;\n            node;\n            node = node.parentNode\n        ) {\n            if (isHtmlElement(node, \"A\")\n            && node.hasAttribute(\"href\")) {\n                hyperlinks.unshift(node);\n            }\n        }\n        for (\n            var node = range.startContainer;\n            node != nextNodeDescendants(range.endContainer);\n            node = nextNode(node)\n        ) {\n            if (isHtmlElement(node, \"A\")\n            && node.hasAttribute(\"href\")\n            && (isContained(node, range)\n            || isAncestor(node, range.endContainer)\n            || node == range.endContainer)) {\n                hyperlinks.push(node);\n            }\n        }\n\n        // \"Clear the value of each member of hyperlinks.\"\n        for (var i = 0; i < hyperlinks.length; i++) {\n            clearValue(hyperlinks[i], \"unlink\");\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n\n/////////////////////////////////////\n///// Block formatting commands /////\n/////////////////////////////////////\n\n///// Block formatting command definitions /////\n//@{\n\n// \"An indentation element is either a blockquote, or a div that has a style\n// attribute that sets \"margin\" or some subproperty of it.\"\nfunction isIndentationElement(node) {\n    if (!isHtmlElement(node)) {\n        return false;\n    }\n\n    if (node.tagName == \"BLOCKQUOTE\") {\n        return true;\n    }\n\n    if (node.tagName != \"DIV\") {\n        return false;\n    }\n\n    for (var i = 0; i < node.style.length; i++) {\n        // Approximate check\n        if (/^(-[a-z]+-)?margin/.test(node.style[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// \"A simple indentation element is an indentation element that has no\n// attributes except possibly\n//\n//   * \"a style attribute that sets no properties other than \"margin\",\n//     \"border\", \"padding\", or subproperties of those; and/or\n//   * \"a dir attribute.\"\nfunction isSimpleIndentationElement(node) {\n    if (!isIndentationElement(node)) {\n        return false;\n    }\n\n    for (var i = 0; i < node.attributes.length; i++) {\n        if (!isHtmlNamespace(node.attributes[i].namespaceURI)\n        || [\"style\", \"dir\"].indexOf(node.attributes[i].name) == -1) {\n            return false;\n        }\n    }\n\n    for (var i = 0; i < node.style.length; i++) {\n        // This is approximate, but it works well enough for my purposes.\n        if (!/^(-[a-z]+-)?(margin|border|padding)/.test(node.style[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// \"A non-list single-line container is an HTML element with local name\n// \"address\", \"div\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"listing\", \"p\", \"pre\",\n// or \"xmp\".\"\nfunction isNonListSingleLineContainer(node) {\n    return isHtmlElement(node, [\"address\", \"div\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\",\n        \"h6\", \"listing\", \"p\", \"pre\", \"xmp\"]);\n}\n\n// \"A single-line container is either a non-list single-line container, or an\n// HTML element with local name \"li\", \"dt\", or \"dd\".\"\nfunction isSingleLineContainer(node) {\n    return isNonListSingleLineContainer(node)\n        || isHtmlElement(node, [\"li\", \"dt\", \"dd\"]);\n}\n\nfunction getBlockNodeOf(node) {\n    // \"While node is an inline node, set node to its parent.\"\n    while (isInlineNode(node)) {\n        node = node.parentNode;\n    }\n\n    // \"Return node.\"\n    return node;\n}\n\n//@}\n///// Assorted block formatting command algorithms /////\n//@{\n\nfunction fixDisallowedAncestors(node) {\n    // \"If node is not editable, abort these steps.\"\n    if (!isEditable(node)) {\n        return;\n    }\n\n    // \"If node is not an allowed child of any of its ancestors in the same\n    // editing host:\"\n    if (getAncestors(node).every(function(ancestor) {\n        return !inSameEditingHost(node, ancestor)\n            || !isAllowedChild(node, ancestor)\n    })) {\n        // \"If node is a dd or dt, wrap the one-node list consisting of node,\n        // with sibling criteria returning true for any dl with no attributes\n        // and false otherwise, and new parent instructions returning the\n        // result of calling createElement(\"dl\") on the context object. Then\n        // abort these steps.\"\n        if (isHtmlElement(node, [\"dd\", \"dt\"])) {\n            wrap([node],\n                function(sibling) { return isHtmlElement(sibling, \"dl\") && !sibling.attributes.length },\n                function() { return document.createElement(\"dl\") });\n            return;\n        }\n\n        // \"If \"p\" is not an allowed child of the editing host of node, abort\n        // these steps.\"\n        if (!isAllowedChild(\"p\", getEditingHostOf(node))) {\n            return;\n        }\n\n        // \"If node is not a prohibited paragraph child, abort these steps.\"\n        if (!isProhibitedParagraphChild(node)) {\n            return;\n        }\n\n        // \"Set the tag name of node to the default single-line container name,\n        // and let node be the result.\"\n        node = setTagName(node, defaultSingleLineContainerName);\n\n        // \"Fix disallowed ancestors of node.\"\n        fixDisallowedAncestors(node);\n\n        // \"Let children be node's children.\"\n        var children = [].slice.call(node.childNodes);\n\n        // \"For each child in children, if child is a prohibited paragraph\n        // child:\"\n        children.filter(isProhibitedParagraphChild)\n        .forEach(function(child) {\n            // \"Record the values of the one-node list consisting of child, and\n            // let values be the result.\"\n            var values = recordValues([child]);\n\n            // \"Split the parent of the one-node list consisting of child.\"\n            splitParent([child]);\n\n            // \"Restore the values from values.\"\n            restoreValues(values);\n        });\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"Record the values of the one-node list consisting of node, and let\n    // values be the result.\"\n    var values = recordValues([node]);\n\n    // \"While node is not an allowed child of its parent, split the parent of\n    // the one-node list consisting of node.\"\n    while (!isAllowedChild(node, node.parentNode)) {\n        splitParent([node]);\n    }\n\n    // \"Restore the values from values.\"\n    restoreValues(values);\n}\n\nfunction normalizeSublists(item) {\n    // \"If item is not an li or it is not editable or its parent is not\n    // editable, abort these steps.\"\n    if (!isHtmlElement(item, \"LI\")\n    || !isEditable(item)\n    || !isEditable(item.parentNode)) {\n        return;\n    }\n\n    // \"Let new item be null.\"\n    var newItem = null;\n\n    // \"While item has an ol or ul child:\"\n    while ([].some.call(item.childNodes, function (node) { return isHtmlElement(node, [\"OL\", \"UL\"]) })) {\n        // \"Let child be the last child of item.\"\n        var child = item.lastChild;\n\n        // \"If child is an ol or ul, or new item is null and child is a Text\n        // node whose data consists of zero of more space characters:\"\n        if (isHtmlElement(child, [\"OL\", \"UL\"])\n        || (!newItem && child.nodeType == Node.TEXT_NODE && /^[ \\t\\n\\f\\r]*$/.test(child.data))) {\n            // \"Set new item to null.\"\n            newItem = null;\n\n            // \"Insert child into the parent of item immediately following\n            // item, preserving ranges.\"\n            movePreservingRanges(child, item.parentNode, 1 + getNodeIndex(item));\n\n        // \"Otherwise:\"\n        } else {\n            // \"If new item is null, let new item be the result of calling\n            // createElement(\"li\") on the ownerDocument of item, then insert\n            // new item into the parent of item immediately after item.\"\n            if (!newItem) {\n                newItem = item.ownerDocument.createElement(\"li\");\n                item.parentNode.insertBefore(newItem, item.nextSibling);\n            }\n\n            // \"Insert child into new item as its first child, preserving\n            // ranges.\"\n            movePreservingRanges(child, newItem, 0);\n        }\n    }\n}\n\nfunction getSelectionListState() {\n    // \"If the active range is null, return \"none\".\"\n    if (!getActiveRange()) {\n        return \"none\";\n    }\n\n    // \"Block-extend the active range, and let new range be the result.\"\n    var newRange = blockExtend(getActiveRange());\n\n    // \"Let node list be a list of nodes, initially empty.\"\n    //\n    // \"For each node contained in new range, append node to node list if the\n    // last member of node list (if any) is not an ancestor of node; node is\n    // editable; node is not an indentation element; and node is either an ol\n    // or ul, or the child of an ol or ul, or an allowed child of \"li\".\"\n    var nodeList = getContainedNodes(newRange, function(node) {\n        return isEditable(node)\n            && !isIndentationElement(node)\n            && (isHtmlElement(node, [\"ol\", \"ul\"])\n            || isHtmlElement(node.parentNode, [\"ol\", \"ul\"])\n            || isAllowedChild(node, \"li\"));\n    });\n\n    // \"If node list is empty, return \"none\".\"\n    if (!nodeList.length) {\n        return \"none\";\n    }\n\n    // \"If every member of node list is either an ol or the child of an ol or\n    // the child of an li child of an ol, and none is a ul or an ancestor of a\n    // ul, return \"ol\".\"\n    if (nodeList.every(function(node) {\n        return isHtmlElement(node, \"ol\")\n            || isHtmlElement(node.parentNode, \"ol\")\n            || (isHtmlElement(node.parentNode, \"li\") && isHtmlElement(node.parentNode.parentNode, \"ol\"));\n    })\n    && !nodeList.some(function(node) { return isHtmlElement(node, \"ul\") || (\"querySelector\" in node && node.querySelector(\"ul\")) })) {\n        return \"ol\";\n    }\n\n    // \"If every member of node list is either a ul or the child of a ul or the\n    // child of an li child of a ul, and none is an ol or an ancestor of an ol,\n    // return \"ul\".\"\n    if (nodeList.every(function(node) {\n        return isHtmlElement(node, \"ul\")\n            || isHtmlElement(node.parentNode, \"ul\")\n            || (isHtmlElement(node.parentNode, \"li\") && isHtmlElement(node.parentNode.parentNode, \"ul\"));\n    })\n    && !nodeList.some(function(node) { return isHtmlElement(node, \"ol\") || (\"querySelector\" in node && node.querySelector(\"ol\")) })) {\n        return \"ul\";\n    }\n\n    var hasOl = nodeList.some(function(node) {\n        return isHtmlElement(node, \"ol\")\n            || isHtmlElement(node.parentNode, \"ol\")\n            || (\"querySelector\" in node && node.querySelector(\"ol\"))\n            || (isHtmlElement(node.parentNode, \"li\") && isHtmlElement(node.parentNode.parentNode, \"ol\"));\n    });\n    var hasUl = nodeList.some(function(node) {\n        return isHtmlElement(node, \"ul\")\n            || isHtmlElement(node.parentNode, \"ul\")\n            || (\"querySelector\" in node && node.querySelector(\"ul\"))\n            || (isHtmlElement(node.parentNode, \"li\") && isHtmlElement(node.parentNode.parentNode, \"ul\"));\n    });\n    // \"If some member of node list is either an ol or the child or ancestor of\n    // an ol or the child of an li child of an ol, and some member of node list\n    // is either a ul or the child or ancestor of a ul or the child of an li\n    // child of a ul, return \"mixed\".\"\n    if (hasOl && hasUl) {\n        return \"mixed\";\n    }\n\n    // \"If some member of node list is either an ol or the child or ancestor of\n    // an ol or the child of an li child of an ol, return \"mixed ol\".\"\n    if (hasOl) {\n        return \"mixed ol\";\n    }\n\n    // \"If some member of node list is either a ul or the child or ancestor of\n    // a ul or the child of an li child of a ul, return \"mixed ul\".\"\n    if (hasUl) {\n        return \"mixed ul\";\n    }\n\n    // \"Return \"none\".\"\n    return \"none\";\n}\n\nfunction getAlignmentValue(node) {\n    // \"While node is neither null nor an Element, or it is an Element but its\n    // \"display\" property has resolved value \"inline\" or \"none\", set node to\n    // its parent.\"\n    while ((node && node.nodeType != Node.ELEMENT_NODE)\n    || (node.nodeType == Node.ELEMENT_NODE\n    && [\"inline\", \"none\"].indexOf(getComputedStyle(node).display) != -1)) {\n        node = node.parentNode;\n    }\n\n    // \"If node is not an Element, return \"left\".\"\n    if (!node || node.nodeType != Node.ELEMENT_NODE) {\n        return \"left\";\n    }\n\n    var resolvedValue = getComputedStyle(node).textAlign\n        // Hack around browser non-standardness\n        .replace(/^-(moz|webkit)-/, \"\")\n        .replace(/^auto$/, \"start\");\n\n    // \"If node's \"text-align\" property has resolved value \"start\", return\n    // \"left\" if the directionality of node is \"ltr\", \"right\" if it is \"rtl\".\"\n    if (resolvedValue == \"start\") {\n        return getDirectionality(node) == \"ltr\" ? \"left\" : \"right\";\n    }\n\n    // \"If node's \"text-align\" property has resolved value \"end\", return\n    // \"right\" if the directionality of node is \"ltr\", \"left\" if it is \"rtl\".\"\n    if (resolvedValue == \"end\") {\n        return getDirectionality(node) == \"ltr\" ? \"right\" : \"left\";\n    }\n\n    // \"If node's \"text-align\" property has resolved value \"center\", \"justify\",\n    // \"left\", or \"right\", return that value.\"\n    if ([\"center\", \"justify\", \"left\", \"right\"].indexOf(resolvedValue) != -1) {\n        return resolvedValue;\n    }\n\n    // \"Return \"left\".\"\n    return \"left\";\n}\n\nfunction getNextEquivalentPoint(node, offset) {\n    // \"If node's length is zero, return null.\"\n    if (getNodeLength(node) == 0) {\n        return null;\n    }\n\n    // \"If offset is node's length, and node's parent is not null, and node is\n    // an inline node, return (node's parent, 1 + node's index).\"\n    if (offset == getNodeLength(node)\n    && node.parentNode\n    && isInlineNode(node)) {\n        return [node.parentNode, 1 + getNodeIndex(node)];\n    }\n\n    // \"If node has a child with index offset, and that child's length is not\n    // zero, and that child is an inline node, return (that child, 0).\"\n    if (0 <= offset\n    && offset < node.childNodes.length\n    && getNodeLength(node.childNodes[offset]) != 0\n    && isInlineNode(node.childNodes[offset])) {\n        return [node.childNodes[offset], 0];\n    }\n\n    // \"Return null.\"\n    return null;\n}\n\nfunction getPreviousEquivalentPoint(node, offset) {\n    // \"If node's length is zero, return null.\"\n    if (getNodeLength(node) == 0) {\n        return null;\n    }\n\n    // \"If offset is 0, and node's parent is not null, and node is an inline\n    // node, return (node's parent, node's index).\"\n    if (offset == 0\n    && node.parentNode\n    && isInlineNode(node)) {\n        return [node.parentNode, getNodeIndex(node)];\n    }\n\n    // \"If node has a child with index offset â 1, and that child's length is\n    // not zero, and that child is an inline node, return (that child, that\n    // child's length).\"\n    if (0 <= offset - 1\n    && offset - 1 < node.childNodes.length\n    && getNodeLength(node.childNodes[offset - 1]) != 0\n    && isInlineNode(node.childNodes[offset - 1])) {\n        return [node.childNodes[offset - 1], getNodeLength(node.childNodes[offset - 1])];\n    }\n\n    // \"Return null.\"\n    return null;\n}\n\nfunction getFirstEquivalentPoint(node, offset) {\n    // \"While (node, offset)'s previous equivalent point is not null, set\n    // (node, offset) to its previous equivalent point.\"\n    var prev;\n    while (prev = getPreviousEquivalentPoint(node, offset)) {\n        node = prev[0];\n        offset = prev[1];\n    }\n\n    // \"Return (node, offset).\"\n    return [node, offset];\n}\n\nfunction getLastEquivalentPoint(node, offset) {\n    // \"While (node, offset)'s next equivalent point is not null, set (node,\n    // offset) to its next equivalent point.\"\n    var next;\n    while (next = getNextEquivalentPoint(node, offset)) {\n        node = next[0];\n        offset = next[1];\n    }\n\n    // \"Return (node, offset).\"\n    return [node, offset];\n}\n\n//@}\n///// Block-extending a range /////\n//@{\n\n// \"A boundary point (node, offset) is a block start point if either node's\n// parent is null and offset is zero; or node has a child with index offset â\n// 1, and that child is either a visible block node or a visible br.\"\nfunction isBlockStartPoint(node, offset) {\n    return (!node.parentNode && offset == 0)\n        || (0 <= offset - 1\n        && offset - 1 < node.childNodes.length\n        && isVisible(node.childNodes[offset - 1])\n        && (isBlockNode(node.childNodes[offset - 1])\n        || isHtmlElement(node.childNodes[offset - 1], \"br\")));\n}\n\n// \"A boundary point (node, offset) is a block end point if either node's\n// parent is null and offset is node's length; or node has a child with index\n// offset, and that child is a visible block node.\"\nfunction isBlockEndPoint(node, offset) {\n    return (!node.parentNode && offset == getNodeLength(node))\n        || (offset < node.childNodes.length\n        && isVisible(node.childNodes[offset])\n        && isBlockNode(node.childNodes[offset]));\n}\n\n// \"A boundary point is a block boundary point if it is either a block start\n// point or a block end point.\"\nfunction isBlockBoundaryPoint(node, offset) {\n    return isBlockStartPoint(node, offset)\n        || isBlockEndPoint(node, offset);\n}\n\nfunction blockExtend(range) {\n    // \"Let start node, start offset, end node, and end offset be the start\n    // and end nodes and offsets of the range.\"\n    var startNode = range.startContainer;\n    var startOffset = range.startOffset;\n    var endNode = range.endContainer;\n    var endOffset = range.endOffset;\n\n    // \"If some ancestor container of start node is an li, set start offset to\n    // the index of the last such li in tree order, and set start node to that\n    // li's parent.\"\n    var liAncestors = getAncestors(startNode).concat(startNode)\n        .filter(function(ancestor) { return isHtmlElement(ancestor, \"li\") })\n        .slice(-1);\n    if (liAncestors.length) {\n        startOffset = getNodeIndex(liAncestors[0]);\n        startNode = liAncestors[0].parentNode;\n    }\n\n    // \"If (start node, start offset) is not a block start point, repeat the\n    // following steps:\"\n    if (!isBlockStartPoint(startNode, startOffset)) do {\n        // \"If start offset is zero, set it to start node's index, then set\n        // start node to its parent.\"\n        if (startOffset == 0) {\n            startOffset = getNodeIndex(startNode);\n            startNode = startNode.parentNode;\n\n        // \"Otherwise, subtract one from start offset.\"\n        } else {\n            startOffset--;\n        }\n\n        // \"If (start node, start offset) is a block boundary point, break from\n        // this loop.\"\n    } while (!isBlockBoundaryPoint(startNode, startOffset));\n\n    // \"While start offset is zero and start node's parent is not null, set\n    // start offset to start node's index, then set start node to its parent.\"\n    while (startOffset == 0\n    && startNode.parentNode) {\n        startOffset = getNodeIndex(startNode);\n        startNode = startNode.parentNode;\n    }\n\n    // \"If some ancestor container of end node is an li, set end offset to one\n    // plus the index of the last such li in tree order, and set end node to\n    // that li's parent.\"\n    var liAncestors = getAncestors(endNode).concat(endNode)\n        .filter(function(ancestor) { return isHtmlElement(ancestor, \"li\") })\n        .slice(-1);\n    if (liAncestors.length) {\n        endOffset = 1 + getNodeIndex(liAncestors[0]);\n        endNode = liAncestors[0].parentNode;\n    }\n\n    // \"If (end node, end offset) is not a block end point, repeat the\n    // following steps:\"\n    if (!isBlockEndPoint(endNode, endOffset)) do {\n        // \"If end offset is end node's length, set it to one plus end node's\n        // index, then set end node to its parent.\"\n        if (endOffset == getNodeLength(endNode)) {\n            endOffset = 1 + getNodeIndex(endNode);\n            endNode = endNode.parentNode;\n\n        // \"Otherwise, add one to end offset.\n        } else {\n            endOffset++;\n        }\n\n        // \"If (end node, end offset) is a block boundary point, break from\n        // this loop.\"\n    } while (!isBlockBoundaryPoint(endNode, endOffset));\n\n    // \"While end offset is end node's length and end node's parent is not\n    // null, set end offset to one plus end node's index, then set end node to\n    // its parent.\"\n    while (endOffset == getNodeLength(endNode)\n    && endNode.parentNode) {\n        endOffset = 1 + getNodeIndex(endNode);\n        endNode = endNode.parentNode;\n    }\n\n    // \"Let new range be a new range whose start and end nodes and offsets\n    // are start node, start offset, end node, and end offset.\"\n    var newRange = startNode.ownerDocument.createRange();\n    newRange.setStart(startNode, startOffset);\n    newRange.setEnd(endNode, endOffset);\n\n    // \"Return new range.\"\n    return newRange;\n}\n\nfunction followsLineBreak(node) {\n    // \"Let offset be zero.\"\n    var offset = 0;\n\n    // \"While (node, offset) is not a block boundary point:\"\n    while (!isBlockBoundaryPoint(node, offset)) {\n        // \"If node has a visible child with index offset minus one, return\n        // false.\"\n        if (0 <= offset - 1\n        && offset - 1 < node.childNodes.length\n        && isVisible(node.childNodes[offset - 1])) {\n            return false;\n        }\n\n        // \"If offset is zero or node has no children, set offset to node's\n        // index, then set node to its parent.\"\n        if (offset == 0\n        || !node.hasChildNodes()) {\n            offset = getNodeIndex(node);\n            node = node.parentNode;\n\n        // \"Otherwise, set node to its child with index offset minus one, then\n        // set offset to node's length.\"\n        } else {\n            node = node.childNodes[offset - 1];\n            offset = getNodeLength(node);\n        }\n    }\n\n    // \"Return true.\"\n    return true;\n}\n\nfunction precedesLineBreak(node) {\n    // \"Let offset be node's length.\"\n    var offset = getNodeLength(node);\n\n    // \"While (node, offset) is not a block boundary point:\"\n    while (!isBlockBoundaryPoint(node, offset)) {\n        // \"If node has a visible child with index offset, return false.\"\n        if (offset < node.childNodes.length\n        && isVisible(node.childNodes[offset])) {\n            return false;\n        }\n\n        // \"If offset is node's length or node has no children, set offset to\n        // one plus node's index, then set node to its parent.\"\n        if (offset == getNodeLength(node)\n        || !node.hasChildNodes()) {\n            offset = 1 + getNodeIndex(node);\n            node = node.parentNode;\n\n        // \"Otherwise, set node to its child with index offset and set offset\n        // to zero.\"\n        } else {\n            node = node.childNodes[offset];\n            offset = 0;\n        }\n    }\n\n    // \"Return true.\"\n    return true;\n}\n\n//@}\n///// Recording and restoring overrides /////\n//@{\n\nfunction recordCurrentOverrides() {\n    // \"Let overrides be a list of (string, string or boolean) ordered pairs,\n    // initially empty.\"\n    var overrides = [];\n\n    // \"If there is a value override for \"createLink\", add (\"createLink\", value\n    // override for \"createLink\") to overrides.\"\n    if (getValueOverride(\"createlink\") !== undefined) {\n        overrides.push([\"createlink\", getValueOverride(\"createlink\")]);\n    }\n\n    // \"For each command in the list \"bold\", \"italic\", \"strikethrough\",\n    // \"subscript\", \"superscript\", \"underline\", in order: if there is a state\n    // override for command, add (command, command's state override) to\n    // overrides.\"\n    [\"bold\", \"italic\", \"strikethrough\", \"subscript\", \"superscript\",\n    \"underline\"].forEach(function(command) {\n        if (getStateOverride(command) !== undefined) {\n            overrides.push([command, getStateOverride(command)]);\n        }\n    });\n\n    // \"For each command in the list \"fontName\", \"fontSize\", \"foreColor\",\n    // \"hiliteColor\", in order: if there is a value override for command, add\n    // (command, command's value override) to overrides.\"\n    [\"fontname\", \"fontsize\", \"forecolor\",\n    \"hilitecolor\"].forEach(function(command) {\n        if (getValueOverride(command) !== undefined) {\n            overrides.push([command, getValueOverride(command)]);\n        }\n    });\n\n    // \"Return overrides.\"\n    return overrides;\n}\n\nfunction recordCurrentStatesAndValues() {\n    // \"Let overrides be a list of (string, string or boolean) ordered pairs,\n    // initially empty.\"\n    var overrides = [];\n\n    // \"Let node be the first formattable node effectively contained in the\n    // active range, or null if there is none.\"\n    var node = getAllEffectivelyContainedNodes(getActiveRange())\n        .filter(isFormattableNode)[0];\n\n    // \"If node is null, return overrides.\"\n    if (!node) {\n        return overrides;\n    }\n\n    // \"Add (\"createLink\", node's effective command value for \"createLink\") to\n    // overrides.\"\n    overrides.push([\"createlink\", getEffectiveCommandValue(node, \"createlink\")]);\n\n    // \"For each command in the list \"bold\", \"italic\", \"strikethrough\",\n    // \"subscript\", \"superscript\", \"underline\", in order: if node's effective\n    // command value for command is one of its inline command activated values,\n    // add (command, true) to overrides, and otherwise add (command, false) to\n    // overrides.\"\n    [\"bold\", \"italic\", \"strikethrough\", \"subscript\", \"superscript\",\n    \"underline\"].forEach(function(command) {\n        if (commands[command].inlineCommandActivatedValues\n        .indexOf(getEffectiveCommandValue(node, command)) != -1) {\n            overrides.push([command, true]);\n        } else {\n            overrides.push([command, false]);\n        }\n    });\n\n    // \"For each command in the list \"fontName\", \"foreColor\", \"hiliteColor\", in\n    // order: add (command, command's value) to overrides.\"\n    [\"fontname\", \"fontsize\", \"forecolor\", \"hilitecolor\"].forEach(function(command) {\n        overrides.push([command, commands[command].value()]);\n    });\n\n    // \"Add (\"fontSize\", node's effective command value for \"fontSize\") to\n    // overrides.\"\n    overrides.push([\"fontsize\", getEffectiveCommandValue(node, \"fontsize\")]);\n\n    // \"Return overrides.\"\n    return overrides;\n}\n\nfunction restoreStatesAndValues(overrides) {\n    // \"Let node be the first formattable node effectively contained in the\n    // active range, or null if there is none.\"\n    var node = getAllEffectivelyContainedNodes(getActiveRange())\n        .filter(isFormattableNode)[0];\n\n    // \"If node is not null, then for each (command, override) pair in\n    // overrides, in order:\"\n    if (node) {\n        for (var i = 0; i < overrides.length; i++) {\n            var command = overrides[i][0];\n            var override = overrides[i][1];\n\n            // \"If override is a boolean, and queryCommandState(command)\n            // returns something different from override, take the action for\n            // command, with value equal to the empty string.\"\n            if (typeof override == \"boolean\"\n            && myQueryCommandState(command) != override) {\n                commands[command].action(\"\");\n\n            // \"Otherwise, if override is a string, and command is neither\n            // \"createLink\" nor \"fontSize\", and queryCommandValue(command)\n            // returns something not equivalent to override, take the action\n            // for command, with value equal to override.\"\n            } else if (typeof override == \"string\"\n            && command != \"createlink\"\n            && command != \"fontsize\"\n            && !areEquivalentValues(command, myQueryCommandValue(command), override)) {\n                commands[command].action(override);\n\n            // \"Otherwise, if override is a string; and command is\n            // \"createLink\"; and either there is a value override for\n            // \"createLink\" that is not equal to override, or there is no value\n            // override for \"createLink\" and node's effective command value for\n            // \"createLink\" is not equal to override: take the action for\n            // \"createLink\", with value equal to override.\"\n            } else if (typeof override == \"string\"\n            && command == \"createlink\"\n            && (\n                (\n                    getValueOverride(\"createlink\") !== undefined\n                    && getValueOverride(\"createlink\") !== override\n                ) || (\n                    getValueOverride(\"createlink\") === undefined\n                    && getEffectiveCommandValue(node, \"createlink\") !== override\n                )\n            )) {\n                commands.createlink.action(override);\n\n            // \"Otherwise, if override is a string; and command is \"fontSize\";\n            // and either there is a value override for \"fontSize\" that is not\n            // equal to override, or there is no value override for \"fontSize\"\n            // and node's effective command value for \"fontSize\" is not loosely\n            // equivalent to override:\"\n            } else if (typeof override == \"string\"\n            && command == \"fontsize\"\n            && (\n                (\n                    getValueOverride(\"fontsize\") !== undefined\n                    && getValueOverride(\"fontsize\") !== override\n                ) || (\n                    getValueOverride(\"fontsize\") === undefined\n                    && !areLooselyEquivalentValues(command, getEffectiveCommandValue(node, \"fontsize\"), override)\n                )\n            )) {\n                // \"Convert override to an integer number of pixels, and set\n                // override to the legacy font size for the result.\"\n                override = getLegacyFontSize(override);\n\n                // \"Take the action for \"fontSize\", with value equal to\n                // override.\"\n                commands.fontsize.action(override);\n\n            // \"Otherwise, continue this loop from the beginning.\"\n            } else {\n                continue;\n            }\n\n            // \"Set node to the first formattable node effectively contained in\n            // the active range, if there is one.\"\n            node = getAllEffectivelyContainedNodes(getActiveRange())\n                .filter(isFormattableNode)[0]\n                || node;\n        }\n\n    // \"Otherwise, for each (command, override) pair in overrides, in order:\"\n    } else {\n        for (var i = 0; i < overrides.length; i++) {\n            var command = overrides[i][0];\n            var override = overrides[i][1];\n\n            // \"If override is a boolean, set the state override for command to\n            // override.\"\n            if (typeof override == \"boolean\") {\n                setStateOverride(command, override);\n            }\n\n            // \"If override is a string, set the value override for command to\n            // override.\"\n            if (typeof override == \"string\") {\n                setValueOverride(command, override);\n            }\n        }\n    }\n}\n\n//@}\n///// Deleting the selection /////\n//@{\n\n// The flags argument is a dictionary that can have blockMerging,\n// stripWrappers, and/or direction as keys.\nfunction deleteSelection(flags) {\n    if (flags === undefined) {\n        flags = {};\n    }\n\n    var blockMerging = \"blockMerging\" in flags ? Boolean(flags.blockMerging) : true;\n    var stripWrappers = \"stripWrappers\" in flags ? Boolean(flags.stripWrappers) : true;\n    var direction = \"direction\" in flags ? flags.direction : \"forward\";\n\n    // \"If the active range is null, abort these steps and do nothing.\"\n    if (!getActiveRange()) {\n        return;\n    }\n\n    // \"Canonicalize whitespace at the active range's start.\"\n    canonicalizeWhitespace(getActiveRange().startContainer, getActiveRange().startOffset);\n\n    // \"Canonicalize whitespace at the active range's end.\"\n    canonicalizeWhitespace(getActiveRange().endContainer, getActiveRange().endOffset);\n\n    // \"Let (start node, start offset) be the last equivalent point for the\n    // active range's start.\"\n    var start = getLastEquivalentPoint(getActiveRange().startContainer, getActiveRange().startOffset);\n    var startNode = start[0];\n    var startOffset = start[1];\n\n    // \"Let (end node, end offset) be the first equivalent point for the active\n    // range's end.\"\n    var end = getFirstEquivalentPoint(getActiveRange().endContainer, getActiveRange().endOffset);\n    var endNode = end[0];\n    var endOffset = end[1];\n\n    // \"If (end node, end offset) is not after (start node, start offset):\"\n    if (getPosition(endNode, endOffset, startNode, startOffset) !== \"after\") {\n        // \"If direction is \"forward\", call collapseToStart() on the context\n        // object's Selection.\"\n        //\n        // Here and in a few other places, we check rangeCount to work around a\n        // WebKit bug: it will sometimes incorrectly remove ranges from the\n        // selection if nodes are removed, so collapseToStart() will throw.\n        // This will break everything if we're using an actual selection, but\n        // if getActiveRange() is really just returning globalRange and that's\n        // all we care about, it will work fine.  I only add the extra check\n        // for errors I actually hit in testing.\n        if (direction == \"forward\") {\n            if (getSelection().rangeCount) {\n                getSelection().collapseToStart();\n            }\n            getActiveRange().collapse(true);\n\n        // \"Otherwise, call collapseToEnd() on the context object's Selection.\"\n        } else {\n            getSelection().collapseToEnd();\n            getActiveRange().collapse(false);\n        }\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If start node is a Text node and start offset is 0, set start offset to\n    // the index of start node, then set start node to its parent.\"\n    if (startNode.nodeType == Node.TEXT_NODE\n    && startOffset == 0) {\n        startOffset = getNodeIndex(startNode);\n        startNode = startNode.parentNode;\n    }\n\n    // \"If end node is a Text node and end offset is its length, set end offset\n    // to one plus the index of end node, then set end node to its parent.\"\n    if (endNode.nodeType == Node.TEXT_NODE\n    && endOffset == getNodeLength(endNode)) {\n        endOffset = 1 + getNodeIndex(endNode);\n        endNode = endNode.parentNode;\n    }\n\n    // \"Call collapse(start node, start offset) on the context object's\n    // Selection.\"\n    getSelection().collapse(startNode, startOffset);\n    getActiveRange().setStart(startNode, startOffset);\n\n    // \"Call extend(end node, end offset) on the context object's Selection.\"\n    getSelection().extend(endNode, endOffset);\n    getActiveRange().setEnd(endNode, endOffset);\n\n    // \"Let start block be the active range's start node.\"\n    var startBlock = getActiveRange().startContainer;\n\n    // \"While start block's parent is in the same editing host and start block\n    // is an inline node, set start block to its parent.\"\n    while (inSameEditingHost(startBlock, startBlock.parentNode)\n    && isInlineNode(startBlock)) {\n        startBlock = startBlock.parentNode;\n    }\n\n    // \"If start block is neither a block node nor an editing host, or \"span\"\n    // is not an allowed child of start block, or start block is a td or th,\n    // set start block to null.\"\n    if ((!isBlockNode(startBlock) && !isEditingHost(startBlock))\n    || !isAllowedChild(\"span\", startBlock)\n    || isHtmlElement(startBlock, [\"td\", \"th\"])) {\n        startBlock = null;\n    }\n\n    // \"Let end block be the active range's end node.\"\n    var endBlock = getActiveRange().endContainer;\n\n    // \"While end block's parent is in the same editing host and end block is\n    // an inline node, set end block to its parent.\"\n    while (inSameEditingHost(endBlock, endBlock.parentNode)\n    && isInlineNode(endBlock)) {\n        endBlock = endBlock.parentNode;\n    }\n\n    // \"If end block is neither a block node nor an editing host, or \"span\" is\n    // not an allowed child of end block, or end block is a td or th, set end\n    // block to null.\"\n    if ((!isBlockNode(endBlock) && !isEditingHost(endBlock))\n    || !isAllowedChild(\"span\", endBlock)\n    || isHtmlElement(endBlock, [\"td\", \"th\"])) {\n        endBlock = null;\n    }\n\n    // \"Record current states and values, and let overrides be the result.\"\n    var overrides = recordCurrentStatesAndValues();\n\n    // \"If start node and end node are the same, and start node is an editable\n    // Text node:\"\n    if (startNode == endNode\n    && isEditable(startNode)\n    && startNode.nodeType == Node.TEXT_NODE) {\n        // \"Call deleteData(start offset, end offset â start offset) on start\n        // node.\"\n        startNode.deleteData(startOffset, endOffset - startOffset);\n\n        // \"Canonicalize whitespace at (start node, start offset), with fix\n        // collapsed space false.\"\n        canonicalizeWhitespace(startNode, startOffset, false);\n\n        // \"If direction is \"forward\", call collapseToStart() on the context\n        // object's Selection.\"\n        if (direction == \"forward\") {\n            if (getSelection().rangeCount) {\n                getSelection().collapseToStart();\n            }\n            getActiveRange().collapse(true);\n\n        // \"Otherwise, call collapseToEnd() on the context object's Selection.\"\n        } else {\n            getSelection().collapseToEnd();\n            getActiveRange().collapse(false);\n        }\n\n        // \"Restore states and values from overrides.\"\n        restoreStatesAndValues(overrides);\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If start node is an editable Text node, call deleteData() on it, with\n    // start offset as the first argument and (length of start node â start\n    // offset) as the second argument.\"\n    if (isEditable(startNode)\n    && startNode.nodeType == Node.TEXT_NODE) {\n        startNode.deleteData(startOffset, getNodeLength(startNode) - startOffset);\n    }\n\n    // \"Let node list be a list of nodes, initially empty.\"\n    //\n    // \"For each node contained in the active range, append node to node list\n    // if the last member of node list (if any) is not an ancestor of node;\n    // node is editable; and node is not a thead, tbody, tfoot, tr, th, or td.\"\n    var nodeList = getContainedNodes(getActiveRange(),\n        function(node) {\n            return isEditable(node)\n                && !isHtmlElement(node, [\"thead\", \"tbody\", \"tfoot\", \"tr\", \"th\", \"td\"]);\n        }\n    );\n\n    // \"For each node in node list:\"\n    for (var i = 0; i < nodeList.length; i++) {\n        var node = nodeList[i];\n\n        // \"Let parent be the parent of node.\"\n        var parent_ = node.parentNode;\n\n        // \"Remove node from parent.\"\n        parent_.removeChild(node);\n\n        // \"If the block node of parent has no visible children, and parent is\n        // editable or an editing host, call createElement(\"br\") on the context\n        // object and append the result as the last child of parent.\"\n        if (![].some.call(getBlockNodeOf(parent_).childNodes, isVisible)\n        && (isEditable(parent_) || isEditingHost(parent_))) {\n            parent_.appendChild(document.createElement(\"br\"));\n        }\n\n        // \"If strip wrappers is true or parent is not an ancestor container of\n        // start node, while parent is an editable inline node with length 0,\n        // let grandparent be the parent of parent, then remove parent from\n        // grandparent, then set parent to grandparent.\"\n        if (stripWrappers\n        || (!isAncestor(parent_, startNode) && parent_ != startNode)) {\n            while (isEditable(parent_)\n            && isInlineNode(parent_)\n            && getNodeLength(parent_) == 0) {\n                var grandparent = parent_.parentNode;\n                grandparent.removeChild(parent_);\n                parent_ = grandparent;\n            }\n        }\n    }\n\n    // \"If end node is an editable Text node, call deleteData(0, end offset) on\n    // it.\"\n    if (isEditable(endNode)\n    && endNode.nodeType == Node.TEXT_NODE) {\n        endNode.deleteData(0, endOffset);\n    }\n\n    // \"Canonicalize whitespace at the active range's start, with fix collapsed\n    // space false.\"\n    canonicalizeWhitespace(getActiveRange().startContainer, getActiveRange().startOffset, false);\n\n    // \"Canonicalize whitespace at the active range's end, with fix collapsed\n    // space false.\"\n    canonicalizeWhitespace(getActiveRange().endContainer, getActiveRange().endOffset, false);\n\n    // \"If block merging is false, or start block or end block is null, or\n    // start block is not in the same editing host as end block, or start block\n    // and end block are the same:\"\n    if (!blockMerging\n    || !startBlock\n    || !endBlock\n    || !inSameEditingHost(startBlock, endBlock)\n    || startBlock == endBlock) {\n        // \"If direction is \"forward\", call collapseToStart() on the context\n        // object's Selection.\"\n        if (direction == \"forward\") {\n            if (getSelection().rangeCount) {\n                getSelection().collapseToStart();\n            }\n            getActiveRange().collapse(true);\n\n        // \"Otherwise, call collapseToEnd() on the context object's Selection.\"\n        } else {\n            if (getSelection().rangeCount) {\n                getSelection().collapseToEnd();\n            }\n            getActiveRange().collapse(false);\n        }\n\n        // \"Restore states and values from overrides.\"\n        restoreStatesAndValues(overrides);\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If start block has one child, which is a collapsed block prop, remove\n    // its child from it.\"\n    if (startBlock.children.length == 1\n    && isCollapsedBlockProp(startBlock.firstChild)) {\n        startBlock.removeChild(startBlock.firstChild);\n    }\n\n    // \"If start block is an ancestor of end block:\"\n    if (isAncestor(startBlock, endBlock)) {\n        // \"Let reference node be end block.\"\n        var referenceNode = endBlock;\n\n        // \"While reference node is not a child of start block, set reference\n        // node to its parent.\"\n        while (referenceNode.parentNode != startBlock) {\n            referenceNode = referenceNode.parentNode;\n        }\n\n        // \"Call collapse() on the context object's Selection, with first\n        // argument start block and second argument the index of reference\n        // node.\"\n        getSelection().collapse(startBlock, getNodeIndex(referenceNode));\n        getActiveRange().setStart(startBlock, getNodeIndex(referenceNode));\n        getActiveRange().collapse(true);\n\n        // \"If end block has no children:\"\n        if (!endBlock.hasChildNodes()) {\n            // \"While end block is editable and is the only child of its parent\n            // and is not a child of start block, let parent equal end block,\n            // then remove end block from parent, then set end block to\n            // parent.\"\n            while (isEditable(endBlock)\n            && endBlock.parentNode.childNodes.length == 1\n            && endBlock.parentNode != startBlock) {\n                var parent_ = endBlock;\n                parent_.removeChild(endBlock);\n                endBlock = parent_;\n            }\n\n            // \"If end block is editable and is not an inline node, and its\n            // previousSibling and nextSibling are both inline nodes, call\n            // createElement(\"br\") on the context object and insert it into end\n            // block's parent immediately after end block.\"\n            if (isEditable(endBlock)\n            && !isInlineNode(endBlock)\n            && isInlineNode(endBlock.previousSibling)\n            && isInlineNode(endBlock.nextSibling)) {\n                endBlock.parentNode.insertBefore(document.createElement(\"br\"), endBlock.nextSibling);\n            }\n\n            // \"If end block is editable, remove it from its parent.\"\n            if (isEditable(endBlock)) {\n                endBlock.parentNode.removeChild(endBlock);\n            }\n\n            // \"Restore states and values from overrides.\"\n            restoreStatesAndValues(overrides);\n\n            // \"Abort these steps.\"\n            return;\n        }\n\n        // \"If end block's firstChild is not an inline node, restore states and\n        // values from overrides, then abort these steps.\"\n        if (!isInlineNode(endBlock.firstChild)) {\n            restoreStatesAndValues(overrides);\n            return;\n        }\n\n        // \"Let children be a list of nodes, initially empty.\"\n        var children = [];\n\n        // \"Append the first child of end block to children.\"\n        children.push(endBlock.firstChild);\n\n        // \"While children's last member is not a br, and children's last\n        // member's nextSibling is an inline node, append children's last\n        // member's nextSibling to children.\"\n        while (!isHtmlElement(children[children.length - 1], \"br\")\n        && isInlineNode(children[children.length - 1].nextSibling)) {\n            children.push(children[children.length - 1].nextSibling);\n        }\n\n        // \"Record the values of children, and let values be the result.\"\n        var values = recordValues(children);\n\n        // \"While children's first member's parent is not start block, split\n        // the parent of children.\"\n        while (children[0].parentNode != startBlock) {\n            splitParent(children);\n        }\n\n        // \"If children's first member's previousSibling is an editable br,\n        // remove that br from its parent.\"\n        if (isEditable(children[0].previousSibling)\n        && isHtmlElement(children[0].previousSibling, \"br\")) {\n            children[0].parentNode.removeChild(children[0].previousSibling);\n        }\n\n    // \"Otherwise, if start block is a descendant of end block:\"\n    } else if (isDescendant(startBlock, endBlock)) {\n        // \"Call collapse() on the context object's Selection, with first\n        // argument start block and second argument start block's length.\"\n        getSelection().collapse(startBlock, getNodeLength(startBlock));\n        getActiveRange().setStart(startBlock, getNodeLength(startBlock));\n        getActiveRange().collapse(true);\n\n        // \"Let reference node be start block.\"\n        var referenceNode = startBlock;\n\n        // \"While reference node is not a child of end block, set reference\n        // node to its parent.\"\n        while (referenceNode.parentNode != endBlock) {\n            referenceNode = referenceNode.parentNode;\n        }\n\n        // \"If reference node's nextSibling is an inline node and start block's\n        // lastChild is a br, remove start block's lastChild from it.\"\n        if (isInlineNode(referenceNode.nextSibling)\n        && isHtmlElement(startBlock.lastChild, \"br\")) {\n            startBlock.removeChild(startBlock.lastChild);\n        }\n\n        // \"Let nodes to move be a list of nodes, initially empty.\"\n        var nodesToMove = [];\n\n        // \"If reference node's nextSibling is neither null nor a block node,\n        // append it to nodes to move.\"\n        if (referenceNode.nextSibling\n        && !isBlockNode(referenceNode.nextSibling)) {\n            nodesToMove.push(referenceNode.nextSibling);\n        }\n\n        // \"While nodes to move is nonempty and its last member isn't a br and\n        // its last member's nextSibling is neither null nor a block node,\n        // append its last member's nextSibling to nodes to move.\"\n        if (nodesToMove.length\n        && !isHtmlElement(nodesToMove[nodesToMove.length - 1], \"br\")\n        && nodesToMove[nodesToMove.length - 1].nextSibling\n        && !isBlockNode(nodesToMove[nodesToMove.length - 1].nextSibling)) {\n            nodesToMove.push(nodesToMove[nodesToMove.length - 1].nextSibling);\n        }\n\n        // \"Record the values of nodes to move, and let values be the result.\"\n        var values = recordValues(nodesToMove);\n\n        // \"For each node in nodes to move, append node as the last child of\n        // start block, preserving ranges.\"\n        nodesToMove.forEach(function(node) {\n            movePreservingRanges(node, startBlock, -1);\n        });\n\n    // \"Otherwise:\"\n    } else {\n        // \"Call collapse() on the context object's Selection, with first\n        // argument start block and second argument start block's length.\"\n        getSelection().collapse(startBlock, getNodeLength(startBlock));\n        getActiveRange().setStart(startBlock, getNodeLength(startBlock));\n        getActiveRange().collapse(true);\n\n        // \"If end block's firstChild is an inline node and start block's\n        // lastChild is a br, remove start block's lastChild from it.\"\n        if (isInlineNode(endBlock.firstChild)\n        && isHtmlElement(startBlock.lastChild, \"br\")) {\n            startBlock.removeChild(startBlock.lastChild);\n        }\n\n        // \"Record the values of end block's children, and let values be the\n        // result.\"\n        var values = recordValues([].slice.call(endBlock.childNodes));\n\n        // \"While end block has children, append the first child of end block\n        // to start block, preserving ranges.\"\n        while (endBlock.hasChildNodes()) {\n            movePreservingRanges(endBlock.firstChild, startBlock, -1);\n        }\n\n        // \"While end block has no children, let parent be the parent of end\n        // block, then remove end block from parent, then set end block to\n        // parent.\"\n        while (!endBlock.hasChildNodes()) {\n            var parent_ = endBlock.parentNode;\n            parent_.removeChild(endBlock);\n            endBlock = parent_;\n        }\n    }\n\n    // \"Let ancestor be start block.\"\n    var ancestor = startBlock;\n\n    // \"While ancestor has an inclusive ancestor ol in the same editing host\n    // whose nextSibling is also an ol in the same editing host, or an\n    // inclusive ancestor ul in the same editing host whose nextSibling is also\n    // a ul in the same editing host:\"\n    while (getInclusiveAncestors(ancestor).some(function(node) {\n        return inSameEditingHost(ancestor, node)\n            && (\n                (isHtmlElement(node, \"ol\") && isHtmlElement(node.nextSibling, \"ol\"))\n                || (isHtmlElement(node, \"ul\") && isHtmlElement(node.nextSibling, \"ul\"))\n            ) && inSameEditingHost(ancestor, node.nextSibling);\n    })) {\n        // \"While ancestor and its nextSibling are not both ols in the same\n        // editing host, and are also not both uls in the same editing host,\n        // set ancestor to its parent.\"\n        while (!(\n            isHtmlElement(ancestor, \"ol\")\n            && isHtmlElement(ancestor.nextSibling, \"ol\")\n            && inSameEditingHost(ancestor, ancestor.nextSibling)\n        ) && !(\n            isHtmlElement(ancestor, \"ul\")\n            && isHtmlElement(ancestor.nextSibling, \"ul\")\n            && inSameEditingHost(ancestor, ancestor.nextSibling)\n        )) {\n            ancestor = ancestor.parentNode;\n        }\n\n        // \"While ancestor's nextSibling has children, append ancestor's\n        // nextSibling's firstChild as the last child of ancestor, preserving\n        // ranges.\"\n        while (ancestor.nextSibling.hasChildNodes()) {\n            movePreservingRanges(ancestor.nextSibling.firstChild, ancestor, -1);\n        }\n\n        // \"Remove ancestor's nextSibling from its parent.\"\n        ancestor.parentNode.removeChild(ancestor.nextSibling);\n    }\n\n    // \"Restore the values from values.\"\n    restoreValues(values);\n\n    // \"If start block has no children, call createElement(\"br\") on the context\n    // object and append the result as the last child of start block.\"\n    if (!startBlock.hasChildNodes()) {\n        startBlock.appendChild(document.createElement(\"br\"));\n    }\n\n    // \"Remove extraneous line breaks at the end of start block.\"\n    removeExtraneousLineBreaksAtTheEndOf(startBlock);\n\n    // \"Restore states and values from overrides.\"\n    restoreStatesAndValues(overrides);\n}\n\n\n//@}\n///// Splitting a node list's parent /////\n//@{\n\nfunction splitParent(nodeList) {\n    // \"Let original parent be the parent of the first member of node list.\"\n    var originalParent = nodeList[0].parentNode;\n\n    // \"If original parent is not editable or its parent is null, do nothing\n    // and abort these steps.\"\n    if (!isEditable(originalParent)\n    || !originalParent.parentNode) {\n        return;\n    }\n\n    // \"If the first child of original parent is in node list, remove\n    // extraneous line breaks before original parent.\"\n    if (nodeList.indexOf(originalParent.firstChild) != -1) {\n        removeExtraneousLineBreaksBefore(originalParent);\n    }\n\n    // \"If the first child of original parent is in node list, and original\n    // parent follows a line break, set follows line break to true. Otherwise,\n    // set follows line break to false.\"\n    var followsLineBreak_ = nodeList.indexOf(originalParent.firstChild) != -1\n        && followsLineBreak(originalParent);\n\n    // \"If the last child of original parent is in node list, and original\n    // parent precedes a line break, set precedes line break to true.\n    // Otherwise, set precedes line break to false.\"\n    var precedesLineBreak_ = nodeList.indexOf(originalParent.lastChild) != -1\n        && precedesLineBreak(originalParent);\n\n    // \"If the first child of original parent is not in node list, but its last\n    // child is:\"\n    if (nodeList.indexOf(originalParent.firstChild) == -1\n    && nodeList.indexOf(originalParent.lastChild) != -1) {\n        // \"For each node in node list, in reverse order, insert node into the\n        // parent of original parent immediately after original parent,\n        // preserving ranges.\"\n        for (var i = nodeList.length - 1; i >= 0; i--) {\n            movePreservingRanges(nodeList[i], originalParent.parentNode, 1 + getNodeIndex(originalParent));\n        }\n\n        // \"If precedes line break is true, and the last member of node list\n        // does not precede a line break, call createElement(\"br\") on the\n        // context object and insert the result immediately after the last\n        // member of node list.\"\n        if (precedesLineBreak_\n        && !precedesLineBreak(nodeList[nodeList.length - 1])) {\n            nodeList[nodeList.length - 1].parentNode.insertBefore(document.createElement(\"br\"), nodeList[nodeList.length - 1].nextSibling);\n        }\n\n        // \"Remove extraneous line breaks at the end of original parent.\"\n        removeExtraneousLineBreaksAtTheEndOf(originalParent);\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If the first child of original parent is not in node list:\"\n    if (nodeList.indexOf(originalParent.firstChild) == -1) {\n        // \"Let cloned parent be the result of calling cloneNode(false) on\n        // original parent.\"\n        var clonedParent = originalParent.cloneNode(false);\n\n        // \"If original parent has an id attribute, unset it.\"\n        originalParent.removeAttribute(\"id\");\n\n        // \"Insert cloned parent into the parent of original parent immediately\n        // before original parent.\"\n        originalParent.parentNode.insertBefore(clonedParent, originalParent);\n\n        // \"While the previousSibling of the first member of node list is not\n        // null, append the first child of original parent as the last child of\n        // cloned parent, preserving ranges.\"\n        while (nodeList[0].previousSibling) {\n            movePreservingRanges(originalParent.firstChild, clonedParent, clonedParent.childNodes.length);\n        }\n    }\n\n    // \"For each node in node list, insert node into the parent of original\n    // parent immediately before original parent, preserving ranges.\"\n    for (var i = 0; i < nodeList.length; i++) {\n        movePreservingRanges(nodeList[i], originalParent.parentNode, getNodeIndex(originalParent));\n    }\n\n    // \"If follows line break is true, and the first member of node list does\n    // not follow a line break, call createElement(\"br\") on the context object\n    // and insert the result immediately before the first member of node list.\"\n    if (followsLineBreak_\n    && !followsLineBreak(nodeList[0])) {\n        nodeList[0].parentNode.insertBefore(document.createElement(\"br\"), nodeList[0]);\n    }\n\n    // \"If the last member of node list is an inline node other than a br, and\n    // the first child of original parent is a br, and original parent is not\n    // an inline node, remove the first child of original parent from original\n    // parent.\"\n    if (isInlineNode(nodeList[nodeList.length - 1])\n    && !isHtmlElement(nodeList[nodeList.length - 1], \"br\")\n    && isHtmlElement(originalParent.firstChild, \"br\")\n    && !isInlineNode(originalParent)) {\n        originalParent.removeChild(originalParent.firstChild);\n    }\n\n    // \"If original parent has no children:\"\n    if (!originalParent.hasChildNodes()) {\n        // \"Remove original parent from its parent.\"\n        originalParent.parentNode.removeChild(originalParent);\n\n        // \"If precedes line break is true, and the last member of node list\n        // does not precede a line break, call createElement(\"br\") on the\n        // context object and insert the result immediately after the last\n        // member of node list.\"\n        if (precedesLineBreak_\n        && !precedesLineBreak(nodeList[nodeList.length - 1])) {\n            nodeList[nodeList.length - 1].parentNode.insertBefore(document.createElement(\"br\"), nodeList[nodeList.length - 1].nextSibling);\n        }\n\n    // \"Otherwise, remove extraneous line breaks before original parent.\"\n    } else {\n        removeExtraneousLineBreaksBefore(originalParent);\n    }\n\n    // \"If node list's last member's nextSibling is null, but its parent is not\n    // null, remove extraneous line breaks at the end of node list's last\n    // member's parent.\"\n    if (!nodeList[nodeList.length - 1].nextSibling\n    && nodeList[nodeList.length - 1].parentNode) {\n        removeExtraneousLineBreaksAtTheEndOf(nodeList[nodeList.length - 1].parentNode);\n    }\n}\n\n// \"To remove a node node while preserving its descendants, split the parent of\n// node's children if it has any. If it has no children, instead remove it from\n// its parent.\"\nfunction removePreservingDescendants(node) {\n    if (node.hasChildNodes()) {\n        splitParent([].slice.call(node.childNodes));\n    } else {\n        node.parentNode.removeChild(node);\n    }\n}\n\n\n//@}\n///// Canonical space sequences /////\n//@{\n\nfunction canonicalSpaceSequence(n, nonBreakingStart, nonBreakingEnd) {\n    // \"If n is zero, return the empty string.\"\n    if (n == 0) {\n        return \"\";\n    }\n\n    // \"If n is one and both non-breaking start and non-breaking end are false,\n    // return a single space (U+0020).\"\n    if (n == 1 && !nonBreakingStart && !nonBreakingEnd) {\n        return \" \";\n    }\n\n    // \"If n is one, return a single non-breaking space (U+00A0).\"\n    if (n == 1) {\n        return \"\\xa0\";\n    }\n\n    // \"Let buffer be the empty string.\"\n    var buffer = \"\";\n\n    // \"If non-breaking start is true, let repeated pair be U+00A0 U+0020.\n    // Otherwise, let it be U+0020 U+00A0.\"\n    var repeatedPair;\n    if (nonBreakingStart) {\n        repeatedPair = \"\\xa0 \";\n    } else {\n        repeatedPair = \" \\xa0\";\n    }\n\n    // \"While n is greater than three, append repeated pair to buffer and\n    // subtract two from n.\"\n    while (n > 3) {\n        buffer += repeatedPair;\n        n -= 2;\n    }\n\n    // \"If n is three, append a three-element string to buffer depending on\n    // non-breaking start and non-breaking end:\"\n    if (n == 3) {\n        buffer +=\n            !nonBreakingStart && !nonBreakingEnd ? \" \\xa0 \"\n            : nonBreakingStart && !nonBreakingEnd ? \"\\xa0\\xa0 \"\n            : !nonBreakingStart && nonBreakingEnd ? \" \\xa0\\xa0\"\n            : nonBreakingStart && nonBreakingEnd ? \"\\xa0 \\xa0\"\n            : \"impossible\";\n\n    // \"Otherwise, append a two-element string to buffer depending on\n    // non-breaking start and non-breaking end:\"\n    } else {\n        buffer +=\n            !nonBreakingStart && !nonBreakingEnd ? \"\\xa0 \"\n            : nonBreakingStart && !nonBreakingEnd ? \"\\xa0 \"\n            : !nonBreakingStart && nonBreakingEnd ? \" \\xa0\"\n            : nonBreakingStart && nonBreakingEnd ? \"\\xa0\\xa0\"\n            : \"impossible\";\n    }\n\n    // \"Return buffer.\"\n    return buffer;\n}\n\nfunction canonicalizeWhitespace(node, offset, fixCollapsedSpace) {\n    if (fixCollapsedSpace === undefined) {\n        // \"an optional boolean argument fix collapsed space that defaults to\n        // true\"\n        fixCollapsedSpace = true;\n    }\n\n    // \"If node is neither editable nor an editing host, abort these steps.\"\n    if (!isEditable(node) && !isEditingHost(node)) {\n        return;\n    }\n\n    // \"Let start node equal node and let start offset equal offset.\"\n    var startNode = node;\n    var startOffset = offset;\n\n    // \"Repeat the following steps:\"\n    while (true) {\n        // \"If start node has a child in the same editing host with index start\n        // offset minus one, set start node to that child, then set start\n        // offset to start node's length.\"\n        if (0 <= startOffset - 1\n        && inSameEditingHost(startNode, startNode.childNodes[startOffset - 1])) {\n            startNode = startNode.childNodes[startOffset - 1];\n            startOffset = getNodeLength(startNode);\n\n        // \"Otherwise, if start offset is zero and start node does not follow a\n        // line break and start node's parent is in the same editing host, set\n        // start offset to start node's index, then set start node to its\n        // parent.\"\n        } else if (startOffset == 0\n        && !followsLineBreak(startNode)\n        && inSameEditingHost(startNode, startNode.parentNode)) {\n            startOffset = getNodeIndex(startNode);\n            startNode = startNode.parentNode;\n\n        // \"Otherwise, if start node is a Text node and its parent's resolved\n        // value for \"white-space\" is neither \"pre\" nor \"pre-wrap\" and start\n        // offset is not zero and the (start offset â 1)st element of start\n        // node's data is a space (0x0020) or non-breaking space (0x00A0),\n        // subtract one from start offset.\"\n        } else if (startNode.nodeType == Node.TEXT_NODE\n        && [\"pre\", \"pre-wrap\"].indexOf(getComputedStyle(startNode.parentNode).whiteSpace) == -1\n        && startOffset != 0\n        && /[ \\xa0]/.test(startNode.data[startOffset - 1])) {\n            startOffset--;\n\n        // \"Otherwise, break from this loop.\"\n        } else {\n            break;\n        }\n    }\n\n    // \"Let end node equal start node and end offset equal start offset.\"\n    var endNode = startNode;\n    var endOffset = startOffset;\n\n    // \"Let length equal zero.\"\n    var length = 0;\n\n    // \"Let collapse spaces be true if start offset is zero and start node\n    // follows a line break, otherwise false.\"\n    var collapseSpaces = startOffset == 0 && followsLineBreak(startNode);\n\n    // \"Repeat the following steps:\"\n    while (true) {\n        // \"If end node has a child in the same editing host with index end\n        // offset, set end node to that child, then set end offset to zero.\"\n        if (endOffset < endNode.childNodes.length\n        && inSameEditingHost(endNode, endNode.childNodes[endOffset])) {\n            endNode = endNode.childNodes[endOffset];\n            endOffset = 0;\n\n        // \"Otherwise, if end offset is end node's length and end node does not\n        // precede a line break and end node's parent is in the same editing\n        // host, set end offset to one plus end node's index, then set end node\n        // to its parent.\"\n        } else if (endOffset == getNodeLength(endNode)\n        && !precedesLineBreak(endNode)\n        && inSameEditingHost(endNode, endNode.parentNode)) {\n            endOffset = 1 + getNodeIndex(endNode);\n            endNode = endNode.parentNode;\n\n        // \"Otherwise, if end node is a Text node and its parent's resolved\n        // value for \"white-space\" is neither \"pre\" nor \"pre-wrap\" and end\n        // offset is not end node's length and the end offsetth element of\n        // end node's data is a space (0x0020) or non-breaking space (0x00A0):\"\n        } else if (endNode.nodeType == Node.TEXT_NODE\n        && [\"pre\", \"pre-wrap\"].indexOf(getComputedStyle(endNode.parentNode).whiteSpace) == -1\n        && endOffset != getNodeLength(endNode)\n        && /[ \\xa0]/.test(endNode.data[endOffset])) {\n            // \"If fix collapsed space is true, and collapse spaces is true,\n            // and the end offsetth code unit of end node's data is a space\n            // (0x0020): call deleteData(end offset, 1) on end node, then\n            // continue this loop from the beginning.\"\n            if (fixCollapsedSpace\n            && collapseSpaces\n            && \" \" == endNode.data[endOffset]) {\n                endNode.deleteData(endOffset, 1);\n                continue;\n            }\n\n            // \"Set collapse spaces to true if the end offsetth element of end\n            // node's data is a space (0x0020), false otherwise.\"\n            collapseSpaces = \" \" == endNode.data[endOffset];\n\n            // \"Add one to end offset.\"\n            endOffset++;\n\n            // \"Add one to length.\"\n            length++;\n\n        // \"Otherwise, break from this loop.\"\n        } else {\n            break;\n        }\n    }\n\n    // \"If fix collapsed space is true, then while (start node, start offset)\n    // is before (end node, end offset):\"\n    if (fixCollapsedSpace) {\n        while (getPosition(startNode, startOffset, endNode, endOffset) == \"before\") {\n            // \"If end node has a child in the same editing host with index end\n            // offset â 1, set end node to that child, then set end offset to end\n            // node's length.\"\n            if (0 <= endOffset - 1\n            && endOffset - 1 < endNode.childNodes.length\n            && inSameEditingHost(endNode, endNode.childNodes[endOffset - 1])) {\n                endNode = endNode.childNodes[endOffset - 1];\n                endOffset = getNodeLength(endNode);\n\n            // \"Otherwise, if end offset is zero and end node's parent is in the\n            // same editing host, set end offset to end node's index, then set end\n            // node to its parent.\"\n            } else if (endOffset == 0\n            && inSameEditingHost(endNode, endNode.parentNode)) {\n                endOffset = getNodeIndex(endNode);\n                endNode = endNode.parentNode;\n\n            // \"Otherwise, if end node is a Text node and its parent's resolved\n            // value for \"white-space\" is neither \"pre\" nor \"pre-wrap\" and end\n            // offset is end node's length and the last code unit of end node's\n            // data is a space (0x0020) and end node precedes a line break:\"\n            } else if (endNode.nodeType == Node.TEXT_NODE\n            && [\"pre\", \"pre-wrap\"].indexOf(getComputedStyle(endNode.parentNode).whiteSpace) == -1\n            && endOffset == getNodeLength(endNode)\n            && endNode.data[endNode.data.length - 1] == \" \"\n            && precedesLineBreak(endNode)) {\n                // \"Subtract one from end offset.\"\n                endOffset--;\n\n                // \"Subtract one from length.\"\n                length--;\n\n                // \"Call deleteData(end offset, 1) on end node.\"\n                endNode.deleteData(endOffset, 1);\n\n            // \"Otherwise, break from this loop.\"\n            } else {\n                break;\n            }\n        }\n    }\n\n    // \"Let replacement whitespace be the canonical space sequence of length\n    // length. non-breaking start is true if start offset is zero and start\n    // node follows a line break, and false otherwise. non-breaking end is true\n    // if end offset is end node's length and end node precedes a line break,\n    // and false otherwise.\"\n    var replacementWhitespace = canonicalSpaceSequence(length,\n        startOffset == 0 && followsLineBreak(startNode),\n        endOffset == getNodeLength(endNode) && precedesLineBreak(endNode));\n\n    // \"While (start node, start offset) is before (end node, end offset):\"\n    while (getPosition(startNode, startOffset, endNode, endOffset) == \"before\") {\n        // \"If start node has a child with index start offset, set start node\n        // to that child, then set start offset to zero.\"\n        if (startOffset < startNode.childNodes.length) {\n            startNode = startNode.childNodes[startOffset];\n            startOffset = 0;\n\n        // \"Otherwise, if start node is not a Text node or if start offset is\n        // start node's length, set start offset to one plus start node's\n        // index, then set start node to its parent.\"\n        } else if (startNode.nodeType != Node.TEXT_NODE\n        || startOffset == getNodeLength(startNode)) {\n            startOffset = 1 + getNodeIndex(startNode);\n            startNode = startNode.parentNode;\n\n        // \"Otherwise:\"\n        } else {\n            // \"Remove the first element from replacement whitespace, and let\n            // element be that element.\"\n            var element = replacementWhitespace[0];\n            replacementWhitespace = replacementWhitespace.slice(1);\n\n            // \"If element is not the same as the start offsetth element of\n            // start node's data:\"\n            if (element != startNode.data[startOffset]) {\n                // \"Call insertData(start offset, element) on start node.\"\n                startNode.insertData(startOffset, element);\n\n                // \"Call deleteData(start offset + 1, 1) on start node.\"\n                startNode.deleteData(startOffset + 1, 1);\n            }\n\n            // \"Add one to start offset.\"\n            startOffset++;\n        }\n    }\n}\n\n\n//@}\n///// Indenting and outdenting /////\n//@{\n\nfunction indentNodes(nodeList) {\n    // \"If node list is empty, do nothing and abort these steps.\"\n    if (!nodeList.length) {\n        return;\n    }\n\n    // \"Let first node be the first member of node list.\"\n    var firstNode = nodeList[0];\n\n    // \"If first node's parent is an ol or ul:\"\n    if (isHtmlElement(firstNode.parentNode, [\"OL\", \"UL\"])) {\n        // \"Let tag be the local name of the parent of first node.\"\n        var tag = firstNode.parentNode.tagName;\n\n        // \"Wrap node list, with sibling criteria returning true for an HTML\n        // element with local name tag and false otherwise, and new parent\n        // instructions returning the result of calling createElement(tag) on\n        // the ownerDocument of first node.\"\n        wrap(nodeList,\n            function(node) { return isHtmlElement(node, tag) },\n            function() { return firstNode.ownerDocument.createElement(tag) });\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"Wrap node list, with sibling criteria returning true for a simple\n    // indentation element and false otherwise, and new parent instructions\n    // returning the result of calling createElement(\"blockquote\") on the\n    // ownerDocument of first node. Let new parent be the result.\"\n    var newParent = wrap(nodeList,\n        function(node) { return isSimpleIndentationElement(node) },\n        function() { return firstNode.ownerDocument.createElement(\"blockquote\") });\n\n    // \"Fix disallowed ancestors of new parent.\"\n    fixDisallowedAncestors(newParent);\n}\n\nfunction outdentNode(node) {\n    // \"If node is not editable, abort these steps.\"\n    if (!isEditable(node)) {\n        return;\n    }\n\n    // \"If node is a simple indentation element, remove node, preserving its\n    // descendants.  Then abort these steps.\"\n    if (isSimpleIndentationElement(node)) {\n        removePreservingDescendants(node);\n        return;\n    }\n\n    // \"If node is an indentation element:\"\n    if (isIndentationElement(node)) {\n        // \"Unset the dir attribute of node, if any.\"\n        node.removeAttribute(\"dir\");\n\n        // \"Unset the margin, padding, and border CSS properties of node.\"\n        node.style.margin = \"\";\n        node.style.padding = \"\";\n        node.style.border = \"\";\n        if (node.getAttribute(\"style\") == \"\"\n        // Crazy WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=68551\n        || node.getAttribute(\"style\") == \"border-width: initial; border-color: initial; \") {\n            node.removeAttribute(\"style\");\n        }\n\n        // \"Set the tag name of node to \"div\".\"\n        setTagName(node, \"div\");\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"Let current ancestor be node's parent.\"\n    var currentAncestor = node.parentNode;\n\n    // \"Let ancestor list be a list of nodes, initially empty.\"\n    var ancestorList = [];\n\n    // \"While current ancestor is an editable Element that is neither a simple\n    // indentation element nor an ol nor a ul, append current ancestor to\n    // ancestor list and then set current ancestor to its parent.\"\n    while (isEditable(currentAncestor)\n    && currentAncestor.nodeType == Node.ELEMENT_NODE\n    && !isSimpleIndentationElement(currentAncestor)\n    && !isHtmlElement(currentAncestor, [\"ol\", \"ul\"])) {\n        ancestorList.push(currentAncestor);\n        currentAncestor = currentAncestor.parentNode;\n    }\n\n    // \"If current ancestor is not an editable simple indentation element:\"\n    if (!isEditable(currentAncestor)\n    || !isSimpleIndentationElement(currentAncestor)) {\n        // \"Let current ancestor be node's parent.\"\n        currentAncestor = node.parentNode;\n\n        // \"Let ancestor list be the empty list.\"\n        ancestorList = [];\n\n        // \"While current ancestor is an editable Element that is neither an\n        // indentation element nor an ol nor a ul, append current ancestor to\n        // ancestor list and then set current ancestor to its parent.\"\n        while (isEditable(currentAncestor)\n        && currentAncestor.nodeType == Node.ELEMENT_NODE\n        && !isIndentationElement(currentAncestor)\n        && !isHtmlElement(currentAncestor, [\"ol\", \"ul\"])) {\n            ancestorList.push(currentAncestor);\n            currentAncestor = currentAncestor.parentNode;\n        }\n    }\n\n    // \"If node is an ol or ul and current ancestor is not an editable\n    // indentation element:\"\n    if (isHtmlElement(node, [\"OL\", \"UL\"])\n    && (!isEditable(currentAncestor)\n    || !isIndentationElement(currentAncestor))) {\n        // \"Unset the reversed, start, and type attributes of node, if any are\n        // set.\"\n        node.removeAttribute(\"reversed\");\n        node.removeAttribute(\"start\");\n        node.removeAttribute(\"type\");\n\n        // \"Let children be the children of node.\"\n        var children = [].slice.call(node.childNodes);\n\n        // \"If node has attributes, and its parent is not an ol or ul, set the\n        // tag name of node to \"div\".\"\n        if (node.attributes.length\n        && !isHtmlElement(node.parentNode, [\"OL\", \"UL\"])) {\n            setTagName(node, \"div\");\n\n        // \"Otherwise:\"\n        } else {\n            // \"Record the values of node's children, and let values be the\n            // result.\"\n            var values = recordValues([].slice.call(node.childNodes));\n\n            // \"Remove node, preserving its descendants.\"\n            removePreservingDescendants(node);\n\n            // \"Restore the values from values.\"\n            restoreValues(values);\n        }\n\n        // \"Fix disallowed ancestors of each member of children.\"\n        for (var i = 0; i < children.length; i++) {\n            fixDisallowedAncestors(children[i]);\n        }\n\n        // \"Abort these steps.\"\n        return;\n    }\n\n    // \"If current ancestor is not an editable indentation element, abort these\n    // steps.\"\n    if (!isEditable(currentAncestor)\n    || !isIndentationElement(currentAncestor)) {\n        return;\n    }\n\n    // \"Append current ancestor to ancestor list.\"\n    ancestorList.push(currentAncestor);\n\n    // \"Let original ancestor be current ancestor.\"\n    var originalAncestor = currentAncestor;\n\n    // \"While ancestor list is not empty:\"\n    while (ancestorList.length) {\n        // \"Let current ancestor be the last member of ancestor list.\"\n        //\n        // \"Remove the last member of ancestor list.\"\n        currentAncestor = ancestorList.pop();\n\n        // \"Let target be the child of current ancestor that is equal to either\n        // node or the last member of ancestor list.\"\n        var target = node.parentNode == currentAncestor\n            ? node\n            : ancestorList[ancestorList.length - 1];\n\n        // \"If target is an inline node that is not a br, and its nextSibling\n        // is a br, remove target's nextSibling from its parent.\"\n        if (isInlineNode(target)\n        && !isHtmlElement(target, \"BR\")\n        && isHtmlElement(target.nextSibling, \"BR\")) {\n            target.parentNode.removeChild(target.nextSibling);\n        }\n\n        // \"Let preceding siblings be the preceding siblings of target, and let\n        // following siblings be the following siblings of target.\"\n        var precedingSiblings = [].slice.call(currentAncestor.childNodes, 0, getNodeIndex(target));\n        var followingSiblings = [].slice.call(currentAncestor.childNodes, 1 + getNodeIndex(target));\n\n        // \"Indent preceding siblings.\"\n        indentNodes(precedingSiblings);\n\n        // \"Indent following siblings.\"\n        indentNodes(followingSiblings);\n    }\n\n    // \"Outdent original ancestor.\"\n    outdentNode(originalAncestor);\n}\n\n\n//@}\n///// Toggling lists /////\n//@{\n\nfunction toggleLists(tagName) {\n    // \"Let mode be \"disable\" if the selection's list state is tag name, and\n    // \"enable\" otherwise.\"\n    var mode = getSelectionListState() == tagName ? \"disable\" : \"enable\";\n\n    var range = getActiveRange();\n    tagName = tagName.toUpperCase();\n\n    // \"Let other tag name be \"ol\" if tag name is \"ul\", and \"ul\" if tag name is\n    // \"ol\".\"\n    var otherTagName = tagName == \"OL\" ? \"UL\" : \"OL\";\n\n    // \"Let items be a list of all lis that are ancestor containers of the\n    // range's start and/or end node.\"\n    //\n    // It's annoying to get this in tree order using functional stuff without\n    // doing getDescendants(document), which is slow, so I do it imperatively.\n    var items = [];\n    (function(){\n        for (\n            var ancestorContainer = range.endContainer;\n            ancestorContainer != range.commonAncestorContainer;\n            ancestorContainer = ancestorContainer.parentNode\n        ) {\n            if (isHtmlElement(ancestorContainer, \"li\")) {\n                items.unshift(ancestorContainer);\n            }\n        }\n        for (\n            var ancestorContainer = range.startContainer;\n            ancestorContainer;\n            ancestorContainer = ancestorContainer.parentNode\n        ) {\n            if (isHtmlElement(ancestorContainer, \"li\")) {\n                items.unshift(ancestorContainer);\n            }\n        }\n    })();\n\n    // \"For each item in items, normalize sublists of item.\"\n    items.forEach(normalizeSublists);\n\n    // \"Block-extend the range, and let new range be the result.\"\n    var newRange = blockExtend(range);\n\n    // \"If mode is \"enable\", then let lists to convert consist of every\n    // editable HTML element with local name other tag name that is contained\n    // in new range, and for every list in lists to convert:\"\n    if (mode == \"enable\") {\n        getAllContainedNodes(newRange, function(node) {\n            return isEditable(node)\n                && isHtmlElement(node, otherTagName);\n        }).forEach(function(list) {\n            // \"If list's previousSibling or nextSibling is an editable HTML\n            // element with local name tag name:\"\n            if ((isEditable(list.previousSibling) && isHtmlElement(list.previousSibling, tagName))\n            || (isEditable(list.nextSibling) && isHtmlElement(list.nextSibling, tagName))) {\n                // \"Let children be list's children.\"\n                var children = [].slice.call(list.childNodes);\n\n                // \"Record the values of children, and let values be the\n                // result.\"\n                var values = recordValues(children);\n\n                // \"Split the parent of children.\"\n                splitParent(children);\n\n                // \"Wrap children, with sibling criteria returning true for an\n                // HTML element with local name tag name and false otherwise.\"\n                wrap(children, function(node) { return isHtmlElement(node, tagName) });\n\n                // \"Restore the values from values.\"\n                restoreValues(values);\n\n            // \"Otherwise, set the tag name of list to tag name.\"\n            } else {\n                setTagName(list, tagName);\n            }\n        });\n    }\n\n    // \"Let node list be a list of nodes, initially empty.\"\n    //\n    // \"For each node node contained in new range, if node is editable; the\n    // last member of node list (if any) is not an ancestor of node; node\n    // is not an indentation element; and either node is an ol or ul, or its\n    // parent is an ol or ul, or it is an allowed child of \"li\"; then append\n    // node to node list.\"\n    var nodeList = getContainedNodes(newRange, function(node) {\n        return isEditable(node)\n        && !isIndentationElement(node)\n        && (isHtmlElement(node, [\"OL\", \"UL\"])\n        || isHtmlElement(node.parentNode, [\"OL\", \"UL\"])\n        || isAllowedChild(node, \"li\"));\n    });\n\n    // \"If mode is \"enable\", remove from node list any ol or ul whose parent is\n    // not also an ol or ul.\"\n    if (mode == \"enable\") {\n        nodeList = nodeList.filter(function(node) {\n            return !isHtmlElement(node, [\"ol\", \"ul\"])\n                || isHtmlElement(node.parentNode, [\"ol\", \"ul\"]);\n        });\n    }\n\n    // \"If mode is \"disable\", then while node list is not empty:\"\n    if (mode == \"disable\") {\n        while (nodeList.length) {\n            // \"Let sublist be an empty list of nodes.\"\n            var sublist = [];\n\n            // \"Remove the first member from node list and append it to\n            // sublist.\"\n            sublist.push(nodeList.shift());\n\n            // \"If the first member of sublist is an HTML element with local\n            // name tag name, outdent it and continue this loop from the\n            // beginning.\"\n            if (isHtmlElement(sublist[0], tagName)) {\n                outdentNode(sublist[0]);\n                continue;\n            }\n\n            // \"While node list is not empty, and the first member of node list\n            // is the nextSibling of the last member of sublist and is not an\n            // HTML element with local name tag name, remove the first member\n            // from node list and append it to sublist.\"\n            while (nodeList.length\n            && nodeList[0] == sublist[sublist.length - 1].nextSibling\n            && !isHtmlElement(nodeList[0], tagName)) {\n                sublist.push(nodeList.shift());\n            }\n\n            // \"Record the values of sublist, and let values be the result.\"\n            var values = recordValues(sublist);\n\n            // \"Split the parent of sublist.\"\n            splitParent(sublist);\n\n            // \"Fix disallowed ancestors of each member of sublist.\"\n            for (var i = 0; i < sublist.length; i++) {\n                fixDisallowedAncestors(sublist[i]);\n            }\n\n            // \"Restore the values from values.\"\n            restoreValues(values);\n        }\n\n    // \"Otherwise, while node list is not empty:\"\n    } else {\n        while (nodeList.length) {\n            // \"Let sublist be an empty list of nodes.\"\n            var sublist = [];\n\n            // \"While either sublist is empty, or node list is not empty and\n            // its first member is the nextSibling of sublist's last member:\"\n            while (!sublist.length\n            || (nodeList.length\n            && nodeList[0] == sublist[sublist.length - 1].nextSibling)) {\n                // \"If node list's first member is a p or div, set the tag name\n                // of node list's first member to \"li\", and append the result\n                // to sublist. Remove the first member from node list.\"\n                if (isHtmlElement(nodeList[0], [\"p\", \"div\"])) {\n                    sublist.push(setTagName(nodeList[0], \"li\"));\n                    nodeList.shift();\n\n                // \"Otherwise, if the first member of node list is an li or ol\n                // or ul, remove it from node list and append it to sublist.\"\n                } else if (isHtmlElement(nodeList[0], [\"li\", \"ol\", \"ul\"])) {\n                    sublist.push(nodeList.shift());\n\n                // \"Otherwise:\"\n                } else {\n                    // \"Let nodes to wrap be a list of nodes, initially empty.\"\n                    var nodesToWrap = [];\n\n                    // \"While nodes to wrap is empty, or node list is not empty\n                    // and its first member is the nextSibling of nodes to\n                    // wrap's last member and the first member of node list is\n                    // an inline node and the last member of nodes to wrap is\n                    // an inline node other than a br, remove the first member\n                    // from node list and append it to nodes to wrap.\"\n                    while (!nodesToWrap.length\n                    || (nodeList.length\n                    && nodeList[0] == nodesToWrap[nodesToWrap.length - 1].nextSibling\n                    && isInlineNode(nodeList[0])\n                    && isInlineNode(nodesToWrap[nodesToWrap.length - 1])\n                    && !isHtmlElement(nodesToWrap[nodesToWrap.length - 1], \"br\"))) {\n                        nodesToWrap.push(nodeList.shift());\n                    }\n\n                    // \"Wrap nodes to wrap, with new parent instructions\n                    // returning the result of calling createElement(\"li\") on\n                    // the context object. Append the result to sublist.\"\n                    sublist.push(wrap(nodesToWrap,\n                        undefined,\n                        function() { return document.createElement(\"li\") }));\n                }\n            }\n\n            // \"If sublist's first member's parent is an HTML element with\n            // local name tag name, or if every member of sublist is an ol or\n            // ul, continue this loop from the beginning.\"\n            if (isHtmlElement(sublist[0].parentNode, tagName)\n            || sublist.every(function(node) { return isHtmlElement(node, [\"ol\", \"ul\"]) })) {\n                continue;\n            }\n\n            // \"If sublist's first member's parent is an HTML element with\n            // local name other tag name:\"\n            if (isHtmlElement(sublist[0].parentNode, otherTagName)) {\n                // \"Record the values of sublist, and let values be the\n                // result.\"\n                var values = recordValues(sublist);\n\n                // \"Split the parent of sublist.\"\n                splitParent(sublist);\n\n                // \"Wrap sublist, with sibling criteria returning true for an\n                // HTML element with local name tag name and false otherwise,\n                // and new parent instructions returning the result of calling\n                // createElement(tag name) on the context object.\"\n                wrap(sublist,\n                    function(node) { return isHtmlElement(node, tagName) },\n                    function() { return document.createElement(tagName) });\n\n                // \"Restore the values from values.\"\n                restoreValues(values);\n\n                // \"Continue this loop from the beginning.\"\n                continue;\n            }\n\n            // \"Wrap sublist, with sibling criteria returning true for an HTML\n            // element with local name tag name and false otherwise, and new\n            // parent instructions being the following:\"\n            // . . .\n            // \"Fix disallowed ancestors of the previous step's result.\"\n            fixDisallowedAncestors(wrap(sublist,\n                function(node) { return isHtmlElement(node, tagName) },\n                function() {\n                    // \"If sublist's first member's parent is not an editable\n                    // simple indentation element, or sublist's first member's\n                    // parent's previousSibling is not an editable HTML element\n                    // with local name tag name, call createElement(tag name)\n                    // on the context object and return the result.\"\n                    if (!isEditable(sublist[0].parentNode)\n                    || !isSimpleIndentationElement(sublist[0].parentNode)\n                    || !isEditable(sublist[0].parentNode.previousSibling)\n                    || !isHtmlElement(sublist[0].parentNode.previousSibling, tagName)) {\n                        return document.createElement(tagName);\n                    }\n\n                    // \"Let list be sublist's first member's parent's\n                    // previousSibling.\"\n                    var list = sublist[0].parentNode.previousSibling;\n\n                    // \"Normalize sublists of list's lastChild.\"\n                    normalizeSublists(list.lastChild);\n\n                    // \"If list's lastChild is not an editable HTML element\n                    // with local name tag name, call createElement(tag name)\n                    // on the context object, and append the result as the last\n                    // child of list.\"\n                    if (!isEditable(list.lastChild)\n                    || !isHtmlElement(list.lastChild, tagName)) {\n                        list.appendChild(document.createElement(tagName));\n                    }\n\n                    // \"Return the last child of list.\"\n                    return list.lastChild;\n                }\n            ));\n        }\n    }\n}\n\n\n//@}\n///// Justifying the selection /////\n//@{\n\nfunction justifySelection(alignment) {\n    // \"Block-extend the active range, and let new range be the result.\"\n    var newRange = blockExtend(globalRange);\n\n    // \"Let element list be a list of all editable Elements contained in new\n    // range that either has an attribute in the HTML namespace whose local\n    // name is \"align\", or has a style attribute that sets \"text-align\", or is\n    // a center.\"\n    var elementList = getAllContainedNodes(newRange, function(node) {\n        return node.nodeType == Node.ELEMENT_NODE\n            && isEditable(node)\n            // Ignoring namespaces here\n            && (\n                node.hasAttribute(\"align\")\n                || node.style.textAlign != \"\"\n                || isHtmlElement(node, \"center\")\n            );\n    });\n\n    // \"For each element in element list:\"\n    for (var i = 0; i < elementList.length; i++) {\n        var element = elementList[i];\n\n        // \"If element has an attribute in the HTML namespace whose local name\n        // is \"align\", remove that attribute.\"\n        element.removeAttribute(\"align\");\n\n        // \"Unset the CSS property \"text-align\" on element, if it's set by a\n        // style attribute.\"\n        element.style.textAlign = \"\";\n        if (element.getAttribute(\"style\") == \"\") {\n            element.removeAttribute(\"style\");\n        }\n\n        // \"If element is a div or span or center with no attributes, remove\n        // it, preserving its descendants.\"\n        if (isHtmlElement(element, [\"div\", \"span\", \"center\"])\n        && !element.attributes.length) {\n            removePreservingDescendants(element);\n        }\n\n        // \"If element is a center with one or more attributes, set the tag\n        // name of element to \"div\".\"\n        if (isHtmlElement(element, \"center\")\n        && element.attributes.length) {\n            setTagName(element, \"div\");\n        }\n    }\n\n    // \"Block-extend the active range, and let new range be the result.\"\n    newRange = blockExtend(globalRange);\n\n    // \"Let node list be a list of nodes, initially empty.\"\n    var nodeList = [];\n\n    // \"For each node node contained in new range, append node to node list if\n    // the last member of node list (if any) is not an ancestor of node; node\n    // is editable; node is an allowed child of \"div\"; and node's alignment\n    // value is not alignment.\"\n    nodeList = getContainedNodes(newRange, function(node) {\n        return isEditable(node)\n            && isAllowedChild(node, \"div\")\n            && getAlignmentValue(node) != alignment;\n    });\n\n    // \"While node list is not empty:\"\n    while (nodeList.length) {\n        // \"Let sublist be a list of nodes, initially empty.\"\n        var sublist = [];\n\n        // \"Remove the first member of node list and append it to sublist.\"\n        sublist.push(nodeList.shift());\n\n        // \"While node list is not empty, and the first member of node list is\n        // the nextSibling of the last member of sublist, remove the first\n        // member of node list and append it to sublist.\"\n        while (nodeList.length\n        && nodeList[0] == sublist[sublist.length - 1].nextSibling) {\n            sublist.push(nodeList.shift());\n        }\n\n        // \"Wrap sublist. Sibling criteria returns true for any div that has\n        // one or both of the following two attributes and no other attributes,\n        // and false otherwise:\"\n        //\n        //   * \"An align attribute whose value is an ASCII case-insensitive\n        //     match for alignment.\n        //   * \"A style attribute which sets exactly one CSS property\n        //     (including unrecognized or invalid attributes), which is\n        //     \"text-align\", which is set to alignment.\n        //\n        // \"New parent instructions are to call createElement(\"div\") on the\n        // context object, then set its CSS property \"text-align\" to alignment\n        // and return the result.\"\n        wrap(sublist,\n            function(node) {\n                return isHtmlElement(node, \"div\")\n                    && [].every.call(node.attributes, function(attr) {\n                        return (attr.name == \"align\" && attr.value.toLowerCase() == alignment)\n                            || (attr.name == \"style\" && node.style.length == 1 && node.style.textAlign == alignment);\n                    });\n            },\n            function() {\n                var newParent = document.createElement(\"div\");\n                newParent.setAttribute(\"style\", \"text-align: \" + alignment);\n                return newParent;\n            }\n        );\n    }\n}\n\n\n//@}\n///// Automatic linking /////\n//@{\n// \"An autolinkable URL is a string of the following form:\"\nvar autolinkableUrlRegexp =\n    // \"Either a string matching the scheme pattern from RFC 3986 section 3.1\n    // followed by the literal string ://, or the literal string mailto:;\n    // followed by\"\n    //\n    // From the RFC: scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    \"([a-zA-Z][a-zA-Z0-9+.-]*://|mailto:)\"\n    // \"Zero or more characters other than space characters; followed by\"\n    + \"[^ \\t\\n\\f\\r]*\"\n    // \"A character that is not one of the ASCII characters !\"'(),-.:;<>[]`{}.\"\n    + \"[^!\\\"'(),\\\\-.:;<>[\\\\]`{}]\";\n\n// \"A valid e-mail address is a string that matches the ABNF production 1*(\n// atext / \".\" ) \"@\" ldh-str *( \".\" ldh-str ) where atext is defined in RFC\n// 5322 section 3.2.3, and ldh-str is defined in RFC 1034 section 3.5.\"\n//\n// atext: ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" /\n// \"/\" / \"=\" / \"?\" / \"^\" / \"_\" / \"`\" / \"{\" / \"|\" / \"}\" / \"~\"\n//\n//<ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n//<let-dig-hyp> ::= <let-dig> | \"-\"\n//<let-dig> ::= <letter> | <digit>\nvar validEmailRegexp =\n    \"[a-zA-Z0-9!#$%&'*+\\\\-/=?^_`{|}~.]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\";\n\nfunction autolink(node, endOffset) {\n    // \"While (node, end offset)'s previous equivalent point is not null, set\n    // it to its previous equivalent point.\"\n    while (getPreviousEquivalentPoint(node, endOffset)) {\n        var prev = getPreviousEquivalentPoint(node, endOffset);\n        node = prev[0];\n        endOffset = prev[1];\n    }\n\n    // \"If node is not a Text node, or has an a ancestor, do nothing and abort\n    // these steps.\"\n    if (node.nodeType != Node.TEXT_NODE\n    || getAncestors(node).some(function(ancestor) { return isHtmlElement(ancestor, \"a\") })) {\n        return;\n    }\n\n    // \"Let search be the largest substring of node's data whose end is end\n    // offset and that contains no space characters.\"\n    var search = /[^ \\t\\n\\f\\r]*$/.exec(node.substringData(0, endOffset))[0];\n\n    // \"If some substring of search is an autolinkable URL:\"\n    if (new RegExp(autolinkableUrlRegexp).test(search)) {\n        // \"While there is no substring of node's data ending at end offset\n        // that is an autolinkable URL, decrement end offset.\"\n        while (!(new RegExp(autolinkableUrlRegexp + \"$\").test(node.substringData(0, endOffset)))) {\n            endOffset--;\n        }\n\n        // \"Let start offset be the start index of the longest substring of\n        // node's data that is an autolinkable URL ending at end offset.\"\n        var startOffset = new RegExp(autolinkableUrlRegexp + \"$\").exec(node.substringData(0, endOffset)).index;\n\n        // \"Let href be the substring of node's data starting at start offset\n        // and ending at end offset.\"\n        var href = node.substringData(startOffset, endOffset - startOffset);\n\n    // \"Otherwise, if some substring of search is a valid e-mail address:\"\n    } else if (new RegExp(validEmailRegexp).test(search)) {\n        // \"While there is no substring of node's data ending at end offset\n        // that is a valid e-mail address, decrement end offset.\"\n        while (!(new RegExp(validEmailRegexp + \"$\").test(node.substringData(0, endOffset)))) {\n            endOffset--;\n        }\n\n        // \"Let start offset be the start index of the longest substring of\n        // node's data that is a valid e-mail address ending at end offset.\"\n        var startOffset = new RegExp(validEmailRegexp + \"$\").exec(node.substringData(0, endOffset)).index;\n\n        // \"Let href be \"mailto:\" concatenated with the substring of node's\n        // data starting at start offset and ending at end offset.\"\n        var href = \"mailto:\" + node.substringData(startOffset, endOffset - startOffset);\n\n    // \"Otherwise, do nothing and abort these steps.\"\n    } else {\n        return;\n    }\n\n    // \"Let original range be the active range.\"\n    var originalRange = getActiveRange();\n\n    // \"Create a new range with start (node, start offset) and end (node, end\n    // offset), and set the context object's selection's range to it.\"\n    var newRange = document.createRange();\n    newRange.setStart(node, startOffset);\n    newRange.setEnd(node, endOffset);\n    getSelection().removeAllRanges();\n    getSelection().addRange(newRange);\n    globalRange = newRange;\n\n    // \"Take the action for \"createLink\", with value equal to href.\"\n    commands.createlink.action(href);\n\n    // \"Set the context object's selection's range to original range.\"\n    getSelection().removeAllRanges();\n    getSelection().addRange(originalRange);\n    globalRange = originalRange;\n}\n//@}\n///// The delete command /////\n//@{\ncommands[\"delete\"] = {\n    preservesOverrides: true,\n    action: function() {\n        // \"If the active range is not collapsed, delete the selection and\n        // return true.\"\n        if (!getActiveRange().collapsed) {\n            deleteSelection();\n            return true;\n        }\n\n        // \"Canonicalize whitespace at the active range's start.\"\n        canonicalizeWhitespace(getActiveRange().startContainer, getActiveRange().startOffset);\n\n        // \"Let node and offset be the active range's start node and offset.\"\n        var node = getActiveRange().startContainer;\n        var offset = getActiveRange().startOffset;\n\n        // \"Repeat the following steps:\"\n        while (true) {\n            // \"If offset is zero and node's previousSibling is an editable\n            // invisible node, remove node's previousSibling from its parent.\"\n            if (offset == 0\n            && isEditable(node.previousSibling)\n            && isInvisible(node.previousSibling)) {\n                node.parentNode.removeChild(node.previousSibling);\n\n            // \"Otherwise, if node has a child with index offset â 1 and that\n            // child is an editable invisible node, remove that child from\n            // node, then subtract one from offset.\"\n            } else if (0 <= offset - 1\n            && offset - 1 < node.childNodes.length\n            && isEditable(node.childNodes[offset - 1])\n            && isInvisible(node.childNodes[offset - 1])) {\n                node.removeChild(node.childNodes[offset - 1]);\n                offset--;\n\n            // \"Otherwise, if offset is zero and node is an inline node, or if\n            // node is an invisible node, set offset to the index of node, then\n            // set node to its parent.\"\n            } else if ((offset == 0\n            && isInlineNode(node))\n            || isInvisible(node)) {\n                offset = getNodeIndex(node);\n                node = node.parentNode;\n\n            // \"Otherwise, if node has a child with index offset â 1 and that\n            // child is an editable a, remove that child from node, preserving\n            // its descendants. Then return true.\"\n            } else if (0 <= offset - 1\n            && offset - 1 < node.childNodes.length\n            && isEditable(node.childNodes[offset - 1])\n            && isHtmlElement(node.childNodes[offset - 1], \"a\")) {\n                removePreservingDescendants(node.childNodes[offset - 1]);\n                return true;\n\n            // \"Otherwise, if node has a child with index offset â 1 and that\n            // child is not a block node or a br or an img, set node to that\n            // child, then set offset to the length of node.\"\n            } else if (0 <= offset - 1\n            && offset - 1 < node.childNodes.length\n            && !isBlockNode(node.childNodes[offset - 1])\n            && !isHtmlElement(node.childNodes[offset - 1], [\"br\", \"img\"])) {\n                node = node.childNodes[offset - 1];\n                offset = getNodeLength(node);\n\n            // \"Otherwise, break from this loop.\"\n            } else {\n                break;\n            }\n        }\n\n        // \"If node is a Text node and offset is not zero, or if node is a\n        // block node that has a child with index offset â 1 and that child is\n        // a br or hr or img:\"\n        if ((node.nodeType == Node.TEXT_NODE\n        && offset != 0)\n        || (isBlockNode(node)\n        && 0 <= offset - 1\n        && offset - 1 < node.childNodes.length\n        && isHtmlElement(node.childNodes[offset - 1], [\"br\", \"hr\", \"img\"]))) {\n            // \"Call collapse(node, offset) on the context object's Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setEnd(node, offset);\n\n            // \"Call extend(node, offset â 1) on the context object's\n            // Selection.\"\n            getSelection().extend(node, offset - 1);\n            getActiveRange().setStart(node, offset - 1);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If node is an inline node, return true.\"\n        if (isInlineNode(node)) {\n            return true;\n        }\n\n        // \"If node is an li or dt or dd and is the first child of its parent,\n        // and offset is zero:\"\n        if (isHtmlElement(node, [\"li\", \"dt\", \"dd\"])\n        && node == node.parentNode.firstChild\n        && offset == 0) {\n            // \"Let items be a list of all lis that are ancestors of node.\"\n            //\n            // Remember, must be in tree order.\n            var items = [];\n            for (var ancestor = node.parentNode; ancestor; ancestor = ancestor.parentNode) {\n                if (isHtmlElement(ancestor, \"li\")) {\n                    items.unshift(ancestor);\n                }\n            }\n\n            // \"Normalize sublists of each item in items.\"\n            for (var i = 0; i < items.length; i++) {\n                normalizeSublists(items[i]);\n            }\n\n            // \"Record the values of the one-node list consisting of node, and\n            // let values be the result.\"\n            var values = recordValues([node]);\n\n            // \"Split the parent of the one-node list consisting of node.\"\n            splitParent([node]);\n\n            // \"Restore the values from values.\"\n            restoreValues(values);\n\n            // \"If node is a dd or dt, and it is not an allowed child of any of\n            // its ancestors in the same editing host, set the tag name of node\n            // to the default single-line container name and let node be the\n            // result.\"\n            if (isHtmlElement(node, [\"dd\", \"dt\"])\n            && getAncestors(node).every(function(ancestor) {\n                return !inSameEditingHost(node, ancestor)\n                    || !isAllowedChild(node, ancestor)\n            })) {\n                node = setTagName(node, defaultSingleLineContainerName);\n            }\n\n            // \"Fix disallowed ancestors of node.\"\n            fixDisallowedAncestors(node);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"Let start node equal node and let start offset equal offset.\"\n        var startNode = node;\n        var startOffset = offset;\n\n        // \"Repeat the following steps:\"\n        while (true) {\n            // \"If start offset is zero, set start offset to the index of start\n            // node and then set start node to its parent.\"\n            if (startOffset == 0) {\n                startOffset = getNodeIndex(startNode);\n                startNode = startNode.parentNode;\n\n            // \"Otherwise, if start node has an editable invisible child with\n            // index start offset minus one, remove it from start node and\n            // subtract one from start offset.\"\n            } else if (0 <= startOffset - 1\n            && startOffset - 1 < startNode.childNodes.length\n            && isEditable(startNode.childNodes[startOffset - 1])\n            && isInvisible(startNode.childNodes[startOffset - 1])) {\n                startNode.removeChild(startNode.childNodes[startOffset - 1]);\n                startOffset--;\n\n            // \"Otherwise, break from this loop.\"\n            } else {\n                break;\n            }\n        }\n\n        // \"If offset is zero, and node has an editable ancestor container in\n        // the same editing host that's an indentation element:\"\n        if (offset == 0\n        && getAncestors(node).concat(node).filter(function(ancestor) {\n            return isEditable(ancestor)\n                && inSameEditingHost(ancestor, node)\n                && isIndentationElement(ancestor);\n        }).length) {\n            // \"Block-extend the range whose start and end are both (node, 0),\n            // and let new range be the result.\"\n            var newRange = document.createRange();\n            newRange.setStart(node, 0);\n            newRange = blockExtend(newRange);\n\n            // \"Let node list be a list of nodes, initially empty.\"\n            //\n            // \"For each node current node contained in new range, append\n            // current node to node list if the last member of node list (if\n            // any) is not an ancestor of current node, and current node is\n            // editable but has no editable descendants.\"\n            var nodeList = getContainedNodes(newRange, function(currentNode) {\n                return isEditable(currentNode)\n                    && !hasEditableDescendants(currentNode);\n            });\n\n            // \"Outdent each node in node list.\"\n            for (var i = 0; i < nodeList.length; i++) {\n                outdentNode(nodeList[i]);\n            }\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If the child of start node with index start offset is a table,\n        // return true.\"\n        if (isHtmlElement(startNode.childNodes[startOffset], \"table\")) {\n            return true;\n        }\n\n        // \"If start node has a child with index start offset â 1, and that\n        // child is a table:\"\n        if (0 <= startOffset - 1\n        && startOffset - 1 < startNode.childNodes.length\n        && isHtmlElement(startNode.childNodes[startOffset - 1], \"table\")) {\n            // \"Call collapse(start node, start offset â 1) on the context\n            // object's Selection.\"\n            getSelection().collapse(startNode, startOffset - 1);\n            getActiveRange().setStart(startNode, startOffset - 1);\n\n            // \"Call extend(start node, start offset) on the context object's\n            // Selection.\"\n            getSelection().extend(startNode, startOffset);\n            getActiveRange().setEnd(startNode, startOffset);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If offset is zero; and either the child of start node with index\n        // start offset minus one is an hr, or the child is a br whose\n        // previousSibling is either a br or not an inline node:\"\n        if (offset == 0\n        && (isHtmlElement(startNode.childNodes[startOffset - 1], \"hr\")\n            || (\n                isHtmlElement(startNode.childNodes[startOffset - 1], \"br\")\n                && (\n                    isHtmlElement(startNode.childNodes[startOffset - 1].previousSibling, \"br\")\n                    || !isInlineNode(startNode.childNodes[startOffset - 1].previousSibling)\n                )\n            )\n        )) {\n            // \"Call collapse(start node, start offset â 1) on the context\n            // object's Selection.\"\n            getSelection().collapse(startNode, startOffset - 1);\n            getActiveRange().setStart(startNode, startOffset - 1);\n\n            // \"Call extend(start node, start offset) on the context object's\n            // Selection.\"\n            getSelection().extend(startNode, startOffset);\n            getActiveRange().setEnd(startNode, startOffset);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Call collapse(node, offset) on the Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setStart(node, offset);\n            getActiveRange().collapse(true);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If the child of start node with index start offset is an li or dt\n        // or dd, and that child's firstChild is an inline node, and start\n        // offset is not zero:\"\n        if (isHtmlElement(startNode.childNodes[startOffset], [\"li\", \"dt\", \"dd\"])\n        && isInlineNode(startNode.childNodes[startOffset].firstChild)\n        && startOffset != 0) {\n            // \"Let previous item be the child of start node with index start\n            // offset minus one.\"\n            var previousItem = startNode.childNodes[startOffset - 1];\n\n            // \"If previous item's lastChild is an inline node other than a br,\n            // call createElement(\"br\") on the context object and append the\n            // result as the last child of previous item.\"\n            if (isInlineNode(previousItem.lastChild)\n            && !isHtmlElement(previousItem.lastChild, \"br\")) {\n                previousItem.appendChild(document.createElement(\"br\"));\n            }\n\n            // \"If previous item's lastChild is an inline node, call\n            // createElement(\"br\") on the context object and append the result\n            // as the last child of previous item.\"\n            if (isInlineNode(previousItem.lastChild)) {\n                previousItem.appendChild(document.createElement(\"br\"));\n            }\n        }\n\n        // \"If start node's child with index start offset is an li or dt or dd,\n        // and that child's previousSibling is also an li or dt or dd:\"\n        if (isHtmlElement(startNode.childNodes[startOffset], [\"li\", \"dt\", \"dd\"])\n        && isHtmlElement(startNode.childNodes[startOffset].previousSibling, [\"li\", \"dt\", \"dd\"])) {\n            // \"Call cloneRange() on the active range, and let original range\n            // be the result.\"\n            //\n            // We need to add it to extraRanges so it will actually get updated\n            // when moving preserving ranges.\n            var originalRange = getActiveRange().cloneRange();\n            extraRanges.push(originalRange);\n\n            // \"Set start node to its child with index start offset â 1.\"\n            startNode = startNode.childNodes[startOffset - 1];\n\n            // \"Set start offset to start node's length.\"\n            startOffset = getNodeLength(startNode);\n\n            // \"Set node to start node's nextSibling.\"\n            node = startNode.nextSibling;\n\n            // \"Call collapse(start node, start offset) on the context object's\n            // Selection.\"\n            getSelection().collapse(startNode, startOffset);\n            getActiveRange().setStart(startNode, startOffset);\n\n            // \"Call extend(node, 0) on the context object's Selection.\"\n            getSelection().extend(node, 0);\n            getActiveRange().setEnd(node, 0);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Call removeAllRanges() on the context object's Selection.\"\n            getSelection().removeAllRanges();\n\n            // \"Call addRange(original range) on the context object's\n            // Selection.\"\n            getSelection().addRange(originalRange);\n            getActiveRange().setStart(originalRange.startContainer, originalRange.startOffset);\n            getActiveRange().setEnd(originalRange.endContainer, originalRange.endOffset);\n\n            // \"Return true.\"\n            extraRanges.pop();\n            return true;\n        }\n\n        // \"While start node has a child with index start offset minus one:\"\n        while (0 <= startOffset - 1\n        && startOffset - 1 < startNode.childNodes.length) {\n            // \"If start node's child with index start offset minus one is\n            // editable and invisible, remove it from start node, then subtract\n            // one from start offset.\"\n            if (isEditable(startNode.childNodes[startOffset - 1])\n            && isInvisible(startNode.childNodes[startOffset - 1])) {\n                startNode.removeChild(startNode.childNodes[startOffset - 1]);\n                startOffset--;\n\n            // \"Otherwise, set start node to its child with index start offset\n            // minus one, then set start offset to the length of start node.\"\n            } else {\n                startNode = startNode.childNodes[startOffset - 1];\n                startOffset = getNodeLength(startNode);\n            }\n        }\n\n        // \"Call collapse(start node, start offset) on the context object's\n        // Selection.\"\n        getSelection().collapse(startNode, startOffset);\n        getActiveRange().setStart(startNode, startOffset);\n\n        // \"Call extend(node, offset) on the context object's Selection.\"\n        getSelection().extend(node, offset);\n        getActiveRange().setEnd(node, offset);\n\n        // \"Delete the selection, with direction \"backward\".\"\n        deleteSelection({direction: \"backward\"});\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The formatBlock command /////\n//@{\n// \"A formattable block name is \"address\", \"dd\", \"div\", \"dt\", \"h1\", \"h2\", \"h3\",\n// \"h4\", \"h5\", \"h6\", \"p\", or \"pre\".\"\nvar formattableBlockNames = [\"address\", \"dd\", \"div\", \"dt\", \"h1\", \"h2\", \"h3\",\n    \"h4\", \"h5\", \"h6\", \"p\", \"pre\"];\n\ncommands.formatblock = {\n    preservesOverrides: true,\n    action: function(value) {\n        // \"If value begins with a \"<\" character and ends with a \">\" character,\n        // remove the first and last characters from it.\"\n        if (/^<.*>$/.test(value)) {\n            value = value.slice(1, -1);\n        }\n\n        // \"Let value be converted to ASCII lowercase.\"\n        value = value.toLowerCase();\n\n        // \"If value is not a formattable block name, return false.\"\n        if (formattableBlockNames.indexOf(value) == -1) {\n            return false;\n        }\n\n        // \"Block-extend the active range, and let new range be the result.\"\n        var newRange = blockExtend(getActiveRange());\n\n        // \"Let node list be an empty list of nodes.\"\n        //\n        // \"For each node node contained in new range, append node to node list\n        // if it is editable, the last member of original node list (if any) is\n        // not an ancestor of node, node is either a non-list single-line\n        // container or an allowed child of \"p\" or a dd or dt, and node is not\n        // the ancestor of a prohibited paragraph child.\"\n        var nodeList = getContainedNodes(newRange, function(node) {\n            return isEditable(node)\n                && (isNonListSingleLineContainer(node)\n                || isAllowedChild(node, \"p\")\n                || isHtmlElement(node, [\"dd\", \"dt\"]))\n                && !getDescendants(node).some(isProhibitedParagraphChild);\n        });\n\n        // \"Record the values of node list, and let values be the result.\"\n        var values = recordValues(nodeList);\n\n        // \"For each node in node list, while node is the descendant of an\n        // editable HTML element in the same editing host, whose local name is\n        // a formattable block name, and which is not the ancestor of a\n        // prohibited paragraph child, split the parent of the one-node list\n        // consisting of node.\"\n        for (var i = 0; i < nodeList.length; i++) {\n            var node = nodeList[i];\n            while (getAncestors(node).some(function(ancestor) {\n                return isEditable(ancestor)\n                    && inSameEditingHost(ancestor, node)\n                    && isHtmlElement(ancestor, formattableBlockNames)\n                    && !getDescendants(ancestor).some(isProhibitedParagraphChild);\n            })) {\n                splitParent([node]);\n            }\n        }\n\n        // \"Restore the values from values.\"\n        restoreValues(values);\n\n        // \"While node list is not empty:\"\n        while (nodeList.length) {\n            var sublist;\n\n            // \"If the first member of node list is a single-line\n            // container:\"\n            if (isSingleLineContainer(nodeList[0])) {\n                // \"Let sublist be the children of the first member of node\n                // list.\"\n                sublist = [].slice.call(nodeList[0].childNodes);\n\n                // \"Record the values of sublist, and let values be the\n                // result.\"\n                var values = recordValues(sublist);\n\n                // \"Remove the first member of node list from its parent,\n                // preserving its descendants.\"\n                removePreservingDescendants(nodeList[0]);\n\n                // \"Restore the values from values.\"\n                restoreValues(values);\n\n                // \"Remove the first member from node list.\"\n                nodeList.shift();\n\n            // \"Otherwise:\"\n            } else {\n                // \"Let sublist be an empty list of nodes.\"\n                sublist = [];\n\n                // \"Remove the first member of node list and append it to\n                // sublist.\"\n                sublist.push(nodeList.shift());\n\n                // \"While node list is not empty, and the first member of\n                // node list is the nextSibling of the last member of\n                // sublist, and the first member of node list is not a\n                // single-line container, and the last member of sublist is\n                // not a br, remove the first member of node list and\n                // append it to sublist.\"\n                while (nodeList.length\n                && nodeList[0] == sublist[sublist.length - 1].nextSibling\n                && !isSingleLineContainer(nodeList[0])\n                && !isHtmlElement(sublist[sublist.length - 1], \"BR\")) {\n                    sublist.push(nodeList.shift());\n                }\n            }\n\n            // \"Wrap sublist. If value is \"div\" or \"p\", sibling criteria\n            // returns false; otherwise it returns true for an HTML element\n            // with local name value and no attributes, and false otherwise.\n            // New parent instructions return the result of running\n            // createElement(value) on the context object. Then fix disallowed\n            // ancestors of the result.\"\n            fixDisallowedAncestors(wrap(sublist,\n                [\"div\", \"p\"].indexOf(value) == - 1\n                    ? function(node) { return isHtmlElement(node, value) && !node.attributes.length }\n                    : function() { return false },\n                function() { return document.createElement(value) }));\n        }\n\n        // \"Return true.\"\n        return true;\n    }, indeterm: function() {\n        // \"If the active range is null, return false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n\n        // \"Block-extend the active range, and let new range be the result.\"\n        var newRange = blockExtend(getActiveRange());\n\n        // \"Let node list be all visible editable nodes that are contained in\n        // new range and have no children.\"\n        var nodeList = getAllContainedNodes(newRange, function(node) {\n            return isVisible(node)\n                && isEditable(node)\n                && !node.hasChildNodes();\n        });\n\n        // \"If node list is empty, return false.\"\n        if (!nodeList.length) {\n            return false;\n        }\n\n        // \"Let type be null.\"\n        var type = null;\n\n        // \"For each node in node list:\"\n        for (var i = 0; i < nodeList.length; i++) {\n            var node = nodeList[i];\n\n            // \"While node's parent is editable and in the same editing host as\n            // node, and node is not an HTML element whose local name is a\n            // formattable block name, set node to its parent.\"\n            while (isEditable(node.parentNode)\n            && inSameEditingHost(node, node.parentNode)\n            && !isHtmlElement(node, formattableBlockNames)) {\n                node = node.parentNode;\n            }\n\n            // \"Let current type be the empty string.\"\n            var currentType = \"\";\n\n            // \"If node is an editable HTML element whose local name is a\n            // formattable block name, and node is not the ancestor of a\n            // prohibited paragraph child, set current type to node's local\n            // name.\"\n            if (isEditable(node)\n            && isHtmlElement(node, formattableBlockNames)\n            && !getDescendants(node).some(isProhibitedParagraphChild)) {\n                currentType = node.tagName;\n            }\n\n            // \"If type is null, set type to current type.\"\n            if (type === null) {\n                type = currentType;\n\n            // \"Otherwise, if type does not equal current type, return true.\"\n            } else if (type != currentType) {\n                return true;\n            }\n        }\n\n        // \"Return false.\"\n        return false;\n    }, value: function() {\n        // \"If the active range is null, return the empty string.\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n\n        // \"Block-extend the active range, and let new range be the result.\"\n        var newRange = blockExtend(getActiveRange());\n\n        // \"Let node be the first visible editable node that is contained in\n        // new range and has no children. If there is no such node, return the\n        // empty string.\"\n        var nodes = getAllContainedNodes(newRange, function(node) {\n            return isVisible(node)\n                && isEditable(node)\n                && !node.hasChildNodes();\n        });\n        if (!nodes.length) {\n            return \"\";\n        }\n        var node = nodes[0];\n\n        // \"While node's parent is editable and in the same editing host as\n        // node, and node is not an HTML element whose local name is a\n        // formattable block name, set node to its parent.\"\n        while (isEditable(node.parentNode)\n        && inSameEditingHost(node, node.parentNode)\n        && !isHtmlElement(node, formattableBlockNames)) {\n            node = node.parentNode;\n        }\n\n        // \"If node is an editable HTML element whose local name is a\n        // formattable block name, and node is not the ancestor of a prohibited\n        // paragraph child, return node's local name, converted to ASCII\n        // lowercase.\"\n        if (isEditable(node)\n        && isHtmlElement(node, formattableBlockNames)\n        && !getDescendants(node).some(isProhibitedParagraphChild)) {\n            return node.tagName.toLowerCase();\n        }\n\n        // \"Return the empty string.\"\n        return \"\";\n    }\n};\n\n//@}\n///// The forwardDelete command /////\n//@{\ncommands.forwarddelete = {\n    preservesOverrides: true,\n    action: function() {\n        // \"If the active range is not collapsed, delete the selection and\n        // return true.\"\n        if (!getActiveRange().collapsed) {\n            deleteSelection();\n            return true;\n        }\n\n        // \"Canonicalize whitespace at the active range's start.\"\n        canonicalizeWhitespace(getActiveRange().startContainer, getActiveRange().startOffset);\n\n        // \"Let node and offset be the active range's start node and offset.\"\n        var node = getActiveRange().startContainer;\n        var offset = getActiveRange().startOffset;\n\n        // \"Repeat the following steps:\"\n        while (true) {\n            // \"If offset is the length of node and node's nextSibling is an\n            // editable invisible node, remove node's nextSibling from its\n            // parent.\"\n            if (offset == getNodeLength(node)\n            && isEditable(node.nextSibling)\n            && isInvisible(node.nextSibling)) {\n                node.parentNode.removeChild(node.nextSibling);\n\n            // \"Otherwise, if node has a child with index offset and that child\n            // is an editable invisible node, remove that child from node.\"\n            } else if (offset < node.childNodes.length\n            && isEditable(node.childNodes[offset])\n            && isInvisible(node.childNodes[offset])) {\n                node.removeChild(node.childNodes[offset]);\n\n            // \"Otherwise, if offset is the length of node and node is an\n            // inline node, or if node is invisible, set offset to one plus the\n            // index of node, then set node to its parent.\"\n            } else if ((offset == getNodeLength(node)\n            && isInlineNode(node))\n            || isInvisible(node)) {\n                offset = 1 + getNodeIndex(node);\n                node = node.parentNode;\n\n            // \"Otherwise, if node has a child with index offset and that child\n            // is neither a block node nor a br nor an img nor a collapsed\n            // block prop, set node to that child, then set offset to zero.\"\n            } else if (offset < node.childNodes.length\n            && !isBlockNode(node.childNodes[offset])\n            && !isHtmlElement(node.childNodes[offset], [\"br\", \"img\"])\n            && !isCollapsedBlockProp(node.childNodes[offset])) {\n                node = node.childNodes[offset];\n                offset = 0;\n\n            // \"Otherwise, break from this loop.\"\n            } else {\n                break;\n            }\n        }\n\n        // \"If node is a Text node and offset is not node's length:\"\n        if (node.nodeType == Node.TEXT_NODE\n        && offset != getNodeLength(node)) {\n            // \"Let end offset be offset plus one.\"\n            var endOffset = offset + 1;\n\n            // \"While end offset is not node's length and the end offsetth\n            // element of node's data has general category M when interpreted\n            // as a Unicode code point, add one to end offset.\"\n            //\n            // TODO: Not even going to try handling anything beyond the most\n            // basic combining marks, since I couldn't find a good list.  I\n            // special-case a few Hebrew diacritics too to test basic coverage\n            // of non-Latin stuff.\n            while (endOffset != node.length\n            && /^[\\u0300-\\u036f\\u0591-\\u05bd\\u05c1\\u05c2]$/.test(node.data[endOffset])) {\n                endOffset++;\n            }\n\n            // \"Call collapse(node, offset) on the context object's Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setStart(node, offset);\n\n            // \"Call extend(node, end offset) on the context object's\n            // Selection.\"\n            getSelection().extend(node, endOffset);\n            getActiveRange().setEnd(node, endOffset);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If node is an inline node, return true.\"\n        if (isInlineNode(node)) {\n            return true;\n        }\n\n        // \"If node has a child with index offset and that child is a br or hr\n        // or img, but is not a collapsed block prop:\"\n        if (offset < node.childNodes.length\n        && isHtmlElement(node.childNodes[offset], [\"br\", \"hr\", \"img\"])\n        && !isCollapsedBlockProp(node.childNodes[offset])) {\n            // \"Call collapse(node, offset) on the context object's Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setStart(node, offset);\n\n            // \"Call extend(node, offset + 1) on the context object's\n            // Selection.\"\n            getSelection().extend(node, offset + 1);\n            getActiveRange().setEnd(node, offset + 1);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"Let end node equal node and let end offset equal offset.\"\n        var endNode = node;\n        var endOffset = offset;\n\n        // \"If end node has a child with index end offset, and that child is a\n        // collapsed block prop, add one to end offset.\"\n        if (endOffset < endNode.childNodes.length\n        && isCollapsedBlockProp(endNode.childNodes[endOffset])) {\n            endOffset++;\n        }\n\n        // \"Repeat the following steps:\"\n        while (true) {\n            // \"If end offset is the length of end node, set end offset to one\n            // plus the index of end node and then set end node to its parent.\"\n            if (endOffset == getNodeLength(endNode)) {\n                endOffset = 1 + getNodeIndex(endNode);\n                endNode = endNode.parentNode;\n\n            // \"Otherwise, if end node has a an editable invisible child with\n            // index end offset, remove it from end node.\"\n            } else if (endOffset < endNode.childNodes.length\n            && isEditable(endNode.childNodes[endOffset])\n            && isInvisible(endNode.childNodes[endOffset])) {\n                endNode.removeChild(endNode.childNodes[endOffset]);\n\n            // \"Otherwise, break from this loop.\"\n            } else {\n                break;\n            }\n        }\n\n        // \"If the child of end node with index end offset minus one is a\n        // table, return true.\"\n        if (isHtmlElement(endNode.childNodes[endOffset - 1], \"table\")) {\n            return true;\n        }\n\n        // \"If the child of end node with index end offset is a table:\"\n        if (isHtmlElement(endNode.childNodes[endOffset], \"table\")) {\n            // \"Call collapse(end node, end offset) on the context object's\n            // Selection.\"\n            getSelection().collapse(endNode, endOffset);\n            getActiveRange().setStart(endNode, endOffset);\n\n            // \"Call extend(end node, end offset + 1) on the context object's\n            // Selection.\"\n            getSelection().extend(endNode, endOffset + 1);\n            getActiveRange().setEnd(endNode, endOffset + 1);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If offset is the length of node, and the child of end node with\n        // index end offset is an hr or br:\"\n        if (offset == getNodeLength(node)\n        && isHtmlElement(endNode.childNodes[endOffset], [\"br\", \"hr\"])) {\n            // \"Call collapse(end node, end offset) on the context object's\n            // Selection.\"\n            getSelection().collapse(endNode, endOffset);\n            getActiveRange().setStart(endNode, endOffset);\n\n            // \"Call extend(end node, end offset + 1) on the context object's\n            // Selection.\"\n            getSelection().extend(endNode, endOffset + 1);\n            getActiveRange().setEnd(endNode, endOffset + 1);\n\n            // \"Delete the selection.\"\n            deleteSelection();\n\n            // \"Call collapse(node, offset) on the Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setStart(node, offset);\n            getActiveRange().collapse(true);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"While end node has a child with index end offset:\"\n        while (endOffset < endNode.childNodes.length) {\n            // \"If end node's child with index end offset is editable and\n            // invisible, remove it from end node.\"\n            if (isEditable(endNode.childNodes[endOffset])\n            && isInvisible(endNode.childNodes[endOffset])) {\n                endNode.removeChild(endNode.childNodes[endOffset]);\n\n            // \"Otherwise, set end node to its child with index end offset and\n            // set end offset to zero.\"\n            } else {\n                endNode = endNode.childNodes[endOffset];\n                endOffset = 0;\n            }\n        }\n\n        // \"Call collapse(node, offset) on the context object's Selection.\"\n        getSelection().collapse(node, offset);\n        getActiveRange().setStart(node, offset);\n\n        // \"Call extend(end node, end offset) on the context object's\n        // Selection.\"\n        getSelection().extend(endNode, endOffset);\n        getActiveRange().setEnd(endNode, endOffset);\n\n        // \"Delete the selection.\"\n        deleteSelection();\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The indent command /////\n//@{\ncommands.indent = {\n    preservesOverrides: true,\n    action: function() {\n        // \"Let items be a list of all lis that are ancestor containers of the\n        // active range's start and/or end node.\"\n        //\n        // Has to be in tree order, remember!\n        var items = [];\n        for (var node = getActiveRange().endContainer; node != getActiveRange().commonAncestorContainer; node = node.parentNode) {\n            if (isHtmlElement(node, \"LI\")) {\n                items.unshift(node);\n            }\n        }\n        for (var node = getActiveRange().startContainer; node != getActiveRange().commonAncestorContainer; node = node.parentNode) {\n            if (isHtmlElement(node, \"LI\")) {\n                items.unshift(node);\n            }\n        }\n        for (var node = getActiveRange().commonAncestorContainer; node; node = node.parentNode) {\n            if (isHtmlElement(node, \"LI\")) {\n                items.unshift(node);\n            }\n        }\n\n        // \"For each item in items, normalize sublists of item.\"\n        for (var i = 0; i < items.length; i++) {\n            normalizeSublists(items[i]);\n        }\n\n        // \"Block-extend the active range, and let new range be the result.\"\n        var newRange = blockExtend(getActiveRange());\n\n        // \"Let node list be a list of nodes, initially empty.\"\n        var nodeList = [];\n\n        // \"For each node node contained in new range, if node is editable and\n        // is an allowed child of \"div\" or \"ol\" and if the last member of node\n        // list (if any) is not an ancestor of node, append node to node list.\"\n        nodeList = getContainedNodes(newRange, function(node) {\n            return isEditable(node)\n                && (isAllowedChild(node, \"div\")\n                || isAllowedChild(node, \"ol\"));\n        });\n\n        // \"If the first visible member of node list is an li whose parent is\n        // an ol or ul:\"\n        if (isHtmlElement(nodeList.filter(isVisible)[0], \"li\")\n        && isHtmlElement(nodeList.filter(isVisible)[0].parentNode, [\"ol\", \"ul\"])) {\n            // \"Let sibling be node list's first visible member's\n            // previousSibling.\"\n            var sibling = nodeList.filter(isVisible)[0].previousSibling;\n\n            // \"While sibling is invisible, set sibling to its\n            // previousSibling.\"\n            while (isInvisible(sibling)) {\n                sibling = sibling.previousSibling;\n            }\n\n            // \"If sibling is an li, normalize sublists of sibling.\"\n            if (isHtmlElement(sibling, \"li\")) {\n                normalizeSublists(sibling);\n            }\n        }\n\n        // \"While node list is not empty:\"\n        while (nodeList.length) {\n            // \"Let sublist be a list of nodes, initially empty.\"\n            var sublist = [];\n\n            // \"Remove the first member of node list and append it to sublist.\"\n            sublist.push(nodeList.shift());\n\n            // \"While the first member of node list is the nextSibling of the\n            // last member of sublist, remove the first member of node list and\n            // append it to sublist.\"\n            while (nodeList.length\n            && nodeList[0] == sublist[sublist.length - 1].nextSibling) {\n                sublist.push(nodeList.shift());\n            }\n\n            // \"Indent sublist.\"\n            indentNodes(sublist);\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertHorizontalRule command /////\n//@{\ncommands.inserthorizontalrule = {\n    preservesOverrides: true,\n    action: function() {\n        // \"Let start node, start offset, end node, and end offset be the\n        // active range's start and end nodes and offsets.\"\n        var startNode = getActiveRange().startContainer;\n        var startOffset = getActiveRange().startOffset;\n        var endNode = getActiveRange().endContainer;\n        var endOffset = getActiveRange().endOffset;\n\n        // \"While start offset is 0 and start node's parent is not null, set\n        // start offset to start node's index, then set start node to its\n        // parent.\"\n        while (startOffset == 0\n        && startNode.parentNode) {\n            startOffset = getNodeIndex(startNode);\n            startNode = startNode.parentNode;\n        }\n\n        // \"While end offset is end node's length, and end node's parent is not\n        // null, set end offset to one plus end node's index, then set end node\n        // to its parent.\"\n        while (endOffset == getNodeLength(endNode)\n        && endNode.parentNode) {\n            endOffset = 1 + getNodeIndex(endNode);\n            endNode = endNode.parentNode;\n        }\n\n        // \"Call collapse(start node, start offset) on the context object's\n        // Selection.\"\n        getSelection().collapse(startNode, startOffset);\n        getActiveRange().setStart(startNode, startOffset);\n\n        // \"Call extend(end node, end offset) on the context object's\n        // Selection.\"\n        getSelection().extend(endNode, endOffset);\n        getActiveRange().setEnd(endNode, endOffset);\n\n        // \"Delete the selection, with block merging false.\"\n        deleteSelection({blockMerging: false});\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"If the active range's start node is a Text node and its start\n        // offset is zero, call collapse() on the context object's Selection,\n        // with first argument the active range's start node's parent and\n        // second argument the active range's start node's index.\"\n        if (getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().startOffset == 0) {\n            var newNode = getActiveRange().startContainer.parentNode;\n            var newOffset = getNodeIndex(getActiveRange().startContainer);\n            getSelection().collapse(newNode, newOffset);\n            getActiveRange().setStart(newNode, newOffset);\n            getActiveRange().collapse(true);\n        }\n\n        // \"If the active range's start node is a Text node and its start\n        // offset is the length of its start node, call collapse() on the\n        // context object's Selection, with first argument the active range's\n        // start node's parent, and the second argument one plus the active\n        // range's start node's index.\"\n        if (getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().startOffset == getNodeLength(getActiveRange().startContainer)) {\n            var newNode = getActiveRange().startContainer.parentNode;\n            var newOffset = 1 + getNodeIndex(getActiveRange().startContainer);\n            getSelection().collapse(newNode, newOffset);\n            getActiveRange().setStart(newNode, newOffset);\n            getActiveRange().collapse(true);\n        }\n\n        // \"Let hr be the result of calling createElement(\"hr\") on the\n        // context object.\"\n        var hr = document.createElement(\"hr\");\n\n        // \"Run insertNode(hr) on the active range.\"\n        getActiveRange().insertNode(hr);\n\n        // \"Fix disallowed ancestors of hr.\"\n        fixDisallowedAncestors(hr);\n\n        // \"Run collapse() on the context object's Selection, with first\n        // argument hr's parent and the second argument equal to one plus hr's\n        // index.\"\n        getSelection().collapse(hr.parentNode, 1 + getNodeIndex(hr));\n        getActiveRange().setStart(hr.parentNode, 1 + getNodeIndex(hr));\n        getActiveRange().collapse(true);\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertHTML command /////\n//@{\ncommands.inserthtml = {\n    preservesOverrides: true,\n    action: function(value) {\n        // \"Delete the selection.\"\n        deleteSelection();\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"Let frag be the result of calling createContextualFragment(value)\n        // on the active range.\"\n        var frag = getActiveRange().createContextualFragment(value);\n\n        // \"Let last child be the lastChild of frag.\"\n        var lastChild = frag.lastChild;\n\n        // \"If last child is null, return true.\"\n        if (!lastChild) {\n            return true;\n        }\n\n        // \"Let descendants be all descendants of frag.\"\n        var descendants = getDescendants(frag);\n\n        // \"If the active range's start node is a block node:\"\n        if (isBlockNode(getActiveRange().startContainer)) {\n            // \"Let collapsed block props be all editable collapsed block prop\n            // children of the active range's start node that have index\n            // greater than or equal to the active range's start offset.\"\n            //\n            // \"For each node in collapsed block props, remove node from its\n            // parent.\"\n            [].filter.call(getActiveRange().startContainer.childNodes, function(node) {\n                return isEditable(node)\n                    && isCollapsedBlockProp(node)\n                    && getNodeIndex(node) >= getActiveRange().startOffset;\n            }).forEach(function(node) {\n                node.parentNode.removeChild(node);\n            });\n        }\n\n        // \"Call insertNode(frag) on the active range.\"\n        getActiveRange().insertNode(frag);\n\n        // \"If the active range's start node is a block node with no visible\n        // children, call createElement(\"br\") on the context object and append\n        // the result as the last child of the active range's start node.\"\n        if (isBlockNode(getActiveRange().startContainer)\n        && ![].some.call(getActiveRange().startContainer.childNodes, isVisible)) {\n            getActiveRange().startContainer.appendChild(document.createElement(\"br\"));\n        }\n\n        // \"Call collapse() on the context object's Selection, with last\n        // child's parent as the first argument and one plus its index as the\n        // second.\"\n        getActiveRange().setStart(lastChild.parentNode, 1 + getNodeIndex(lastChild));\n        getActiveRange().setEnd(lastChild.parentNode, 1 + getNodeIndex(lastChild));\n\n        // \"Fix disallowed ancestors of each member of descendants.\"\n        for (var i = 0; i < descendants.length; i++) {\n            fixDisallowedAncestors(descendants[i]);\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertImage command /////\n//@{\ncommands.insertimage = {\n    preservesOverrides: true,\n    action: function(value) {\n        // \"If value is the empty string, return false.\"\n        if (value === \"\") {\n            return false;\n        }\n\n        // \"Delete the selection, with strip wrappers false.\"\n        deleteSelection({stripWrappers: false});\n\n        // \"Let range be the active range.\"\n        var range = getActiveRange();\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"If range's start node is a block node whose sole child is a br, and\n        // its start offset is 0, remove its start node's child from it.\"\n        if (isBlockNode(range.startContainer)\n        && range.startContainer.childNodes.length == 1\n        && isHtmlElement(range.startContainer.firstChild, \"br\")\n        && range.startOffset == 0) {\n            range.startContainer.removeChild(range.startContainer.firstChild);\n        }\n\n        // \"Let img be the result of calling createElement(\"img\") on the\n        // context object.\"\n        var img = document.createElement(\"img\");\n\n        // \"Run setAttribute(\"src\", value) on img.\"\n        img.setAttribute(\"src\", value);\n\n        // \"Run insertNode(img) on the range.\"\n        range.insertNode(img);\n\n        // \"Run collapse() on the Selection, with first argument equal to the\n        // parent of img and the second argument equal to one plus the index of\n        // img.\"\n        //\n        // Not everyone actually supports collapse(), so we do it manually\n        // instead.  Also, we need to modify the actual range we're given as\n        // well, for the sake of autoimplementation.html's range-filling-in.\n        range.setStart(img.parentNode, 1 + getNodeIndex(img));\n        range.setEnd(img.parentNode, 1 + getNodeIndex(img));\n        getSelection().removeAllRanges();\n        getSelection().addRange(range);\n\n        // IE adds width and height attributes for some reason, so remove those\n        // to actually do what the spec says.\n        img.removeAttribute(\"width\");\n        img.removeAttribute(\"height\");\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertLineBreak command /////\n//@{\ncommands.insertlinebreak = {\n    preservesOverrides: true,\n    action: function(value) {\n        // \"Delete the selection, with strip wrappers false.\"\n        deleteSelection({stripWrappers: false});\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"If the active range's start node is an Element, and \"br\" is not an\n        // allowed child of it, return true.\"\n        if (getActiveRange().startContainer.nodeType == Node.ELEMENT_NODE\n        && !isAllowedChild(\"br\", getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"If the active range's start node is not an Element, and \"br\" is not\n        // an allowed child of the active range's start node's parent, return\n        // true.\"\n        if (getActiveRange().startContainer.nodeType != Node.ELEMENT_NODE\n        && !isAllowedChild(\"br\", getActiveRange().startContainer.parentNode)) {\n            return true;\n        }\n\n        // \"If the active range's start node is a Text node and its start\n        // offset is zero, call collapse() on the context object's Selection,\n        // with first argument equal to the active range's start node's parent\n        // and second argument equal to the active range's start node's index.\"\n        if (getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().startOffset == 0) {\n            var newNode = getActiveRange().startContainer.parentNode;\n            var newOffset = getNodeIndex(getActiveRange().startContainer);\n            getSelection().collapse(newNode, newOffset);\n            getActiveRange().setStart(newNode, newOffset);\n            getActiveRange().setEnd(newNode, newOffset);\n        }\n\n        // \"If the active range's start node is a Text node and its start\n        // offset is the length of its start node, call collapse() on the\n        // context object's Selection, with first argument equal to the active\n        // range's start node's parent and second argument equal to one plus\n        // the active range's start node's index.\"\n        if (getActiveRange().startContainer.nodeType == Node.TEXT_NODE\n        && getActiveRange().startOffset == getNodeLength(getActiveRange().startContainer)) {\n            var newNode = getActiveRange().startContainer.parentNode;\n            var newOffset = 1 + getNodeIndex(getActiveRange().startContainer);\n            getSelection().collapse(newNode, newOffset);\n            getActiveRange().setStart(newNode, newOffset);\n            getActiveRange().setEnd(newNode, newOffset);\n        }\n\n        // \"Let br be the result of calling createElement(\"br\") on the context\n        // object.\"\n        var br = document.createElement(\"br\");\n\n        // \"Call insertNode(br) on the active range.\"\n        getActiveRange().insertNode(br);\n\n        // \"Call collapse() on the context object's Selection, with br's parent\n        // as the first argument and one plus br's index as the second\n        // argument.\"\n        getSelection().collapse(br.parentNode, 1 + getNodeIndex(br));\n        getActiveRange().setStart(br.parentNode, 1 + getNodeIndex(br));\n        getActiveRange().setEnd(br.parentNode, 1 + getNodeIndex(br));\n\n        // \"If br is a collapsed line break, call createElement(\"br\") on the\n        // context object and let extra br be the result, then call\n        // insertNode(extra br) on the active range.\"\n        if (isCollapsedLineBreak(br)) {\n            getActiveRange().insertNode(document.createElement(\"br\"));\n\n            // Compensate for nonstandard implementations of insertNode\n            getSelection().collapse(br.parentNode, 1 + getNodeIndex(br));\n            getActiveRange().setStart(br.parentNode, 1 + getNodeIndex(br));\n            getActiveRange().setEnd(br.parentNode, 1 + getNodeIndex(br));\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertOrderedList command /////\n//@{\ncommands.insertorderedlist = {\n    preservesOverrides: true,\n    // \"Toggle lists with tag name \"ol\", then return true.\"\n    action: function() { toggleLists(\"ol\"); return true },\n    // \"True if the selection's list state is \"mixed\" or \"mixed ol\", false\n    // otherwise.\"\n    indeterm: function() { return /^mixed( ol)?$/.test(getSelectionListState()) },\n    // \"True if the selection's list state is \"ol\", false otherwise.\"\n    state: function() { return getSelectionListState() == \"ol\" },\n};\n\n//@}\n///// The insertParagraph command /////\n//@{\ncommands.insertparagraph = {\n    preservesOverrides: true,\n    action: function() {\n        // \"Delete the selection.\"\n        deleteSelection();\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"Let node and offset be the active range's start node and offset.\"\n        var node = getActiveRange().startContainer;\n        var offset = getActiveRange().startOffset;\n\n        // \"If node is a Text node, and offset is neither 0 nor the length of\n        // node, call splitText(offset) on node.\"\n        if (node.nodeType == Node.TEXT_NODE\n        && offset != 0\n        && offset != getNodeLength(node)) {\n            node.splitText(offset);\n        }\n\n        // \"If node is a Text node and offset is its length, set offset to one\n        // plus the index of node, then set node to its parent.\"\n        if (node.nodeType == Node.TEXT_NODE\n        && offset == getNodeLength(node)) {\n            offset = 1 + getNodeIndex(node);\n            node = node.parentNode;\n        }\n\n        // \"If node is a Text or Comment node, set offset to the index of node,\n        // then set node to its parent.\"\n        if (node.nodeType == Node.TEXT_NODE\n        || node.nodeType == Node.COMMENT_NODE) {\n            offset = getNodeIndex(node);\n            node = node.parentNode;\n        }\n\n        // \"Call collapse(node, offset) on the context object's Selection.\"\n        getSelection().collapse(node, offset);\n        getActiveRange().setStart(node, offset);\n        getActiveRange().setEnd(node, offset);\n\n        // \"Let container equal node.\"\n        var container = node;\n\n        // \"While container is not a single-line container, and container's\n        // parent is editable and in the same editing host as node, set\n        // container to its parent.\"\n        while (!isSingleLineContainer(container)\n        && isEditable(container.parentNode)\n        && inSameEditingHost(node, container.parentNode)) {\n            container = container.parentNode;\n        }\n\n        // \"If container is an editable single-line container in the same\n        // editing host as node, and its local name is \"p\" or \"div\":\"\n        if (isEditable(container)\n        && isSingleLineContainer(container)\n        && inSameEditingHost(node, container.parentNode)\n        && (container.tagName == \"P\" || container.tagName == \"DIV\")) {\n            // \"Let outer container equal container.\"\n            var outerContainer = container;\n\n            // \"While outer container is not a dd or dt or li, and outer\n            // container's parent is editable, set outer container to its\n            // parent.\"\n            while (!isHtmlElement(outerContainer, [\"dd\", \"dt\", \"li\"])\n            && isEditable(outerContainer.parentNode)) {\n                outerContainer = outerContainer.parentNode;\n            }\n\n            // \"If outer container is a dd or dt or li, set container to outer\n            // container.\"\n            if (isHtmlElement(outerContainer, [\"dd\", \"dt\", \"li\"])) {\n                container = outerContainer;\n            }\n        }\n\n        // \"If container is not editable or not in the same editing host as\n        // node or is not a single-line container:\"\n        if (!isEditable(container)\n        || !inSameEditingHost(container, node)\n        || !isSingleLineContainer(container)) {\n            // \"Let tag be the default single-line container name.\"\n            var tag = defaultSingleLineContainerName;\n\n            // \"Block-extend the active range, and let new range be the\n            // result.\"\n            var newRange = blockExtend(getActiveRange());\n\n            // \"Let node list be a list of nodes, initially empty.\"\n            //\n            // \"Append to node list the first node in tree order that is\n            // contained in new range and is an allowed child of \"p\", if any.\"\n            var nodeList = getContainedNodes(newRange, function(node) { return isAllowedChild(node, \"p\") })\n                .slice(0, 1);\n\n            // \"If node list is empty:\"\n            if (!nodeList.length) {\n                // \"If tag is not an allowed child of the active range's start\n                // node, return true.\"\n                if (!isAllowedChild(tag, getActiveRange().startContainer)) {\n                    return true;\n                }\n\n                // \"Set container to the result of calling createElement(tag)\n                // on the context object.\"\n                container = document.createElement(tag);\n\n                // \"Call insertNode(container) on the active range.\"\n                getActiveRange().insertNode(container);\n\n                // \"Call createElement(\"br\") on the context object, and append\n                // the result as the last child of container.\"\n                container.appendChild(document.createElement(\"br\"));\n\n                // \"Call collapse(container, 0) on the context object's\n                // Selection.\"\n                getSelection().collapse(container, 0);\n                getActiveRange().setStart(container, 0);\n                getActiveRange().setEnd(container, 0);\n\n                // \"Return true.\"\n                return true;\n            }\n\n            // \"While the nextSibling of the last member of node list is not\n            // null and is an allowed child of \"p\", append it to node list.\"\n            while (nodeList[nodeList.length - 1].nextSibling\n            && isAllowedChild(nodeList[nodeList.length - 1].nextSibling, \"p\")) {\n                nodeList.push(nodeList[nodeList.length - 1].nextSibling);\n            }\n\n            // \"Wrap node list, with sibling criteria returning false and new\n            // parent instructions returning the result of calling\n            // createElement(tag) on the context object. Set container to the\n            // result.\"\n            container = wrap(nodeList,\n                function() { return false },\n                function() { return document.createElement(tag) }\n            );\n        }\n\n        // \"If container's local name is \"address\", \"listing\", or \"pre\":\"\n        if (container.tagName == \"ADDRESS\"\n        || container.tagName == \"LISTING\"\n        || container.tagName == \"PRE\") {\n            // \"Let br be the result of calling createElement(\"br\") on the\n            // context object.\"\n            var br = document.createElement(\"br\");\n\n            // \"Call insertNode(br) on the active range.\"\n            getActiveRange().insertNode(br);\n\n            // \"Call collapse(node, offset + 1) on the context object's\n            // Selection.\"\n            getSelection().collapse(node, offset + 1);\n            getActiveRange().setStart(node, offset + 1);\n            getActiveRange().setEnd(node, offset + 1);\n\n            // \"If br is the last descendant of container, let br be the result\n            // of calling createElement(\"br\") on the context object, then call\n            // insertNode(br) on the active range.\"\n            //\n            // Work around browser bugs: some browsers select the\n            // newly-inserted node, not per spec.\n            if (!isDescendant(nextNode(br), container)) {\n                getActiveRange().insertNode(document.createElement(\"br\"));\n                getSelection().collapse(node, offset + 1);\n                getActiveRange().setEnd(node, offset + 1);\n            }\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If container's local name is \"li\", \"dt\", or \"dd\"; and either it has\n        // no children or it has a single child and that child is a br:\"\n        if ([\"LI\", \"DT\", \"DD\"].indexOf(container.tagName) != -1\n        && (!container.hasChildNodes()\n        || (container.childNodes.length == 1\n        && isHtmlElement(container.firstChild, \"br\")))) {\n            // \"Split the parent of the one-node list consisting of container.\"\n            splitParent([container]);\n\n            // \"If container has no children, call createElement(\"br\") on the\n            // context object and append the result as the last child of\n            // container.\"\n            if (!container.hasChildNodes()) {\n                container.appendChild(document.createElement(\"br\"));\n            }\n\n            // \"If container is a dd or dt, and it is not an allowed child of\n            // any of its ancestors in the same editing host, set the tag name\n            // of container to the default single-line container name and let\n            // container be the result.\"\n            if (isHtmlElement(container, [\"dd\", \"dt\"])\n            && getAncestors(container).every(function(ancestor) {\n                return !inSameEditingHost(container, ancestor)\n                    || !isAllowedChild(container, ancestor)\n            })) {\n                container = setTagName(container, defaultSingleLineContainerName);\n            }\n\n            // \"Fix disallowed ancestors of container.\"\n            fixDisallowedAncestors(container);\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"Let new line range be a new range whose start is the same as\n        // the active range's, and whose end is (container, length of\n        // container).\"\n        var newLineRange = document.createRange();\n        newLineRange.setStart(getActiveRange().startContainer, getActiveRange().startOffset);\n        newLineRange.setEnd(container, getNodeLength(container));\n\n        // \"While new line range's start offset is zero and its start node is\n        // not a prohibited paragraph child, set its start to (parent of start\n        // node, index of start node).\"\n        while (newLineRange.startOffset == 0\n        && !isProhibitedParagraphChild(newLineRange.startContainer)) {\n            newLineRange.setStart(newLineRange.startContainer.parentNode, getNodeIndex(newLineRange.startContainer));\n        }\n\n        // \"While new line range's start offset is the length of its start node\n        // and its start node is not a prohibited paragraph child, set its\n        // start to (parent of start node, 1 + index of start node).\"\n        while (newLineRange.startOffset == getNodeLength(newLineRange.startContainer)\n        && !isProhibitedParagraphChild(newLineRange.startContainer)) {\n            newLineRange.setStart(newLineRange.startContainer.parentNode, 1 + getNodeIndex(newLineRange.startContainer));\n        }\n\n        // \"Let end of line be true if new line range contains either nothing\n        // or a single br, and false otherwise.\"\n        var containedInNewLineRange = getContainedNodes(newLineRange);\n        var endOfLine = !containedInNewLineRange.length\n            || (containedInNewLineRange.length == 1\n            && isHtmlElement(containedInNewLineRange[0], \"br\"));\n\n        // \"If the local name of container is \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", or\n        // \"h6\", and end of line is true, let new container name be the default\n        // single-line container name.\"\n        var newContainerName;\n        if (/^H[1-6]$/.test(container.tagName)\n        && endOfLine) {\n            newContainerName = defaultSingleLineContainerName;\n\n        // \"Otherwise, if the local name of container is \"dt\" and end of line\n        // is true, let new container name be \"dd\".\"\n        } else if (container.tagName == \"DT\"\n        && endOfLine) {\n            newContainerName = \"dd\";\n\n        // \"Otherwise, if the local name of container is \"dd\" and end of line\n        // is true, let new container name be \"dt\".\"\n        } else if (container.tagName == \"DD\"\n        && endOfLine) {\n            newContainerName = \"dt\";\n\n        // \"Otherwise, let new container name be the local name of container.\"\n        } else {\n            newContainerName = container.tagName.toLowerCase();\n        }\n\n        // \"Let new container be the result of calling createElement(new\n        // container name) on the context object.\"\n        var newContainer = document.createElement(newContainerName);\n\n        // \"Copy all attributes of container to new container.\"\n        for (var i = 0; i < container.attributes.length; i++) {\n            newContainer.setAttributeNS(container.attributes[i].namespaceURI, container.attributes[i].name, container.attributes[i].value);\n        }\n\n        // \"If new container has an id attribute, unset it.\"\n        newContainer.removeAttribute(\"id\");\n\n        // \"Insert new container into the parent of container immediately after\n        // container.\"\n        container.parentNode.insertBefore(newContainer, container.nextSibling);\n\n        // \"Let contained nodes be all nodes contained in new line range.\"\n        var containedNodes = getAllContainedNodes(newLineRange);\n\n        // \"Let frag be the result of calling extractContents() on new line\n        // range.\"\n        var frag = newLineRange.extractContents();\n\n        // \"Unset the id attribute (if any) of each Element descendant of frag\n        // that is not in contained nodes.\"\n        var descendants = getDescendants(frag);\n        for (var i = 0; i < descendants.length; i++) {\n            if (descendants[i].nodeType == Node.ELEMENT_NODE\n            && containedNodes.indexOf(descendants[i]) == -1) {\n                descendants[i].removeAttribute(\"id\");\n            }\n        }\n\n        // \"Call appendChild(frag) on new container.\"\n        newContainer.appendChild(frag);\n\n        // \"While container's lastChild is a prohibited paragraph child, set\n        // container to its lastChild.\"\n        while (isProhibitedParagraphChild(container.lastChild)) {\n            container = container.lastChild;\n        }\n\n        // \"While new container's lastChild is a prohibited paragraph child,\n        // set new container to its lastChild.\"\n        while (isProhibitedParagraphChild(newContainer.lastChild)) {\n            newContainer = newContainer.lastChild;\n        }\n\n        // \"If container has no visible children, call createElement(\"br\") on\n        // the context object, and append the result as the last child of\n        // container.\"\n        if (![].some.call(container.childNodes, isVisible)) {\n            container.appendChild(document.createElement(\"br\"));\n        }\n\n        // \"If new container has no visible children, call createElement(\"br\")\n        // on the context object, and append the result as the last child of\n        // new container.\"\n        if (![].some.call(newContainer.childNodes, isVisible)) {\n            newContainer.appendChild(document.createElement(\"br\"));\n        }\n\n        // \"Call collapse(new container, 0) on the context object's Selection.\"\n        getSelection().collapse(newContainer, 0);\n        getActiveRange().setStart(newContainer, 0);\n        getActiveRange().setEnd(newContainer, 0);\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertText command /////\n//@{\ncommands.inserttext = {\n    action: function(value) {\n        // \"Delete the selection, with strip wrappers false.\"\n        deleteSelection({stripWrappers: false});\n\n        // \"If the active range's start node is neither editable nor an editing\n        // host, return true.\"\n        if (!isEditable(getActiveRange().startContainer)\n        && !isEditingHost(getActiveRange().startContainer)) {\n            return true;\n        }\n\n        // \"If value's length is greater than one:\"\n        if (value.length > 1) {\n            // \"For each element el in value, take the action for the\n            // insertText command, with value equal to el.\"\n            for (var i = 0; i < value.length; i++) {\n                commands.inserttext.action(value[i]);\n            }\n\n            // \"Return true.\"\n            return true;\n        }\n\n        // \"If value is the empty string, return true.\"\n        if (value == \"\") {\n            return true;\n        }\n\n        // \"If value is a newline (U+00A0), take the action for the\n        // insertParagraph command and return true.\"\n        if (value == \"\\n\") {\n            commands.insertparagraph.action();\n            return true;\n        }\n\n        // \"Let node and offset be the active range's start node and offset.\"\n        var node = getActiveRange().startContainer;\n        var offset = getActiveRange().startOffset;\n\n        // \"If node has a child whose index is offset â 1, and that child is a\n        // Text node, set node to that child, then set offset to node's\n        // length.\"\n        if (0 <= offset - 1\n        && offset - 1 < node.childNodes.length\n        && node.childNodes[offset - 1].nodeType == Node.TEXT_NODE) {\n            node = node.childNodes[offset - 1];\n            offset = getNodeLength(node);\n        }\n\n        // \"If node has a child whose index is offset, and that child is a Text\n        // node, set node to that child, then set offset to zero.\"\n        if (0 <= offset\n        && offset < node.childNodes.length\n        && node.childNodes[offset].nodeType == Node.TEXT_NODE) {\n            node = node.childNodes[offset];\n            offset = 0;\n        }\n\n        // \"Record current overrides, and let overrides be the result.\"\n        var overrides = recordCurrentOverrides();\n\n        // \"Call collapse(node, offset) on the context object's Selection.\"\n        getSelection().collapse(node, offset);\n        getActiveRange().setStart(node, offset);\n        getActiveRange().setEnd(node, offset);\n\n        // \"Canonicalize whitespace at (node, offset).\"\n        canonicalizeWhitespace(node, offset);\n\n        // \"Let (node, offset) be the active range's start.\"\n        node = getActiveRange().startContainer;\n        offset = getActiveRange().startOffset;\n\n        // \"If node is a Text node:\"\n        if (node.nodeType == Node.TEXT_NODE) {\n            // \"Call insertData(offset, value) on node.\"\n            node.insertData(offset, value);\n\n            // \"Call collapse(node, offset) on the context object's Selection.\"\n            getSelection().collapse(node, offset);\n            getActiveRange().setStart(node, offset);\n\n            // \"Call extend(node, offset + 1) on the context object's\n            // Selection.\"\n            //\n            // Work around WebKit bug: the extend() can throw if the text we're\n            // adding is trailing whitespace.\n            try { getSelection().extend(node, offset + 1); } catch(e) {}\n            getActiveRange().setEnd(node, offset + 1);\n\n        // \"Otherwise:\"\n        } else {\n            // \"If node has only one child, which is a collapsed line break,\n            // remove its child from it.\"\n            //\n            // FIXME: IE incorrectly returns false here instead of true\n            // sometimes?\n            if (node.childNodes.length == 1\n            && isCollapsedLineBreak(node.firstChild)) {\n                node.removeChild(node.firstChild);\n            }\n\n            // \"Let text be the result of calling createTextNode(value) on the\n            // context object.\"\n            var text = document.createTextNode(value);\n\n            // \"Call insertNode(text) on the active range.\"\n            getActiveRange().insertNode(text);\n\n            // \"Call collapse(text, 0) on the context object's Selection.\"\n            getSelection().collapse(text, 0);\n            getActiveRange().setStart(text, 0);\n\n            // \"Call extend(text, 1) on the context object's Selection.\"\n            getSelection().extend(text, 1);\n            getActiveRange().setEnd(text, 1);\n        }\n\n        // \"Restore states and values from overrides.\"\n        restoreStatesAndValues(overrides);\n\n        // \"Canonicalize whitespace at the active range's start, with fix\n        // collapsed space false.\"\n        canonicalizeWhitespace(getActiveRange().startContainer, getActiveRange().startOffset, false);\n\n        // \"Canonicalize whitespace at the active range's end, with fix\n        // collapsed space false.\"\n        canonicalizeWhitespace(getActiveRange().endContainer, getActiveRange().endOffset, false);\n\n        // \"If value is a space character, autolink the active range's start.\"\n        if (/^[ \\t\\n\\f\\r]$/.test(value)) {\n            autolink(getActiveRange().startContainer, getActiveRange().startOffset);\n        }\n\n        // \"Call collapseToEnd() on the context object's Selection.\"\n        //\n        // Work around WebKit bug: sometimes it blows up the selection and\n        // throws, which we don't want.\n        try { getSelection().collapseToEnd(); } catch(e) {}\n        getActiveRange().collapse(false);\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The insertUnorderedList command /////\n//@{\ncommands.insertunorderedlist = {\n    preservesOverrides: true,\n    // \"Toggle lists with tag name \"ul\", then return true.\"\n    action: function() { toggleLists(\"ul\"); return true },\n    // \"True if the selection's list state is \"mixed\" or \"mixed ul\", false\n    // otherwise.\"\n    indeterm: function() { return /^mixed( ul)?$/.test(getSelectionListState()) },\n    // \"True if the selection's list state is \"ul\", false otherwise.\"\n    state: function() { return getSelectionListState() == \"ul\" },\n};\n\n//@}\n///// The justifyCenter command /////\n//@{\ncommands.justifycenter = {\n    preservesOverrides: true,\n    // \"Justify the selection with alignment \"center\", then return true.\"\n    action: function() { justifySelection(\"center\"); return true },\n    indeterm: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if among visible editable nodes that\n        // are contained in the result and have no children, at least one has\n        // alignment value \"center\" and at least one does not. Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.some(function(node) { return getAlignmentValue(node) == \"center\" })\n            && nodes.some(function(node) { return getAlignmentValue(node) != \"center\" });\n    }, state: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if there is at least one visible\n        // editable node that is contained in the result and has no children,\n        // and all such nodes have alignment value \"center\".  Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.length\n            && nodes.every(function(node) { return getAlignmentValue(node) == \"center\" });\n    }, value: function() {\n        // \"Return the empty string if the active range is null.  Otherwise,\n        // block-extend the active range, and return the alignment value of the\n        // first visible editable node that is contained in the result and has\n        // no children. If there is no such node, return \"left\".\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        if (nodes.length) {\n            return getAlignmentValue(nodes[0]);\n        } else {\n            return \"left\";\n        }\n    },\n};\n\n//@}\n///// The justifyFull command /////\n//@{\ncommands.justifyfull = {\n    preservesOverrides: true,\n    // \"Justify the selection with alignment \"justify\", then return true.\"\n    action: function() { justifySelection(\"justify\"); return true },\n    indeterm: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if among visible editable nodes that\n        // are contained in the result and have no children, at least one has\n        // alignment value \"justify\" and at least one does not. Otherwise\n        // return false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.some(function(node) { return getAlignmentValue(node) == \"justify\" })\n            && nodes.some(function(node) { return getAlignmentValue(node) != \"justify\" });\n    }, state: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if there is at least one visible\n        // editable node that is contained in the result and has no children,\n        // and all such nodes have alignment value \"justify\".  Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.length\n            && nodes.every(function(node) { return getAlignmentValue(node) == \"justify\" });\n    }, value: function() {\n        // \"Return the empty string if the active range is null.  Otherwise,\n        // block-extend the active range, and return the alignment value of the\n        // first visible editable node that is contained in the result and has\n        // no children. If there is no such node, return \"left\".\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        if (nodes.length) {\n            return getAlignmentValue(nodes[0]);\n        } else {\n            return \"left\";\n        }\n    },\n};\n\n//@}\n///// The justifyLeft command /////\n//@{\ncommands.justifyleft = {\n    preservesOverrides: true,\n    // \"Justify the selection with alignment \"left\", then return true.\"\n    action: function() { justifySelection(\"left\"); return true },\n    indeterm: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if among visible editable nodes that\n        // are contained in the result and have no children, at least one has\n        // alignment value \"left\" and at least one does not. Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.some(function(node) { return getAlignmentValue(node) == \"left\" })\n            && nodes.some(function(node) { return getAlignmentValue(node) != \"left\" });\n    }, state: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if there is at least one visible\n        // editable node that is contained in the result and has no children,\n        // and all such nodes have alignment value \"left\".  Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.length\n            && nodes.every(function(node) { return getAlignmentValue(node) == \"left\" });\n    }, value: function() {\n        // \"Return the empty string if the active range is null.  Otherwise,\n        // block-extend the active range, and return the alignment value of the\n        // first visible editable node that is contained in the result and has\n        // no children. If there is no such node, return \"left\".\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        if (nodes.length) {\n            return getAlignmentValue(nodes[0]);\n        } else {\n            return \"left\";\n        }\n    },\n};\n\n//@}\n///// The justifyRight command /////\n//@{\ncommands.justifyright = {\n    preservesOverrides: true,\n    // \"Justify the selection with alignment \"right\", then return true.\"\n    action: function() { justifySelection(\"right\"); return true },\n    indeterm: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if among visible editable nodes that\n        // are contained in the result and have no children, at least one has\n        // alignment value \"right\" and at least one does not. Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.some(function(node) { return getAlignmentValue(node) == \"right\" })\n            && nodes.some(function(node) { return getAlignmentValue(node) != \"right\" });\n    }, state: function() {\n        // \"Return false if the active range is null.  Otherwise, block-extend\n        // the active range. Return true if there is at least one visible\n        // editable node that is contained in the result and has no children,\n        // and all such nodes have alignment value \"right\".  Otherwise return\n        // false.\"\n        if (!getActiveRange()) {\n            return false;\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        return nodes.length\n            && nodes.every(function(node) { return getAlignmentValue(node) == \"right\" });\n    }, value: function() {\n        // \"Return the empty string if the active range is null.  Otherwise,\n        // block-extend the active range, and return the alignment value of the\n        // first visible editable node that is contained in the result and has\n        // no children. If there is no such node, return \"left\".\"\n        if (!getActiveRange()) {\n            return \"\";\n        }\n        var nodes = getAllContainedNodes(blockExtend(getActiveRange()), function(node) {\n            return isEditable(node) && isVisible(node) && !node.hasChildNodes();\n        });\n        if (nodes.length) {\n            return getAlignmentValue(nodes[0]);\n        } else {\n            return \"left\";\n        }\n    },\n};\n\n//@}\n///// The outdent command /////\n//@{\ncommands.outdent = {\n    preservesOverrides: true,\n    action: function() {\n        // \"Let items be a list of all lis that are ancestor containers of the\n        // range's start and/or end node.\"\n        //\n        // It's annoying to get this in tree order using functional stuff\n        // without doing getDescendants(document), which is slow, so I do it\n        // imperatively.\n        var items = [];\n        (function(){\n            for (\n                var ancestorContainer = getActiveRange().endContainer;\n                ancestorContainer != getActiveRange().commonAncestorContainer;\n                ancestorContainer = ancestorContainer.parentNode\n            ) {\n                if (isHtmlElement(ancestorContainer, \"li\")) {\n                    items.unshift(ancestorContainer);\n                }\n            }\n            for (\n                var ancestorContainer = getActiveRange().startContainer;\n                ancestorContainer;\n                ancestorContainer = ancestorContainer.parentNode\n            ) {\n                if (isHtmlElement(ancestorContainer, \"li\")) {\n                    items.unshift(ancestorContainer);\n                }\n            }\n        })();\n\n        // \"For each item in items, normalize sublists of item.\"\n        items.forEach(normalizeSublists);\n\n        // \"Block-extend the active range, and let new range be the result.\"\n        var newRange = blockExtend(getActiveRange());\n\n        // \"Let node list be a list of nodes, initially empty.\"\n        //\n        // \"For each node node contained in new range, append node to node list\n        // if the last member of node list (if any) is not an ancestor of node;\n        // node is editable; and either node has no editable descendants, or is\n        // an ol or ul, or is an li whose parent is an ol or ul.\"\n        var nodeList = getContainedNodes(newRange, function(node) {\n            return isEditable(node)\n                && (!getDescendants(node).some(isEditable)\n                || isHtmlElement(node, [\"ol\", \"ul\"])\n                || (isHtmlElement(node, \"li\") && isHtmlElement(node.parentNode, [\"ol\", \"ul\"])));\n        });\n\n        // \"While node list is not empty:\"\n        while (nodeList.length) {\n            // \"While the first member of node list is an ol or ul or is not\n            // the child of an ol or ul, outdent it and remove it from node\n            // list.\"\n            while (nodeList.length\n            && (isHtmlElement(nodeList[0], [\"OL\", \"UL\"])\n            || !isHtmlElement(nodeList[0].parentNode, [\"OL\", \"UL\"]))) {\n                outdentNode(nodeList.shift());\n            }\n\n            // \"If node list is empty, break from these substeps.\"\n            if (!nodeList.length) {\n                break;\n            }\n\n            // \"Let sublist be a list of nodes, initially empty.\"\n            var sublist = [];\n\n            // \"Remove the first member of node list and append it to sublist.\"\n            sublist.push(nodeList.shift());\n\n            // \"While the first member of node list is the nextSibling of the\n            // last member of sublist, and the first member of node list is not\n            // an ol or ul, remove the first member of node list and append it\n            // to sublist.\"\n            while (nodeList.length\n            && nodeList[0] == sublist[sublist.length - 1].nextSibling\n            && !isHtmlElement(nodeList[0], [\"OL\", \"UL\"])) {\n                sublist.push(nodeList.shift());\n            }\n\n            // \"Record the values of sublist, and let values be the result.\"\n            var values = recordValues(sublist);\n\n            // \"Split the parent of sublist, with new parent null.\"\n            splitParent(sublist);\n\n            // \"Fix disallowed ancestors of each member of sublist.\"\n            sublist.forEach(fixDisallowedAncestors);\n\n            // \"Restore the values from values.\"\n            restoreValues(values);\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n\n//////////////////////////////////\n///// Miscellaneous commands /////\n//////////////////////////////////\n\n///// The defaultParagraphSeparator command /////\n//@{\ncommands.defaultparagraphseparator = {\n    action: function(value) {\n        // \"Let value be converted to ASCII lowercase. If value is then equal\n        // to \"p\" or \"div\", set the context object's default single-line\n        // container name to value and return true. Otherwise, return false.\"\n        value = value.toLowerCase();\n        if (value == \"p\" || value == \"div\") {\n            defaultSingleLineContainerName = value;\n            return true;\n        }\n        return false;\n    }, value: function() {\n        // \"Return the context object's default single-line container name.\"\n        return defaultSingleLineContainerName;\n    },\n};\n\n//@}\n///// The selectAll command /////\n//@{\ncommands.selectall = {\n    // Note, this ignores the whole globalRange/getActiveRange() thing and\n    // works with actual selections.  Not suitable for autoimplementation.html.\n    action: function() {\n        // \"Let target be the body element of the context object.\"\n        var target = document.body;\n\n        // \"If target is null, let target be the context object's\n        // documentElement.\"\n        if (!target) {\n            target = document.documentElement;\n        }\n\n        // \"If target is null, call getSelection() on the context object, and\n        // call removeAllRanges() on the result.\"\n        if (!target) {\n            getSelection().removeAllRanges();\n\n        // \"Otherwise, call getSelection() on the context object, and call\n        // selectAllChildren(target) on the result.\"\n        } else {\n            getSelection().selectAllChildren(target);\n        }\n\n        // \"Return true.\"\n        return true;\n    }\n};\n\n//@}\n///// The styleWithCSS command /////\n//@{\ncommands.stylewithcss = {\n    action: function(value) {\n        // \"If value is an ASCII case-insensitive match for the string\n        // \"false\", set the CSS styling flag to false. Otherwise, set the\n        // CSS styling flag to true.  Either way, return true.\"\n        cssStylingFlag = String(value).toLowerCase() != \"false\";\n        return true;\n    }, state: function() { return cssStylingFlag }\n};\n\n//@}\n///// The useCSS command /////\n//@{\ncommands.usecss = {\n    action: function(value) {\n        // \"If value is an ASCII case-insensitive match for the string \"false\",\n        // set the CSS styling flag to true. Otherwise, set the CSS styling\n        // flag to false.  Either way, return true.\"\n        cssStylingFlag = String(value).toLowerCase() == \"false\";\n        return true;\n    }\n};\n//@}\n\n// Some final setup\n//@{\n(function() {\n// Opera 11.50 doesn't implement Object.keys, so I have to make an explicit\n// temporary, which means I need an extra closure to not leak the temporaries\n// into the global namespace.  >:(\nvar commandNames = [];\nfor (var command in commands) {\n    commandNames.push(command);\n}\ncommandNames.forEach(function(command) {\n    // \"If a command does not have a relevant CSS property specified, it\n    // defaults to null.\"\n    if (!(\"relevantCssProperty\" in commands[command])) {\n        commands[command].relevantCssProperty = null;\n    }\n\n    // \"If a command has inline command activated values defined but nothing\n    // else defines when it is indeterminate, it is indeterminate if among\n    // formattable nodes effectively contained in the active range, there is at\n    // least one whose effective command value is one of the given values and\n    // at least one whose effective command value is not one of the given\n    // values.\"\n    if (\"inlineCommandActivatedValues\" in commands[command]\n    && !(\"indeterm\" in commands[command])) {\n        commands[command].indeterm = function() {\n            if (!getActiveRange()) {\n                return false;\n            }\n\n            var values = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode)\n                .map(function(node) { return getEffectiveCommandValue(node, command) });\n\n            var matchingValues = values.filter(function(value) {\n                return commands[command].inlineCommandActivatedValues.indexOf(value) != -1;\n            });\n\n            return matchingValues.length >= 1\n                && values.length - matchingValues.length >= 1;\n        };\n    }\n\n    // \"If a command has inline command activated values defined, its state is\n    // true if either no formattable node is effectively contained in the\n    // active range, and the active range's start node's effective command\n    // value is one of the given values; or if there is at least one\n    // formattable node effectively contained in the active range, and all of\n    // them have an effective command value equal to one of the given values.\"\n    if (\"inlineCommandActivatedValues\" in commands[command]) {\n        commands[command].state = function() {\n            if (!getActiveRange()) {\n                return false;\n            }\n\n            var nodes = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode);\n\n            if (nodes.length == 0) {\n                return commands[command].inlineCommandActivatedValues\n                    .indexOf(getEffectiveCommandValue(getActiveRange().startContainer, command)) != -1;\n            } else {\n                return nodes.every(function(node) {\n                    return commands[command].inlineCommandActivatedValues\n                        .indexOf(getEffectiveCommandValue(node, command)) != -1;\n                });\n            }\n        };\n    }\n\n    // \"If a command is a standard inline value command, it is indeterminate if\n    // among formattable nodes that are effectively contained in the active\n    // range, there are two that have distinct effective command values. Its\n    // value is the effective command value of the first formattable node that\n    // is effectively contained in the active range; or if there is no such\n    // node, the effective command value of the active range's start node; or\n    // if that is null, the empty string.\"\n    if (\"standardInlineValueCommand\" in commands[command]) {\n        commands[command].indeterm = function() {\n            if (!getActiveRange()) {\n                return false;\n            }\n\n            var values = getAllEffectivelyContainedNodes(getActiveRange())\n                .filter(isFormattableNode)\n                .map(function(node) { return getEffectiveCommandValue(node, command) });\n            for (var i = 1; i < values.length; i++) {\n                if (values[i] != values[i - 1]) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        commands[command].value = function() {\n            if (!getActiveRange()) {\n                return \"\";\n            }\n\n            var refNode = getAllEffectivelyContainedNodes(getActiveRange(), isFormattableNode)[0];\n\n            if (typeof refNode == \"undefined\") {\n                refNode = getActiveRange().startContainer;\n            }\n\n            var ret = getEffectiveCommandValue(refNode, command);\n            if (ret === null) {\n                return \"\";\n            }\n            return ret;\n        };\n    }\n\n    // \"If a command preserves overrides, then before taking its action, the\n    // user agent must record current overrides. After taking the action, if\n    // the active range is collapsed, it must restore states and values from\n    // the recorded list.\"\n    if (\"preservesOverrides\" in commands[command]) {\n        var oldAction = commands[command].action;\n\n        commands[command].action = function(value) {\n            var overrides = recordCurrentOverrides();\n            var ret = oldAction(value);\n            if (getActiveRange().collapsed) {\n                restoreStatesAndValues(overrides);\n            }\n            return ret;\n        };\n    }\n});\n})();\n//@}\n\n// vim: foldmarker=@{,@} foldmethod=marker\n"},{"url":"http://web-platform.test:8000/editing/include/tests.js","request_start":1696814057.536074,"response_start":1696814057.5628157,"request_end":1696814057.5404713,"response_end":1696814057.569933,"ts":1696814057.5704148,"body":"// For the original (development) tests, we want to make a bunch of changes to\n// the page as it loads.  We don't want this for the conformance tests, so let\n// them opt out.\nif (typeof testsJsLibraryOnly == \"undefined\" || !testsJsLibraryOnly) {\n    // Alert the reader of egregious Opera bug that will make the specced\n    // implementation horribly buggy\n    //@{\n    (function() {\n        var div = document.createElement(\"div\");\n        div.appendChild(document.createElement(\"br\"));\n        document.body.insertBefore(div, document.body.firstChild);\n        var range = document.createRange();\n        range.setStart(div, 1);\n        div.insertBefore(document.createElement(\"p\"), div.firstChild);\n        if (range.startOffset > range.startContainer.childNodes.length) {\n            var warningDiv = document.createElement(\"p\");\n            document.body.insertBefore(warningDiv, document.body.firstChild);\n            warningDiv.style.fontWeight = \"bold\";\n            warningDiv.style.fontSize = \"2em\";\n            warningDiv.style.color = \"red\";\n            warningDiv.innerHTML = 'Your browser suffers from an <a href=\"http://software.hixie.ch/utilities/js/live-dom-viewer/saved/1028\">egregious bug</a> in range mutation that will give incorrect results for the spec columns in many cases.  To ensure that the spec column contains the output actually required by the spec, use a different browser.';\n        }\n        div.parentNode.removeChild(div);\n    })();\n    //@}\n\n    // Insert the toolbar thingie as soon as the script file is loaded\n    //@{\n    (function() {\n        var toolbarDiv = document.createElement(\"div\");\n        toolbarDiv.id = \"toolbar\";\n        // Note: this is completely not a hack at all.\n        toolbarDiv.innerHTML = \"<style id=alerts>body > div > table > tbody > tr:not(.alert):not(:first-child):not(.active) { display: none }</style>\"\n            + \"<label><input id=alert-checkbox type=checkbox accesskey=a checked onclick='updateAlertRowStyle()'> Display rows without spec <u>a</u>lerts</label>\"\n            + \"<label><input id=browser-checkbox type=checkbox accesskey=b checked onclick='localStorage[\\\"display-browser-tests\\\"] = event.target.checked'> Run <u>b</u>rowser tests as well as spec tests</label>\";\n\n        document.body.appendChild(toolbarDiv);\n    })();\n    //@}\n\n    // Confusingly, we're storing a string here, not a boolean.\n    document.querySelector(\"#alert-checkbox\").checked = localStorage[\"display-alerts\"] != \"false\";\n    document.querySelector(\"#browser-checkbox\").checked = localStorage[\"display-browser-tests\"] != \"false\";\n\n    function updateAlertRowStyle() {\n    //@{\n        var checked = document.querySelector(\"#alert-checkbox\").checked;\n        document.querySelector(\"#alerts\").disabled = checked;\n        localStorage[\"display-alerts\"] = checked;\n    }\n    //@}\n    updateAlertRowStyle();\n\n    // Feature-test whether the browser wraps at <wbr> or not, and set word-wrap:\n    // break-word where necessary if not.  (IE and Opera don't wrap, Gecko and\n    // WebKit do.)  word-wrap: break-word will break anywhere at all, so it looks\n    // significantly uglier.\n    //@{\n    (function() {\n        var wordWrapTestDiv = document.createElement(\"div\");\n        wordWrapTestDiv.style.width = \"5em\";\n        document.body.appendChild(wordWrapTestDiv);\n        wordWrapTestDiv.innerHTML = \"abc\";\n        var height1 = getComputedStyle(wordWrapTestDiv).height;\n        wordWrapTestDiv.innerHTML = \"abc<wbr>abc<wbr>abc<wbr>abc<wbr>abc<wbr>abc\";\n        var height2 = getComputedStyle(wordWrapTestDiv).height;\n        document.body.removeChild(wordWrapTestDiv);\n        if (height1 == height2) {\n            document.body.className = (document.body.className + \" wbr-workaround\").trim();\n        }\n    })();\n    //@}\n}\n\n// Now for the meat of the file.\nvar tests = {\n    backcolor: [\n    //@{ Same as hilitecolor (set below)\n    ],\n    //@}\n    bold: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        'foo<span contenteditable=false>[bar]</span>baz',\n        'fo[o<span contenteditable=false>bar</span>b]az',\n        'foo<span contenteditable=false>ba[r</span>b]az',\n        'fo[o<span contenteditable=false>b]ar</span>baz',\n        'fo[<b>o</b><span contenteditable=false>bar</span><b>b</b>]az',\n        '<span contenteditable=false>foo<span contenteditable=true>[bar]</span>baz</span>',\n        '<span contenteditable=false>fo[o<span contenteditable=true>bar</span>b]az</span>',\n        '<span contenteditable=false>foo<span contenteditable=true>ba[r</span>b]az</span>',\n        '<span contenteditable=false>fo[o<span contenteditable=true>b]ar</span>baz</span>',\n        '<span contenteditable=false>fo[<b>o<span contenteditable=true>bar</span>b</b>]az</span>',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<span style=\"font-weight: bold\">[bar]</span>baz',\n        'foo<b>[bar]</b>baz',\n        'foo<b>bar</b>[baz]',\n        '[foo]<b>bar</b>baz',\n        '<b>foo</b>[bar]<b>baz</b>',\n        'foo<strong>bar</strong>[baz]',\n        '[foo]<strong>bar</strong>baz',\n        '<strong>foo</strong>[bar]<strong>baz</strong>',\n        '<b>foo</b>[bar]<strong>baz</strong>',\n        '<strong>foo</strong>[bar]<b>baz</b>',\n        'foo[<b>bar</b>]baz',\n        'foo[<b>bar]</b>baz',\n        'foo<b>[bar</b>]baz',\n\n        'foo{<b></b>}baz',\n        'foo{<i></i>}baz',\n        'foo{<b><i></i></b>}baz',\n        'foo{<i><b></b></i>}baz',\n\n        'foo<strong>[bar]</strong>baz',\n        'foo[<strong>bar</strong>]baz',\n        'foo[<strong>bar]</strong>baz',\n        'foo<strong>[bar</strong>]baz',\n        'foo[<span style=\"font-weight: bold\">bar</span>]baz',\n        'foo[<span style=\"font-weight: bold\">bar]</span>baz',\n        'foo<span style=\"font-weight: bold\">[bar</span>]baz',\n\n        '<b>{<p>foo</p><p>bar</p>}<p>baz</p></b>',\n        '<b><p>foo[<i>bar</i>}</p><p>baz</p></b>',\n\n        'foo [bar <b>baz] qoz</b> quz sic',\n        'foo bar <b>baz [qoz</b> quz] sic',\n\n        '<b id=purple>bar [baz] qoz</b>',\n\n        'foo<span style=\"font-weight: 100\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 200\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 300\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 400\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 500\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 600\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 700\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 800\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 900\">[bar]</span>baz',\n        'foo<span style=\"font-weight: 400\">[bar</span>]baz',\n        'foo<span style=\"font-weight: 700\">[bar</span>]baz',\n        'foo[<span style=\"font-weight: 400\">bar]</span>baz',\n        'foo[<span style=\"font-weight: 700\">bar]</span>baz',\n        'foo[<span style=\"font-weight: 400\">bar</span>]baz',\n        'foo[<span style=\"font-weight: 700\">bar</span>]baz',\n        '<span style=\"font-weight: 100\">foo[bar]baz</span>',\n        '<span style=\"font-weight: 400\">foo[bar]baz</span>',\n        '<span style=\"font-weight: 700\">foo[bar]baz</span>',\n        '<span style=\"font-weight: 900\">foo[bar]baz</span>',\n        '{<span style=\"font-weight: 100\">foobar]baz</span>',\n        '{<span style=\"font-weight: 400\">foobar]baz</span>',\n        '{<span style=\"font-weight: 700\">foobar]baz</span>',\n        '{<span style=\"font-weight: 900\">foobar]baz</span>',\n        '<span style=\"font-weight: 100\">foo[barbaz</span>}',\n        '<span style=\"font-weight: 400\">foo[barbaz</span>}',\n        '<span style=\"font-weight: 700\">foo[barbaz</span>}',\n        '<span style=\"font-weight: 900\">foo[barbaz</span>}',\n\n        '<h3>foo[bar]baz</h3>',\n        '{<h3>foobar]baz</h3>',\n        '<h3>foo[barbaz</h3>}',\n        '<h3>[foobarbaz]</h3>',\n        '{<h3>foobarbaz]</h3>',\n        '<h3>[foobarbaz</h3>}',\n        '{<h3>foobarbaz</h3>}',\n\n        '<b>foo<span style=\"font-weight: normal\">bar<b>[baz]</b>quz</span>qoz</b>',\n        '<b>foo<span style=\"font-weight: normal\">[bar]</span>baz</b>',\n\n        '{<b>foo</b> <b>bar</b>}',\n        '{<h3>foo</h3><b>bar</b>}',\n\n        '<i><b>foo</b></i>[bar]<i><b>baz</b></i>',\n        '<i><b>foo</b></i>[bar]<b>baz</b>',\n        '<b>foo</b>[bar]<i><b>baz</b></i>',\n        '<font color=blue face=monospace><b>foo</b></font>[bar]',\n\n        'foo<span style=\"font-weight: normal\"><b>{bar}</b></span>baz',\n        '[foo<span class=notbold>bar</span>baz]',\n        '<b><span class=notbold>[foo]</span></b>',\n        '<b><span class=notbold>foo[bar]baz</span></b>',\n\n        '<p style=\"font-weight: bold\">foo[bar]baz</p>',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<b>b]ar</b>baz',\n        'foo<b>ba[r</b>b]az',\n        'fo[o<b>bar</b>b]az',\n        'foo[<b>b]ar</b>baz',\n        'foo<b>ba[r</b>]baz',\n        'foo{<b>bar</b>}baz',\n        'fo[o<span style=font-weight:bold>b]ar</span>baz',\n        '<span style=font-weight:800>fo[o</span><span style=font-weight:900>b]ar</span>',\n        '<span style=font-weight:700>fo[o</span><span style=font-weight:800>b]ar</span>',\n        '<span style=font-weight:600>fo[o</span><span style=font-weight:700>b]ar</span>',\n        '<span style=font-weight:500>fo[o</span><span style=font-weight:600>b]ar</span>',\n        '<span style=font-weight:400>fo[o</span><span style=font-weight:500>b]ar</span>',\n        '<span style=font-weight:300>fo[o</span><span style=font-weight:400>b]ar</span>',\n        '<span style=font-weight:200>fo[o</span><span style=font-weight:300>b]ar</span>',\n        '<span style=font-weight:100>fo[o</span><span style=font-weight:200>b]ar</span>',\n    ],\n    //@}\n    createlink: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        '<a href=http://www.google.com/>foo[bar]baz</a>',\n        '<a href=http://www.google.com/>foo[barbaz</a>}',\n        '{<a href=http://www.google.com/>foobar]baz</a>',\n        '{<a href=http://www.google.com/>foobarbaz</a>}',\n        '<a href=http://www.google.com/>[foobarbaz]</a>',\n\n        'foo<a href=http://www.google.com/>[bar]</a>baz',\n        '[foo]<a href=http://www.google.com/>bar</a>baz',\n        'foo<a href=http://www.google.com/>bar</a>[baz]',\n        'foo[<a href=http://www.google.com/>bar</a>]baz',\n        'foo<a href=http://www.google.com/>[bar</a>baz]',\n        '[foo<a href=http://www.google.com/>bar]</a>baz',\n        '[foo<a href=http://www.google.com/>bar</a>baz]',\n\n        '<a href=otherurl>foo[bar]baz</a>',\n        '<a href=otherurl>foo[barbaz</a>}',\n        '{<a href=otherurl>foobar]baz</a>',\n        '{<a href=otherurl>foobarbaz</a>}',\n        '<a href=otherurl>[foobarbaz]</a>',\n\n        'foo<a href=otherurl>[bar]</a>baz',\n        'foo[<a href=otherurl>bar</a>]baz',\n        'foo<a href=otherurl>[bar</a>baz]',\n        '[foo<a href=otherurl>bar]</a>baz',\n        '[foo<a href=otherurl>bar</a>baz]',\n\n        '<a href=otherurl><b>foo[bar]baz</b></a>',\n        '<a href=otherurl><b>foo[barbaz</b></a>}',\n        '{<a href=otherurl><b>foobar]baz</b></a>',\n        '<a href=otherurl><b>[foobarbaz]</b></a>',\n\n        '<a name=abc>foo[bar]baz</a>',\n        '<a name=abc><b>foo[bar]baz</b></a>',\n\n        ['', 'foo[bar]baz'],\n    ],\n    //@}\n    // Opera requires this to be quoted, contrary to ES5 11.1.5 which allows\n    // PropertyName to be any IdentifierName, and see 7.6 which defines\n    // IdentifierName to include ReservedWord; Identifier excludes it.\n    \"delete\": [\n    //@{\n        // Collapsed selection\n        //\n        // These three commented-out test call Firefox 5.0a2 to blow up, not\n        // just throwing exceptions on the tests themselves but on many\n        // subsequent tests too.\n        //'[]foo',\n        //'<span>[]foo</span>',\n        //'<p>[]foo</p>',\n        'foo[]bar',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo<span style=display:none>bar</span>[]baz',\n        'foo<script>bar</script>[]baz',\n\n        'fo&ouml;[]bar',\n        'foo&#x308;[]bar',\n        'foo&#x308;&#x327;[]bar',\n        '&ouml;[]bar',\n        'o&#x308;[]bar',\n        'o&#x308;&#x327;[]bar',\n\n        '&#x5e9;&#x5c1;&#x5b8;[]&#x5dc;&#x5d5;&#x5b9;&#x5dd;',\n        '&#x5e9;&#x5c1;&#x5b8;&#x5dc;&#x5d5;&#x5b9;[]&#x5dd;',\n\n        '<p>foo</p><p>[]bar</p>',\n        '<p>foo</p>[]bar',\n        'foo<p>[]bar</p>',\n        '<p>foo<br></p><p>[]bar</p>',\n        '<p>foo<br></p>[]bar',\n        'foo<br><p>[]bar</p>',\n        '<p>foo<br><br></p><p>[]bar</p>',\n        '<p>foo<br><br></p>[]bar',\n        'foo<br><br><p>[]bar</p>',\n\n        '<div><p>foo</p></div><p>[]bar</p>',\n        '<p>foo</p><div><p>[]bar</p></div>',\n        '<div><p>foo</p></div><div><p>[]bar</p></div>',\n        '<div><p>foo</p></div>[]bar',\n        'foo<div><p>[]bar</p></div>',\n\n        '<div>foo</div><div>[]bar</div>',\n        '<pre>foo</pre>[]bar',\n\n        'foo<br>[]bar',\n        'foo<br><b>[]bar</b>',\n        'foo<hr>[]bar',\n        '<p>foo<hr><p>[]bar',\n        '<p>foo</p><br><p>[]bar</p>',\n        '<p>foo</p><br><br><p>[]bar</p>',\n        '<p>foo</p><img src=/img/lion.svg><p>[]bar',\n        'foo<img src=/img/lion.svg>[]bar',\n\n        '<a>foo</a>[]bar',\n        '<a href=/>foo</a>[]bar',\n        '<a name=abc>foo</a>[]bar',\n        '<a href=/ name=abc>foo</a>[]bar',\n        '<span><a>foo</a></span>[]bar',\n        '<span><a href=/>foo</a></span>[]bar',\n        '<span><a name=abc>foo</a></span>[]bar',\n        '<span><a href=/ name=abc>foo</a></span>[]bar',\n        'foo<a>[]bar</a>',\n        'foo<a href=/>[]bar</a>',\n        'foo<a name=abc>[]bar</a>',\n        'foo<a href=/ name=abc>[]bar</a>',\n\n        'foo &nbsp;[]',\n        '&nbsp;[] foo',\n        'foo &nbsp;[]bar',\n        'foo&nbsp; []bar',\n        'foo&nbsp;&nbsp;[]bar',\n        'foo  []bar',\n        'foo []&nbsp; bar',\n        'foo &nbsp;[] bar',\n        'foo &nbsp; []bar',\n        'foo []<span>&nbsp;</span> bar',\n        'foo <span>&nbsp;</span>[] bar',\n        'foo <span>&nbsp;</span> []bar',\n        '<b>foo </b>&nbsp;[]bar',\n        '<b>foo&nbsp;</b> []bar',\n        '<b>foo&nbsp;</b>&nbsp;[]bar',\n        '<b>foo </b> []bar',\n        '<p>foo </p><p>[] bar</p>',\n\n        '<pre>foo &nbsp;[]</pre>',\n        '<pre>&nbsp;[] foo</pre>',\n        '<pre>foo &nbsp;[]bar</pre>',\n        '<pre>foo&nbsp; []bar</pre>',\n        '<pre>foo  []bar</pre>',\n\n        '<div style=white-space:pre>foo &nbsp;[]</div>',\n        '<div style=white-space:pre>&nbsp;[] foo</div>',\n        '<div style=white-space:pre>foo &nbsp;[]bar</div>',\n        '<div style=white-space:pre>foo&nbsp; []bar</div>',\n        '<div style=white-space:pre>foo  []bar</div>',\n\n        '<div style=white-space:pre-wrap>foo &nbsp;[]</div>',\n        '<div style=white-space:pre-wrap>&nbsp;[] foo</div>',\n        '<div style=white-space:pre-wrap>foo &nbsp;[]bar</div>',\n        '<div style=white-space:pre-wrap>foo&nbsp; []bar</div>',\n        '<div style=white-space:pre-wrap>foo  []bar</div>',\n\n        '<div style=white-space:pre-line>foo &nbsp;[]</div>',\n        '<div style=white-space:pre-line>&nbsp;[] foo</div>',\n        '<div style=white-space:pre-line>foo &nbsp;[]bar</div>',\n        '<div style=white-space:pre-line>foo&nbsp; []bar</div>',\n        '<div style=white-space:pre-line>foo  []bar</div>',\n\n        '<div style=white-space:nowrap>foo &nbsp;[]</div>',\n        '<div style=white-space:nowrap>&nbsp;[] foo</div>',\n        '<div style=white-space:nowrap>foo &nbsp;[]bar</div>',\n        '<div style=white-space:nowrap>foo&nbsp; []bar</div>',\n        '<div style=white-space:nowrap>foo  []bar</div>',\n\n        // Tables with collapsed selection\n        'foo<table><tr><td>[]bar</table>baz',\n        'foo<table><tr><td>bar</table>[]baz',\n        '<p>foo<table><tr><td>[]bar</table><p>baz',\n        '<p>foo<table><tr><td>bar</table><p>[]baz',\n        '<table><tr><td>foo<td>[]bar</table>',\n        '<table><tr><td>foo<tr><td>[]bar</table>',\n\n        'foo<br><table><tr><td>[]bar</table>baz',\n        'foo<table><tr><td>bar<br></table>[]baz',\n        '<p>foo<br><table><tr><td>[]bar</table><p>baz',\n        '<p>foo<table><tr><td>bar<br></table><p>[]baz',\n        '<table><tr><td>foo<br><td>[]bar</table>',\n        '<table><tr><td>foo<br><tr><td>[]bar</table>',\n\n        'foo<br><br><table><tr><td>[]bar</table>baz',\n        'foo<table><tr><td>bar<br><br></table>[]baz',\n        '<p>foo<br><br><table><tr><td>[]bar</table><p>baz',\n        '<p>foo<table><tr><td>bar<br><br></table><p>[]baz',\n        '<table><tr><td>foo<br><br><td>[]bar</table>',\n        '<table><tr><td>foo<br><br><tr><td>[]bar</table>',\n\n        'foo<hr><table><tr><td>[]bar</table>baz',\n        'foo<table><tr><td>bar<hr></table>[]baz',\n        '<table><tr><td>foo<hr><td>[]bar</table>',\n        '<table><tr><td>foo<hr><tr><td>[]bar</table>',\n\n        // Lists with collapsed selection\n        'foo<ol><li>[]bar<li>baz</ol>',\n        'foo<br><ol><li>[]bar<li>baz</ol>',\n        'foo<br><br><ol><li>[]bar<li>baz</ol>',\n        '<ol><li>foo<li>[]bar</ol>',\n        '<ol><li>foo<br><li>[]bar</ol>',\n        '<ol><li>foo<br><br><li>[]bar</ol>',\n        '<ol><li>foo<li>[]bar<br>baz</ol>',\n        '<ol><li>foo<br>bar<li>[]baz</ol>',\n\n        '<ol><li><p>foo</p>{}bar</ol>',\n\n        '<ol><li><p>foo<li>[]bar</ol>',\n        '<ol><li>foo<li><p>[]bar</ol>',\n        '<ol><li><p>foo<li><p>[]bar</ol>',\n\n        '<ol><li>foo<ul><li>[]bar</ul></ol>',\n        'foo<ol><ol><li>[]bar</ol></ol>',\n        'foo<div><ol><li>[]bar</ol></div>',\n\n        'foo<dl><dt>[]bar<dd>baz</dl>',\n        'foo<dl><dd>[]bar</dl>',\n        '<dl><dt>foo<dd>[]bar</dl>',\n        '<dl><dt>foo<dt>[]bar<dd>baz</dl>',\n        '<dl><dt>foo<dd>bar<dd>[]baz</dl>',\n\n        '<ol><li>foo</ol>[]bar',\n        '<ol><li>foo<br></ol>[]bar',\n        '<ol><li>foo<br><br></ol>[]bar',\n        '<ol><li><br></ol>[]bar',\n        '<ol><li>foo<li><br></ol>[]bar',\n\n        '<ol><li>foo</ol><p>[]bar',\n        '<ol><li>foo<br></ol><p>[]bar',\n        '<ol><li>foo<br><br></ol><p>[]bar',\n        '<ol><li><br></ol><p>[]bar',\n        '<ol><li>foo<li><br></ol><p>[]bar',\n\n        '<ol><li>foo</ol>{}<br>',\n        '<ol><li>foo<br></ol>{}<br>',\n        '<ol><li>foo<br><br></ol>{}<br>',\n        '<ol><li><br></ol>{}<br>',\n        '<ol><li>foo<li><br></ol>{}<br>',\n\n        '<ol><li>foo</ol><p>{}<br>',\n        '<ol><li>foo<br></ol><p>{}<br>',\n        '<ol><li>foo<br><br></ol><p>{}<br>',\n        '<ol><li><br></ol><p>{}<br>',\n        '<ol><li>foo<li><br></ol><p>{}<br>',\n\n        // Indented stuff with collapsed selection\n        'foo<blockquote>[]bar</blockquote>',\n        'foo<blockquote><blockquote>[]bar</blockquote></blockquote>',\n        'foo<blockquote><div>[]bar</div></blockquote>',\n        'foo<blockquote style=\"color: blue\">[]bar</blockquote>',\n\n        'foo<blockquote><blockquote><p>[]bar<p>baz</blockquote></blockquote>',\n        'foo<blockquote><div><p>[]bar<p>baz</div></blockquote>',\n        'foo<blockquote style=\"color: blue\"><p>[]bar<p>baz</blockquote>',\n\n        'foo<blockquote><p><b>[]bar</b><p>baz</blockquote>',\n        'foo<blockquote><p><strong>[]bar</strong><p>baz</blockquote>',\n        'foo<blockquote><p><span>[]bar</span><p>baz</blockquote>',\n\n        'foo<blockquote><ol><li>[]bar</ol></blockquote><p>extra',\n        'foo<blockquote>bar<ol><li>[]baz</ol>quz</blockquote><p>extra',\n        'foo<blockquote><ol><li>bar</li><ol><li>[]baz</ol><li>quz</ol></blockquote><p>extra',\n\n        // Invisible stuff with collapsed selection\n        'foo<span></span>[]bar',\n        'foo<span><span></span></span>[]bar',\n        'foo<quasit></quasit>[]bar',\n        'foo<br><span></span>[]bar',\n        '<span>foo<span></span></span>[]bar',\n        'foo<span></span><span>[]bar</span>',\n        'foo<div><div><p>[]bar</div></div>',\n        'foo<div><div><p><!--abc-->[]bar</div></div>',\n        'foo<div><div><!--abc--><p>[]bar</div></div>',\n        'foo<div><!--abc--><div><p>[]bar</div></div>',\n        'foo<!--abc--><div><div><p>[]bar</div></div>',\n        '<div><div><p>foo</div></div>[]bar',\n        '<div><div><p>foo</div></div><!--abc-->[]bar',\n        '<div><div><p>foo</div><!--abc--></div>[]bar',\n        '<div><div><p>foo</p><!--abc--></div></div>[]bar',\n        '<div><div><p>foo<!--abc--></div></div>[]bar',\n        '<div><div><p>foo</p></div></div><div><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo<!--abc--></p></div></div><div><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p><!--abc--></div></div><div><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p></div><!--abc--></div><div><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p></div></div><!--abc--><div><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p></div></div><div><!--abc--><div><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p></div></div><div><div><!--abc--><div>[]bar</div></div></div>',\n        '<div><div><p>foo</p></div></div><div><div><div><!--abc-->[]bar</div></div></div>',\n\n        // Styled stuff with collapsed selection\n        '<p style=color:blue>foo<p>[]bar',\n        '<p style=color:blue>foo<p style=color:brown>[]bar',\n        '<p style=color:blue>foo<p style=color:rgba(0,0,255,1)>[]bar',\n        '<p style=color:transparent>foo<p style=color:rgba(0,0,0,0)>[]bar',\n        '<p>foo<p style=color:brown>[]bar',\n        '<p><font color=blue>foo</font><p>[]bar',\n        '<p><font color=blue>foo</font><p><font color=brown>[]bar</font>',\n        '<p>foo<p><font color=brown>[]bar</font>',\n        '<p><span style=color:blue>foo</font><p>[]bar',\n        '<p><span style=color:blue>foo</font><p><span style=color:brown>[]bar</font>',\n        '<p>foo<p><span style=color:brown>[]bar</font>',\n\n        '<p style=background-color:aqua>foo<p>[]bar',\n        '<p style=background-color:aqua>foo<p style=background-color:tan>[]bar',\n        '<p>foo<p style=background-color:tan>[]bar',\n        '<p><span style=background-color:aqua>foo</font><p>[]bar',\n        '<p><span style=background-color:aqua>foo</font><p><span style=background-color:tan>[]bar</font>',\n        '<p>foo<p><span style=background-color:tan>[]bar</font>',\n\n        '<p style=text-decoration:underline>foo<p>[]bar',\n        '<p style=text-decoration:underline>foo<p style=text-decoration:line-through>[]bar',\n        '<p>foo<p style=text-decoration:line-through>[]bar',\n        '<p><u>foo</u><p>[]bar',\n        '<p><u>foo</u><p><s>[]bar</s>',\n        '<p>foo<p><s>[]bar</s>',\n\n        '<p style=color:blue>foo</p>[]bar',\n        'foo<p style=color:brown>[]bar',\n        '<div style=color:blue><p style=color:green>foo</div>[]bar',\n        '<div style=color:blue><p style=color:green>foo</div><p style=color:brown>[]bar',\n        '<p style=color:blue>foo<div style=color:brown><p style=color:green>[]bar',\n\n        // Uncollapsed selection\n        'foo[bar]baz',\n        '<p>foo<span style=color:#aBcDeF>[bar]</span>baz',\n        '<p>foo<span style=color:#aBcDeF>{bar}</span>baz',\n        '<p>foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '<p>[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '<p>{foo<span style=color:#aBcDeF>bar}</span>baz',\n        '<p>foo<span style=color:#aBcDeF>[bar</span>baz]',\n        '<p>foo<span style=color:#aBcDeF>{bar</span>baz}',\n        '<p>foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n        'foo<b>[bar]</b>baz',\n        'foo<b>{bar}</b>baz',\n        'foo{<b>bar</b>}baz',\n        'foo<span>[bar]</span>baz',\n        'foo<span>{bar}</span>baz',\n        'foo{<span>bar</span>}baz',\n        '<b>foo[bar</b><i>baz]quz</i>',\n        '<p>foo</p><p>[bar]</p><p>baz</p>',\n        '<p>foo</p><p>{bar}</p><p>baz</p>',\n        '<p>foo</p><p>{bar</p>}<p>baz</p>',\n        '<p>foo</p>{<p>bar}</p><p>baz</p>',\n        '<p>foo</p>{<p>bar</p>}<p>baz</p>',\n\n        '<p>foo[bar<p>baz]quz',\n        '<p>foo[bar<div>baz]quz</div>',\n        '<p>foo[bar<h1>baz]quz</h1>',\n        '<div>foo[bar</div><p>baz]quz',\n        '<blockquote>foo[bar</blockquote><pre>baz]quz</pre>',\n\n        '<p><b>foo[bar</b><p>baz]quz',\n        '<div><p>foo[bar</div><p>baz]quz',\n        '<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote',\n        '<p>foo[bar<p style=color:blue>baz]quz',\n        '<p>foo[bar<p><b>baz]quz</b>',\n\n        '<div><p>foo<p>[bar<p>baz]</div>',\n\n        'foo[<br>]bar',\n        '<p>foo[</p><p>]bar</p>',\n        '<p>foo[</p><p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>',\n        'foo{<p>}bar</p>',\n        'foo[<p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>baz',\n        'foo{<p>bar</p>}baz',\n        'foo<p>{bar</p>}baz',\n        'foo{<p>bar}</p>baz',\n        '<p>foo[</p>]bar',\n        '<p>foo{</p>}bar',\n        '<p>foo[</p>]bar<br>baz',\n        '<p>foo[</p>]bar<p>baz</p>',\n        'foo[<div><p>]bar</div>',\n        '<div><p>foo[</p></div>]bar',\n        'foo[<div><p>]bar</p>baz</div>',\n        'foo[<div>]bar<p>baz</p></div>',\n        '<div><p>foo</p>bar[</div>]baz',\n        '<div>foo<p>bar[</p></div>]baz',\n\n        '<p>foo<br>{</p>]bar',\n        '<p>foo<br><br>{</p>]bar',\n        'foo<br>{<p>]bar</p>',\n        'foo<br><br>{<p>]bar</p>',\n        '<p>foo<br>{</p><p>}bar</p>',\n        '<p>foo<br><br>{</p><p>}bar</p>',\n\n        '<table><tbody><tr><th>foo<th>[bar]<th>baz<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>foo<th>ba[r<th>b]az<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>fo[o<th>bar<th>b]az<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>foo<th>bar<th>ba[z<tr><td>q]uz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>[foo<th>bar<th>baz]<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>[foo<th>bar<th>baz<tr><td>quz<td>qoz<td>qiz]</table>',\n        '{<table><tbody><tr><th>foo<th>bar<th>baz<tr><td>quz<td>qoz<td>qiz</table>}',\n        '<table><tbody><tr><td>foo<td>ba[r<tr><td>baz<td>quz<tr><td>q]oz<td>qiz</table>',\n        '<p>fo[o<table><tr><td>b]ar</table><p>baz',\n        '<p>foo<table><tr><td>ba[r</table><p>b]az',\n        '<p>fo[o<table><tr><td>bar</table><p>b]az',\n\n        '<p>foo<ol><li>ba[r<li>b]az</ol><p>quz',\n        '<p>foo<ol><li>bar<li>[baz]</ol><p>quz',\n        '<p>fo[o<ol><li>b]ar<li>baz</ol><p>quz',\n        '<p>foo<ol><li>bar<li>ba[z</ol><p>q]uz',\n        '<p>fo[o<ol><li>bar<li>b]az</ol><p>quz',\n        '<p>fo[o<ol><li>bar<li>baz</ol><p>q]uz',\n\n        '<ol><li>fo[o</ol><ol><li>b]ar</ol>',\n        '<ol><li>fo[o</ol><ul><li>b]ar</ul>',\n\n        'foo[<ol><li>]bar</ol>',\n        '<ol><li>foo[<li>]bar</ol>',\n        'foo[<dl><dt>]bar<dd>baz</dl>',\n        'foo[<dl><dd>]bar</dl>',\n        '<dl><dt>foo[<dd>]bar</dl>',\n        '<dl><dt>foo[<dt>]bar<dd>baz</dl>',\n        '<dl><dt>foo<dd>bar[<dd>]baz</dl>',\n\n        '<b>foo [&nbsp;</b>bar]',\n        'foo<b> [&nbsp;bar]</b>',\n        '<b>[foo&nbsp;] </b>bar',\n        '[foo<b>&nbsp;] bar</b>',\n\n        // Do we merge based on element names or the display property?\n        '<p style=display:inline>fo[o<p style=display:inline>b]ar',\n        '<span style=display:block>fo[o</span><span style=display:block>b]ar</span>',\n        '<span style=display:inline-block>fo[o</span><span style=display:inline-block>b]ar</span>',\n        '<span style=display:inline-table>fo[o</span><span style=display:inline-table>b]ar</span>',\n        '<span style=display:none>fo[o</span><span style=display:none>b]ar</span>',\n        '<quasit style=display:block>fo[o</quasit><quasit style=display:block>b]ar</quasit>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=35281\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13976\n        '<ol><li>foo</ol>{}<br><ol><li>bar</ol>',\n        '<ol><li>foo</ol><p>{}<br></p><ol><li>bar</ol>',\n        '<ol><li><p>foo</ol><p>{}<br></p><ol><li>bar</ol>',\n        '<ol id=a><li>foo</ol>{}<br><ol><li>bar</ol>',\n        '<ol><li>foo</ol>{}<br><ol id=b><li>bar</ol>',\n        '<ol id=a><li>foo</ol>{}<br><ol id=b><li>bar</ol>',\n        '<ol class=a><li>foo</ol>{}<br><ol class=b><li>bar</ol>',\n        // Broken test: http://www.w3.org/Bugs/Public/show_bug.cgi?id=14727\n        '!<ol><ol><li>foo</ol><li>{}<br><ol><li>bar</ol></ol>',\n        '<ol><ol><li>foo</ol><li>{}<br></li><ol><li>bar</ol></ol>',\n        '<ol><li>foo[</ol>bar]<ol><li>baz</ol>',\n        '<ol><li>foo[</ol><p>bar]<ol><li>baz</ol>',\n        '<ol><li><p>foo[</ol><p>bar]<ol><li>baz</ol>',\n        '<ol><li>foo[]</ol><ol><li>bar</ol>',\n        '<ol><li>foo</ol>[bar<ol><li>]baz</ol>',\n        '<ol><li>foo</ol><p>[bar<ol><li>]baz</ol>',\n        '<ol><li>foo</ol><p>[bar<ol><li><p>]baz</ol>',\n        '<ol><li>foo</ol><ol><li>b[]ar</ol>',\n        '<ol><ol><li>foo[</ol><li>bar</ol>baz]<ol><li>quz</ol>',\n        '<ul><li>foo</ul>{}<br><ul><li>bar</ul>',\n        '<ul><li>foo</ul><p>{}<br></p><ul><li>bar</ul>',\n        '<ol><li>foo[<li>bar]</ol><ol><li>baz</ol><ol><li>quz</ol>',\n        '<ol><li>foo</ol>{}<br><ul><li>bar</ul>',\n        '<ol><li>foo</ol><p>{}<br></p><ul><li>bar</ul>',\n        '<ul><li>foo</ul>{}<br><ol><li>bar</ol>',\n        '<ul><li>foo</ul><p>{}<br></p><ol><li>bar</ol>',\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13831\n        '<p><b>[foo]</b>',\n        '<p><quasit>[foo]</quasit>',\n        '<p><b><i>[foo]</i></b>',\n        '<p><b>{foo}</b>',\n        '<p>{<b>foo</b>}',\n        '<p><b>f[]</b>',\n        '<b>[foo]</b>',\n        '<div><b>[foo]</b></div>',\n    ],\n    //@}\n    fontname: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<code>[bar]</code>baz',\n        'foo<kbd>[bar]</kbd>baz',\n        'foo<listing>[bar]</listing>baz',\n        'foo<pre>[bar]</pre>baz',\n        'foo<samp>[bar]</samp>baz',\n        'foo<tt>[bar]</tt>baz',\n\n        'foo<code>b[a]r</code>baz',\n        'foo<kbd>b[a]r</kbd>baz',\n        'foo<listing>b[a]r</listing>baz',\n        'foo<pre>b[a]r</pre>baz',\n        'foo<samp>b[a]r</samp>baz',\n        'foo<tt>b[a]r</tt>baz',\n\n        '[foo<code>bar</code>baz]',\n        '[foo<kbd>bar</kbd>baz]',\n        '[foo<listing>bar</listing>baz]',\n        '[foo<pre>bar</pre>baz]',\n        '[foo<samp>bar</samp>baz]',\n        '[foo<tt>bar</tt>baz]',\n\n        '[foo<code>ba]r</code>baz',\n        '[foo<kbd>ba]r</kbd>baz',\n        '[foo<listing>ba]r</listing>baz',\n        '[foo<pre>ba]r</pre>baz',\n        '[foo<samp>ba]r</samp>baz',\n        '[foo<tt>ba]r</tt>baz',\n\n        'foo<code>b[ar</code>baz]',\n        'foo<kbd>b[ar</kbd>baz]',\n        'foo<listing>b[ar</listing>baz]',\n        'foo<pre>b[ar</pre>baz]',\n        'foo<samp>b[ar</samp>baz]',\n        'foo<tt>b[ar</tt>baz]',\n\n        'foo<span style=\"font-family: sans-serif\">[bar]</span>baz',\n        'foo<span style=\"font-family: sans-serif\">b[a]r</span>baz',\n        'foo<span style=\"font-family: monospace\">[bar]</span>baz',\n        'foo<span style=\"font-family: monospace\">b[a]r</span>baz',\n\n        'foo<tt contenteditable=false>ba[r</tt>b]az',\n        'fo[o<tt contenteditable=false>b]ar</tt>baz',\n        'foo<tt>{}<br></tt>bar',\n        'foo<tt>{<br></tt>}bar',\n        'foo<tt>{<br></tt>b]ar',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<span style=font-family:monospace>b]ar</span>baz',\n        'foo<span style=font-family:monospace>ba[r</span>b]az',\n        'fo[o<span style=font-family:monospace>bar</span>b]az',\n        'foo[<span style=font-family:monospace>b]ar</span>baz',\n        'foo<span style=font-family:monospace>ba[r</span>]baz',\n        'foo[<span style=font-family:monospace>bar</span>]baz',\n        'foo<span style=font-family:monospace>[bar]</span>baz',\n        'foo{<span style=font-family:monospace>bar</span>}baz',\n        'fo[o<code>b]ar</code>',\n        'fo[o<kbd>b]ar</kbd>',\n        'fo[o<listing>b]ar</listing>',\n        'fo[o<pre>b]ar</pre>',\n        'fo[o<samp>b]ar</samp>',\n        'fo[o<tt>b]ar</tt>',\n        '<tt>fo[o</tt><code>b]ar</code>',\n        '<pre>fo[o</pre><samp>b]ar</samp>',\n        '<span style=font-family:monospace>fo[o</span><kbd>b]ar</kbd>',\n    ],\n    //@}\n    fontsize: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        [\"1\", 'foo[bar]baz'],\n        [\"0\", 'foo[bar]baz'],\n        [\"-5\", 'foo[bar]baz'],\n        [\"6\", 'foo[bar]baz'],\n        [\"7\", 'foo[bar]baz'],\n        [\"8\", 'foo[bar]baz'],\n        [\"100\", 'foo[bar]baz'],\n        [\"2em\", 'foo[bar]baz'],\n        [\"20pt\", 'foo[bar]baz'],\n        [\"xx-large\", 'foo[bar]baz'],\n        [\" 1 \", 'foo[bar]baz'],\n        [\"1.\", 'foo[bar]baz'],\n        [\"1.0\", 'foo[bar]baz'],\n        [\"1.0e2\", 'foo[bar]baz'],\n        [\"1.1\", 'foo[bar]baz'],\n        [\"1.9\", 'foo[bar]baz'],\n        [\"+0\", 'foo[bar]baz'],\n        [\"+1\", 'foo[bar]baz'],\n        [\"+9\", 'foo[bar]baz'],\n        [\"-0\", 'foo[bar]baz'],\n        [\"-1\", 'foo[bar]baz'],\n        [\"-9\", 'foo[bar]baz'],\n        [\"\", 'foo[bar]baz'],\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<font size=1>[bar]</font>baz',\n        '<font size=1>foo[bar]baz</font>',\n        'foo<font size=3>[bar]</font>baz',\n        '<font size=3>foo[bar]baz</font>',\n        'foo<font size=4>[bar]</font>baz',\n        '<font size=4>foo[bar]baz</font>',\n        'foo<font size=+1>[bar]</font>baz',\n        '<font size=+1>foo[bar]baz</font>',\n        '<font size=4>foo<font size=1>b[a]r</font>baz</font>',\n\n        'foo<span style=\"font-size: xx-small\">[bar]</span>baz',\n        '<span style=\"font-size: xx-small\">foo[bar]baz</span>',\n        'foo<span style=\"font-size: medium\">[bar]</span>baz',\n        '<span style=\"font-size: medium\">foo[bar]baz</span>',\n        'foo<span style=\"font-size: large\">[bar]</span>baz',\n        '<span style=\"font-size: large\">foo[bar]baz</span>',\n        '<span style=\"font-size: large\">foo<span style=\"font-size: xx-small\">b[a]r</span>baz</span>',\n\n        'foo<span style=\"font-size: 2em\">[bar]</span>baz',\n        '<span style=\"font-size: 2em\">foo[bar]baz</span>',\n\n        '<p style=\"font-size: xx-small\">foo[bar]baz</p>',\n        '<p style=\"font-size: medium\">foo[bar]baz</p>',\n        '<p style=\"font-size: large\">foo[bar]baz</p>',\n        '<p style=\"font-size: 2em\">foo[bar]baz</p>',\n\n        [\"3\", '<p style=\"font-size: xx-small\">foo[bar]baz</p>'],\n        [\"3\", '<p style=\"font-size: medium\">foo[bar]baz</p>'],\n        [\"3\", '<p style=\"font-size: large\">foo[bar]baz</p>'],\n        [\"3\", '<p style=\"font-size: 2em\">foo[bar]baz</p>'],\n\n        // Minor algorithm bug: this changes the size of the \"b\" and \"r\" in\n        // \"bar\" when we pull down styles\n        [\"3\", '<font size=6>foo <span style=\"font-size: 2em\">b[a]r</span> baz</font>'],\n\n        [\"3\", 'foo<big>[bar]</big>baz'],\n        [\"3\", 'foo<big>b[a]r</big>baz'],\n        [\"3\", 'foo<small>[bar]</small>baz'],\n        [\"3\", 'foo<small>b[a]r</small>baz'],\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<font size=2>b]ar</font>baz',\n        'foo<font size=2>ba[r</font>b]az',\n        'fo[o<font size=2>bar</font>b]az',\n        'foo[<font size=2>b]ar</font>baz',\n        'foo<font size=2>ba[r</font>]baz',\n        'foo[<font size=2>bar</font>]baz',\n        'foo<font size=2>[bar]</font>baz',\n        'foo{<font size=2>bar</font>}baz',\n        '<font size=1>fo[o</font><span style=font-size:xx-small>b]ar</span>',\n        '<font size=2>fo[o</font><span style=font-size:small>b]ar</span>',\n        '<font size=3>fo[o</font><span style=font-size:medium>b]ar</span>',\n        '<font size=4>fo[o</font><span style=font-size:large>b]ar</span>',\n        '<font size=5>fo[o</font><span style=font-size:x-large>b]ar</span>',\n        '<font size=6>fo[o</font><span style=font-size:xx-large>b]ar</span>',\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13829\n        [\"!6\", '<span style=background-color:aqua>[foo]</span>'],\n        [\"!6\", '<span style=background-color:aqua>foo[bar]baz</span>'],\n        [\"!6\", '[foo<span style=background-color:aqua>bar</span>baz]'],\n    ],\n    //@}\n    forecolor: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        ['blue', 'foo[bar]baz'],\n        ['f', 'foo[bar]baz'],\n        ['#f', 'foo[bar]baz'],\n        ['00f', 'foo[bar]baz'],\n        ['#00f', 'foo[bar]baz'],\n        ['0000ff', 'foo[bar]baz'],\n        ['#0000ff', 'foo[bar]baz'],\n        ['000000fff', 'foo[bar]baz'],\n        ['#000000fff', 'foo[bar]baz'],\n        ['rgb(0, 0, 255)', 'foo[bar]baz'],\n        ['rgb(0%, 0%, 100%)', 'foo[bar]baz'],\n        ['rgb( 0 ,0 ,255)', 'foo[bar]baz'],\n        ['rgba(0, 0, 255, 0.0)', 'foo[bar]baz'],\n        ['rgb(15, -10, 375)', 'foo[bar]baz'],\n        ['rgba(0, 0, 0, 1)', 'foo[bar]baz'],\n        ['rgba(255, 255, 255, 1)', 'foo[bar]baz'],\n        ['rgba(0, 0, 255, 0.5)', 'foo[bar]baz'],\n        ['hsl(240, 100%, 50%)', 'foo[bar]baz'],\n        ['cornsilk', 'foo[bar]baz'],\n        ['potato quiche', 'foo[bar]baz'],\n        ['transparent', 'foo[bar]baz'],\n        ['currentColor', 'foo[bar]baz'],\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<font color=blue>[bar]</font>baz',\n        'foo{<font color=blue>bar</font>}baz',\n        '<span style=\"color: blue\">foo<span style=\"color: brown\">[bar]</span>baz</span>',\n        '<span style=\"color: #00f\">foo<span style=\"color: brown\">[bar]</span>baz</span>',\n        '<span style=\"color: #0000ff\">foo<span style=\"color: brown\">[bar]</span>baz</span>',\n        '<span style=\"color: rgb(0, 0, 255)\">foo<span style=\"color: brown\">[bar]</span>baz</span>',\n        '<font color=blue>foo<font color=brown>[bar]</font>baz</font>',\n        '<span style=\"color: rgb(0, 0, 255)\">foo<span style=\"color: brown\">b[ar]</span>baz</span>',\n        'foo<span id=purple>ba[r</span>ba]z',\n        '<span style=\"color: rgb(0, 0, 255)\">foo<span id=purple>b[a]r</span>baz</span>',\n\n        ['blue', '<a href=http://www.google.com>foo[bar]baz</a>'],\n        ['#0000ff', '<a href=http://www.google.com>foo[bar]baz</a>'],\n        ['rgb(0,0,255)', '<a href=http://www.google.com>foo[bar]baz</a>'],\n\n        // Tests for queryCommandValue()\n        '<font color=\"blue\">[foo]</font>',\n        '<font color=\"0000ff\">[foo]</font>',\n        '<font color=\"#0000ff\">[foo]</font>',\n        '<span style=\"color: blue\">[foo]</span>',\n        '<span style=\"color: #0000ff\">[foo]</span>',\n        '<span style=\"color: rgb(0, 0, 255)\">[foo]</span>',\n        '<span style=\"color: rgb(0%, 0%, 100%)\">[foo]</span>',\n        '<span style=\"color: rgb( 0 ,0 ,255)\">[foo]</span>',\n        '<span style=\"color: rgba(0, 0, 255, 0.0)\">[foo]</span>',\n        '<span style=\"color: rgb(15, -10, 375)\">[foo]</span>',\n        '<span style=\"color: rgba(0, 0, 0, 1)\">[foo]</span>',\n        '<span style=\"color: rgba(255, 255, 255, 1)\">[foo]</span>',\n        '<span style=\"color: rgba(0, 0, 255, 0.5)\">[foo]</span>',\n        '<span style=\"color: hsl(240, 100%, 50%)\">[foo]</span>',\n        '<span style=\"color: cornsilk\">[foo]</span>',\n        '<span style=\"color: transparent\">[foo]</span>',\n        '<span style=\"color: currentColor\">[foo]</span>',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<font color=brown>b]ar</font>baz',\n        'foo<font color=brown>ba[r</font>b]az',\n        'fo[o<font color=brown>bar</font>b]az',\n        'foo[<font color=brown>b]ar</font>baz',\n        'foo<font color=brown>ba[r</font>]baz',\n        'foo[<font color=brown>bar</font>]baz',\n        'foo<font color=brown>[bar]</font>baz',\n        'foo{<font color=brown>bar</font>}baz',\n        '<font color=brown>fo[o</font><span style=color:brown>b]ar</span>',\n        '<span style=color:brown>fo[o</span><span style=color:#0000ff>b]ar</span>',\n    ],\n    //@}\n    formatblock: [\n    //@{\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        'foo]bar[baz<p>extra',\n        '{<p><p> <p>foo</p>}',\n        'foo[bar<i>baz]qoz</i>quz<p>extra',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        '<div>[foobar]</div>',\n        '<p>[foobar]</p>',\n        '<blockquote>[foobar]</blockquote>',\n        '<h1>[foobar]</h1>',\n        '<h2>[foobar]</h2>',\n        '<h3>[foobar]</h3>',\n        '<h4>[foobar]</h4>',\n        '<h5>[foobar]</h5>',\n        '<h6>[foobar]</h6>',\n        '<dl><dt>[foo]<dd>bar</dl>',\n        '<dl><dt>foo<dd>[bar]</dl>',\n        '<dl><dt>[foo<dd>bar]</dl>',\n        '<ol><li>[foobar]</ol>',\n        '<ul><li>[foobar]</ul>',\n        '<address>[foobar]</address>',\n        '<pre>[foobar]</pre>',\n        '<article>[foobar]</article>',\n        '<ins>[foobar]</ins>',\n        '<del>[foobar]</del>',\n        '<quasit>[foobar]</quasit>',\n        '<quasit style=\"display: block\">[foobar]</quasit>',\n\n        ['<p>', 'foo[]bar<p>extra'],\n        ['<p>', '<span>foo</span>{}<span>bar</span><p>extra'],\n        ['<p>', '<span>foo[</span><span>]bar</span><p>extra'],\n        ['<p>', 'foo[bar]baz<p>extra'],\n        ['<p>', 'foo]bar[baz<p>extra'],\n        ['<p>', '{<p><p> <p>foo</p>}'],\n        ['<p>', 'foo[bar<i>baz]qoz</i>quz<p>extra'],\n\n        ['<p>', '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>'],\n        ['<p>', '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>'],\n        ['<p>', '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>'],\n        ['<p>', '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>'],\n        ['<p>', '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>'],\n        ['<p>', '{<table><tr><td>foo<td>bar<td>baz</table>}'],\n\n        ['<p>', '<div>[foobar]</div>'],\n        ['<p>', '<p>[foobar]</p>'],\n        ['<p>', '<blockquote>[foobar]</blockquote>'],\n        ['<p>', '<h1>[foobar]</h1>'],\n        ['<p>', '<h2>[foobar]</h2>'],\n        ['<p>', '<h3>[foobar]</h3>'],\n        ['<p>', '<h4>[foobar]</h4>'],\n        ['<p>', '<h5>[foobar]</h5>'],\n        ['<p>', '<h6>[foobar]</h6>'],\n        ['<p>', '<dl><dt>[foo]<dd>bar</dl>'],\n        ['<p>', '<dl><dt>foo<dd>[bar]</dl>'],\n        ['<p>', '<dl><dt>[foo<dd>bar]</dl>'],\n        ['<p>', '<ol><li>[foobar]</ol>'],\n        ['<p>', '<ul><li>[foobar]</ul>'],\n        ['<p>', '<address>[foobar]</address>'],\n        ['<p>', '<pre>[foobar]</pre>'],\n        ['<p>', '<listing>[foobar]</listing>'],\n        ['<p>', '<xmp>[foobar]</xmp>'],\n        ['<p>', '<article>[foobar]</article>'],\n        ['<p>', '<ins>[foobar]</ins>'],\n        ['<p>', '<del>[foobar]</del>'],\n        ['<p>', '<quasit>[foobar]</quasit>'],\n        ['<p>', '<quasit style=\"display: block\">[foobar]</quasit>'],\n\n        ['<blockquote>', '<blockquote>[foo]</blockquote><p>extra'],\n        ['<blockquote>', '<blockquote><p>[foo]<p>bar</blockquote><p>extra'],\n        ['<blockquote>', '[foo]<blockquote>bar</blockquote><p>extra'],\n        ['<blockquote>', '<p>[foo<p>bar]<p>baz'],\n        ['<blockquote>', '<section>[foo]</section>'],\n        ['<blockquote>', '<section><p>[foo]</section>'],\n        ['<blockquote>', '<section><hgroup><h1>[foo]</h1><h2>bar</h2></hgroup><p>baz</section>'],\n        ['<article>', '<section>[foo]</section>'],\n\n        ['<address>', '<div>[foobar]</div>'],\n        ['<article>', '<div>[foobar]</div>'],\n        ['<blockquote>', '<div>[foobar]</div>'],\n        ['<dd>', '<div>[foobar]</div>'],\n        ['<del>', '<div>[foobar]</div>'],\n        ['<dl>', '<div>[foobar]</div>'],\n        ['<dt>', '<div>[foobar]</div>'],\n        ['<h1>', '<div>[foobar]</div>'],\n        ['<h2>', '<div>[foobar]</div>'],\n        ['<h3>', '<div>[foobar]</div>'],\n        ['<h4>', '<div>[foobar]</div>'],\n        ['<h5>', '<div>[foobar]</div>'],\n        ['<h6>', '<div>[foobar]</div>'],\n        ['<ins>', '<div>[foobar]</div>'],\n        ['<li>', '<div>[foobar]</div>'],\n        ['<ol>', '<div>[foobar]</div>'],\n        ['<pre>', '<div>[foobar]</div>'],\n        ['<ul>', '<div>[foobar]</div>'],\n        ['<quasit>', '<div>[foobar]</div>'],\n\n        ['<address>', '<p>[foobar]</p>'],\n        ['<article>', '<p>[foobar]</p>'],\n        ['<aside>', '<p>[foobar]</p>'],\n        ['<blockquote>', '<p>[foobar]</p>'],\n        ['<body>', '<p>[foobar]</p>'],\n        ['<dd>', '<p>[foobar]</p>'],\n        ['<del>', '<p>[foobar]</p>'],\n        ['<details>', '<p>[foobar]</p>'],\n        ['<dir>', '<p>[foobar]</p>'],\n        ['<dl>', '<p>[foobar]</p>'],\n        ['<dt>', '<p>[foobar]</p>'],\n        ['<fieldset>', '<p>[foobar]</p>'],\n        ['<figcaption>', '<p>[foobar]</p>'],\n        ['<figure>', '<p>[foobar]</p>'],\n        ['<footer>', '<p>[foobar]</p>'],\n        ['<form>', '<p>[foobar]</p>'],\n        ['<h1>', '<p>[foobar]</p>'],\n        ['<h2>', '<p>[foobar]</p>'],\n        ['<h3>', '<p>[foobar]</p>'],\n        ['<h4>', '<p>[foobar]</p>'],\n        ['<h5>', '<p>[foobar]</p>'],\n        ['<h6>', '<p>[foobar]</p>'],\n        ['<header>', '<p>[foobar]</p>'],\n        ['<head>', '<p>[foobar]</p>'],\n        ['<hgroup>', '<p>[foobar]</p>'],\n        ['<hr>', '<p>[foobar]</p>'],\n        ['<html>', '<p>[foobar]</p>'],\n        ['<ins>', '<p>[foobar]</p>'],\n        ['<li>', '<p>[foobar]</p>'],\n        ['<listing>', '<p>[foobar]</p>'],\n        ['<menu>', '<p>[foobar]</p>'],\n        ['<nav>', '<p>[foobar]</p>'],\n        ['<ol>', '<p>[foobar]</p>'],\n        ['<plaintext>', '<p>[foobar]</p>'],\n        ['<pre>', '<p>[foobar]</p>'],\n        ['<section>', '<p>[foobar]</p>'],\n        ['<ul>', '<p>[foobar]</p>'],\n        ['<xmp>', '<p>[foobar]</p>'],\n        ['<quasit>', '<p>[foobar]</p>'],\n\n        ['<address>', '<p>[foo<p>bar]'],\n        ['<article>', '<p>[foo<p>bar]'],\n        ['<aside>', '<p>[foo<p>bar]'],\n        ['<blockquote>', '<p>[foo<p>bar]'],\n        ['<body>', '<p>[foo<p>bar]'],\n        ['<dd>', '<p>[foo<p>bar]'],\n        ['<del>', '<p>[foo<p>bar]'],\n        ['<details>', '<p>[foo<p>bar]'],\n        ['<dir>', '<p>[foo<p>bar]'],\n        ['<div>', '<p>[foo<p>bar]'],\n        ['<dl>', '<p>[foo<p>bar]'],\n        ['<dt>', '<p>[foo<p>bar]'],\n        ['<fieldset>', '<p>[foo<p>bar]'],\n        ['<figcaption>', '<p>[foo<p>bar]'],\n        ['<figure>', '<p>[foo<p>bar]'],\n        ['<footer>', '<p>[foo<p>bar]'],\n        ['<form>', '<p>[foo<p>bar]'],\n        ['<h1>', '<p>[foo<p>bar]'],\n        ['<h2>', '<p>[foo<p>bar]'],\n        ['<h3>', '<p>[foo<p>bar]'],\n        ['<h4>', '<p>[foo<p>bar]'],\n        ['<h5>', '<p>[foo<p>bar]'],\n        ['<h6>', '<p>[foo<p>bar]'],\n        ['<header>', '<p>[foo<p>bar]'],\n        ['<head>', '<p>[foo<p>bar]'],\n        ['<hgroup>', '<p>[foo<p>bar]'],\n        ['<hr>', '<p>[foo<p>bar]'],\n        ['<html>', '<p>[foo<p>bar]'],\n        ['<ins>', '<p>[foo<p>bar]'],\n        ['<li>', '<p>[foo<p>bar]'],\n        ['<listing>', '<p>[foo<p>bar]'],\n        ['<menu>', '<p>[foo<p>bar]'],\n        ['<nav>', '<p>[foo<p>bar]'],\n        ['<ol>', '<p>[foo<p>bar]'],\n        ['<p>', '<p>[foo<p>bar]'],\n        ['<plaintext>', '<p>[foo<p>bar]'],\n        ['<pre>', '<p>[foo<p>bar]'],\n        ['<section>', '<p>[foo<p>bar]'],\n        ['<ul>', '<p>[foo<p>bar]'],\n        ['<xmp>', '<p>[foo<p>bar]'],\n        ['<quasit>', '<p>[foo<p>bar]'],\n\n        ['p', '<div>[foobar]</div>'],\n\n        '<ol><li>[foo]<li>bar</ol>',\n\n        ['<p>', '<h1>[foo]<br>bar</h1>'],\n        ['<p>', '<h1>foo<br>[bar]</h1>'],\n        ['<p>', '<h1>[foo<br>bar]</h1>'],\n        ['<address>', '<h1>[foo]<br>bar</h1>'],\n        ['<address>', '<h1>foo<br>[bar]</h1>'],\n        ['<address>', '<h1>[foo<br>bar]</h1>'],\n        ['<pre>', '<h1>[foo]<br>bar</h1>'],\n        ['<pre>', '<h1>foo<br>[bar]</h1>'],\n        ['<pre>', '<h1>[foo<br>bar]</h1>'],\n        ['<h2>', '<h1>[foo]<br>bar</h1>'],\n        ['<h2>', '<h1>foo<br>[bar]</h1>'],\n        ['<h2>', '<h1>[foo<br>bar]</h1>'],\n\n        ['<h1>', '<p>[foo]<br>bar</p>'],\n        ['<h1>', '<p>foo<br>[bar]</p>'],\n        ['<h1>', '<p>[foo<br>bar]</p>'],\n        ['<address>', '<p>[foo]<br>bar</p>'],\n        ['<address>', '<p>foo<br>[bar]</p>'],\n        ['<address>', '<p>[foo<br>bar]</p>'],\n        ['<pre>', '<p>[foo]<br>bar</p>'],\n        ['<pre>', '<p>foo<br>[bar]</p>'],\n        ['<pre>', '<p>[foo<br>bar]</p>'],\n\n        ['<p>', '<address>[foo]<br>bar</address>'],\n        ['<p>', '<address>foo<br>[bar]</address>'],\n        ['<p>', '<address>[foo<br>bar]</address>'],\n        ['<pre>', '<address>[foo]<br>bar</address>'],\n        ['<pre>', '<address>foo<br>[bar]</address>'],\n        ['<pre>', '<address>[foo<br>bar]</address>'],\n        ['<h1>', '<address>[foo]<br>bar</address>'],\n        ['<h1>', '<address>foo<br>[bar]</address>'],\n        ['<h1>', '<address>[foo<br>bar]</address>'],\n\n        ['<p>', '<pre>[foo]<br>bar</pre>'],\n        ['<p>', '<pre>foo<br>[bar]</pre>'],\n        ['<p>', '<pre>[foo<br>bar]</pre>'],\n        ['<address>', '<pre>[foo]<br>bar</pre>'],\n        ['<address>', '<pre>foo<br>[bar]</pre>'],\n        ['<address>', '<pre>[foo<br>bar]</pre>'],\n        ['<h1>', '<pre>[foo]<br>bar</pre>'],\n        ['<h1>', '<pre>foo<br>[bar]</pre>'],\n        ['<h1>', '<pre>[foo<br>bar]</pre>'],\n\n        ['<h1>', '<p>[foo</p>bar]'],\n        ['<h1>', '[foo<p>bar]</p>'],\n        ['<p>', '<div>[foo<p>bar]</p></div>'],\n        ['<p>', '<xmp>[foo]</xmp>'],\n        ['<div>', '<xmp>[foo]</xmp>'],\n\n        '<div><ol><li>[foo]</ol></div>',\n        '<div><table><tr><td>[foo]</table></div>',\n        '<p>[foo<h1>bar]</h1>',\n        '<h1>[foo</h1><h2>bar]</h2>',\n        '<div>[foo</div>bar]',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=47054\n        ['<p>', '<div style=color:blue>[foo]</div>'],\n        // https://bugs.webkit.org/show_bug.cgi?id=47574\n        ['<h1>', '{<p>foo</p>ba]r'],\n        ['<pre>', '&#10;[foo<p>bar]</p>'],\n        // From https://bugs.webkit.org/show_bug.cgi?id=47300\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14009\n        ['!<p>', '{<pre>&#10;foo&#10;&#10;bar&#10;</pre>}'],\n    ],\n    //@}\n    forwarddelete: [\n    //@{\n        // Collapsed selection\n        'foo[]',\n        '<span>foo[]</span>',\n        '<p>foo[]</p>',\n        'foo[]bar',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[]<span style=display:none>bar</span>baz',\n        'foo[]<script>bar</script>baz',\n        'fo[]&ouml;bar',\n        'fo[]o&#x308;bar',\n        'fo[]o&#x308;&#x327;bar',\n        '[]&ouml;bar',\n        '[]o&#x308;bar',\n        '[]o&#x308;&#x327;bar',\n\n        '[]&#x5e9;&#x5c1;&#x5b8;&#x5dc;&#x5d5;&#x5b9;&#x5dd;',\n        '&#x5e9;&#x5c1;&#x5b8;&#x5dc;[]&#x5d5;&#x5b9;&#x5dd;',\n\n        '<p>foo[]</p><p>bar</p>',\n        '<p>foo[]</p>bar',\n        'foo[]<p>bar</p>',\n        '<p>foo[]<br></p><p>bar</p>',\n        '<p>foo[]<br></p>bar',\n        'foo[]<br><p>bar</p>',\n\n        '<p>{}<br></p>foo',\n        '<p>{}<span><br></span></p>foo',\n        'foo{}<p><br>',\n        'foo{}<p><span><br></span>',\n        'foo{}<br><p><br>',\n        'foo{}<span><br></span><p><br>',\n        'foo{}<br><p><span><br></span>',\n        'foo{}<span><br></span><p><span><br></span>',\n        'foo{}<p>',\n        '<table><tr><td>{}</table>foo',\n        '<table><tr><td>{}<br></table>foo',\n        '<table><tr><td>{}<span><br></span></table>foo',\n\n        '<div><p>foo[]</p></div><p>bar</p>',\n        '<p>foo[]</p><div><p>bar</p></div>',\n        '<div><p>foo[]</p></div><div><p>bar</p></div>',\n        '<div><p>foo[]</p></div>bar',\n        'foo[]<div><p>bar</p></div>',\n\n        '<div>foo[]</div><div>bar</div>',\n        '<pre>foo[]</pre>bar',\n\n        'foo[]<br>bar',\n        '<b>foo[]</b><br>bar',\n        'foo[]<hr>bar',\n        '<p>foo[]<hr><p>bar',\n        '<p>foo[]</p><br><p>bar</p>',\n        '<p>foo[]</p><br><br><p>bar</p>',\n        '<p>foo[]</p><img src=/img/lion.svg><p>bar',\n        'foo[]<img src=/img/lion.svg>bar',\n\n        'foo[]<a>bar</a>',\n        'foo[]<a href=/>bar</a>',\n        'foo[]<a name=abc>bar</a>',\n        'foo[]<a href=/ name=abc>bar</a>',\n        'foo[]<span><a>bar</a></span>',\n        'foo[]<span><a href=/>bar</a></span>',\n        'foo[]<span><a name=abc>bar</a></span>',\n        'foo[]<span><a href=/ name=abc>bar</a></span>',\n        '<a>foo[]</a>bar',\n        '<a href=/>foo[]</a>bar',\n        '<a name=abc>foo[]</a>bar',\n        '<a href=/ name=abc>foo[]</a>bar',\n\n        'foo []&nbsp;',\n        '[]&nbsp; foo',\n        'foo[] &nbsp;bar',\n        'foo[]&nbsp; bar',\n        'foo[]&nbsp;&nbsp;bar',\n        'foo[]  bar',\n        'foo[] &nbsp; bar',\n        'foo []&nbsp; bar',\n        'foo &nbsp;[] bar',\n        'foo[] <span>&nbsp;</span> bar',\n        'foo []<span>&nbsp;</span> bar',\n        'foo <span>&nbsp;</span>[] bar',\n        '<b>foo[] </b>&nbsp;bar',\n        '<b>foo[]&nbsp;</b> bar',\n        '<b>foo[]&nbsp;</b>&nbsp;bar',\n        '<b>foo[] </b> bar',\n\n        '<pre>foo []&nbsp;</pre>',\n        '<pre>[]&nbsp; foo</pre>',\n        '<pre>foo[] &nbsp;bar</pre>',\n        '<pre>foo[]&nbsp; bar</pre>',\n        '<pre>foo[]  bar</pre>',\n\n        '<div style=white-space:pre>foo []&nbsp;</div>',\n        '<div style=white-space:pre>[]&nbsp; foo</div>',\n        '<div style=white-space:pre>foo[] &nbsp;bar</div>',\n        '<div style=white-space:pre>foo[]&nbsp; bar</div>',\n        '<div style=white-space:pre>foo[]  bar</div>',\n\n        '<div style=white-space:pre-wrap>foo []&nbsp;</div>',\n        '<div style=white-space:pre-wrap>[]&nbsp; foo</div>',\n        '<div style=white-space:pre-wrap>foo[] &nbsp;bar</div>',\n        '<div style=white-space:pre-wrap>foo[]&nbsp; bar</div>',\n        '<div style=white-space:pre-wrap>foo[]  bar</div>',\n\n        '<div style=white-space:pre-line>foo []&nbsp;</div>',\n        '<div style=white-space:pre-line>[]&nbsp; foo</div>',\n        '<div style=white-space:pre-line>foo[] &nbsp;bar</div>',\n        '<div style=white-space:pre-line>foo[]&nbsp; bar</div>',\n        '<div style=white-space:pre-line>foo[]  bar</div>',\n\n        '<div style=white-space:nowrap>foo []&nbsp;</div>',\n        '<div style=white-space:nowrap>[]&nbsp; foo</div>',\n        '<div style=white-space:nowrap>foo[] &nbsp;bar</div>',\n        '<div style=white-space:nowrap>foo[]&nbsp; bar</div>',\n        '<div style=white-space:nowrap>foo[]  bar</div>',\n\n        // Tables with collapsed selection\n        'foo[]<table><tr><td>bar</table>baz',\n        'foo<table><tr><td>bar[]</table>baz',\n        '<p>foo[]<table><tr><td>bar</table><p>baz',\n        '<table><tr><td>foo[]<td>bar</table>',\n        '<table><tr><td>foo[]<tr><td>bar</table>',\n\n        'foo[]<br><table><tr><td>bar</table>baz',\n        'foo<table><tr><td>bar[]<br></table>baz',\n        '<p>foo[]<br><table><tr><td>bar</table><p>baz',\n        '<p>foo<table><tr><td>bar[]<br></table><p>baz',\n        '<table><tr><td>foo[]<br><td>bar</table>',\n        '<table><tr><td>foo[]<br><tr><td>bar</table>',\n\n        'foo<table><tr><td>bar[]</table><br>baz',\n        'foo[]<table><tr><td><hr>bar</table>baz',\n        '<table><tr><td>foo[]<td><hr>bar</table>',\n        '<table><tr><td>foo[]<tr><td><hr>bar</table>',\n\n        // Lists with collapsed selection\n        'foo[]<ol><li>bar<li>baz</ol>',\n        'foo[]<br><ol><li>bar<li>baz</ol>',\n        '<ol><li>foo[]<li>bar</ol>',\n        '<ol><li>foo[]<br><li>bar</ol>',\n        '<ol><li>foo[]<li>bar<br>baz</ol>',\n\n        '<ol><li><p>foo[]<li>bar</ol>',\n        '<ol><li>foo[]<li><p>bar</ol>',\n        '<ol><li><p>foo[]<li><p>bar</ol>',\n\n        '<ol><li>foo[]<ul><li>bar</ul></ol>',\n        'foo[]<ol><ol><li>bar</ol></ol>',\n        'foo[]<div><ol><li>bar</ol></div>',\n\n        'foo[]<dl><dt>bar<dd>baz</dl>',\n        'foo[]<dl><dd>bar</dl>',\n        '<dl><dt>foo[]<dd>bar</dl>',\n        '<dl><dt>foo[]<dt>bar<dd>baz</dl>',\n        '<dl><dt>foo<dd>bar[]<dd>baz</dl>',\n\n        '<ol><li>foo[]</ol>bar',\n        '<ol><li>foo[]<br></ol>bar',\n        '<ol><li>{}<br></ol>bar',\n        '<ol><li>foo<li>{}<br></ol>bar',\n\n        '<ol><li>foo[]</ol><p>bar',\n        '<ol><li>foo[]<br></ol><p>bar',\n        '<ol><li>{}<br></ol><p>bar',\n        '<ol><li>foo<li>{}<br></ol><p>bar',\n\n        '<ol><li>foo[]</ol><br>',\n        '<ol><li>foo[]<br></ol><br>',\n        '<ol><li>{}<br></ol><br>',\n        '<ol><li>foo<li>{}<br></ol><br>',\n\n        '<ol><li>foo[]</ol><p><br>',\n        '<ol><li>foo[]<br></ol><p><br>',\n        '<ol><li>{}<br></ol><p><br>',\n        '<ol><li>foo<li>{}<br></ol><p><br>',\n\n        // Indented stuff with collapsed selection\n        'foo[]<blockquote>bar</blockquote>',\n        'foo[]<blockquote><blockquote>bar</blockquote></blockquote>',\n        'foo[]<blockquote><div>bar</div></blockquote>',\n        'foo[]<blockquote style=\"color: blue\">bar</blockquote>',\n\n        'foo[]<blockquote><blockquote><p>bar<p>baz</blockquote></blockquote>',\n        'foo[]<blockquote><div><p>bar<p>baz</div></blockquote>',\n        'foo[]<blockquote style=\"color: blue\"><p>bar<p>baz</blockquote>',\n\n        'foo[]<blockquote><p><b>bar</b><p>baz</blockquote>',\n        'foo[]<blockquote><p><strong>bar</strong><p>baz</blockquote>',\n        'foo[]<blockquote><p><span>bar</span><p>baz</blockquote>',\n\n        'foo[]<blockquote><ol><li>bar</ol></blockquote><p>extra',\n        'foo[]<blockquote>bar<ol><li>baz</ol>quz</blockquote><p>extra',\n        'foo<blockquote><ol><li>bar[]</li><ol><li>baz</ol><li>quz</ol></blockquote><p>extra',\n\n        // Invisible stuff with collapsed selection\n        'foo[]<span></span>bar',\n        'foo[]<span><span></span></span>bar',\n        'foo[]<quasit></quasit>bar',\n        'foo[]<span></span><br>bar',\n        '<span>foo[]<span></span></span>bar',\n        'foo[]<span></span><span>bar</span>',\n        'foo[]<div><div><p>bar</div></div>',\n        'foo[]<div><div><p><!--abc-->bar</div></div>',\n        'foo[]<div><div><!--abc--><p>bar</div></div>',\n        'foo[]<div><!--abc--><div><p>bar</div></div>',\n        'foo[]<!--abc--><div><div><p>bar</div></div>',\n        '<div><div><p>foo[]</div></div>bar',\n        '<div><div><p>foo[]</div></div><!--abc-->bar',\n        '<div><div><p>foo[]</div><!--abc--></div>bar',\n        '<div><div><p>foo[]</p><!--abc--></div></div>bar',\n        '<div><div><p>foo[]<!--abc--></div></div>bar',\n        '<div><div><p>foo[]</p></div></div><div><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]<!--abc--></p></div></div><div><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p><!--abc--></div></div><div><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p></div><!--abc--></div><div><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p></div></div><!--abc--><div><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p></div></div><div><!--abc--><div><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p></div></div><div><div><!--abc--><div>bar</div></div></div>',\n        '<div><div><p>foo[]</p></div></div><div><div><div><!--abc-->bar</div></div></div>',\n\n        // Styled stuff with collapsed selection\n        '<p style=color:blue>foo[]<p>bar',\n        '<p style=color:blue>foo[]<p style=color:brown>bar',\n        '<p>foo[]<p style=color:brown>bar',\n        '<p><font color=blue>foo[]</font><p>bar',\n        '<p><font color=blue>foo[]</font><p><font color=brown>bar</font>',\n        '<p>foo[]<p><font color=brown>bar</font>',\n        '<p><span style=color:blue>foo[]</font><p>bar',\n        '<p><span style=color:blue>foo[]</font><p><span style=color:brown>bar</font>',\n        '<p>foo[]<p><span style=color:brown>bar</font>',\n\n        '<p style=background-color:aqua>foo[]<p>bar',\n        '<p style=background-color:aqua>foo[]<p style=background-color:tan>bar',\n        '<p>foo[]<p style=background-color:tan>bar',\n        '<p><span style=background-color:aqua>foo[]</font><p>bar',\n        '<p><span style=background-color:aqua>foo[]</font><p><span style=background-color:tan>bar</font>',\n        '<p>foo[]<p><span style=background-color:tan>bar</font>',\n\n        '<p style=text-decoration:underline>foo[]<p>bar',\n        '<p style=text-decoration:underline>foo[]<p style=text-decoration:line-through>bar',\n        '<p>foo[]<p style=text-decoration:line-through>bar',\n        '<p><u>foo[]</u><p>bar',\n        '<p><u>foo[]</u><p><s>bar</s>',\n        '<p>foo[]<p><s>bar</s>',\n\n        '<p style=color:blue>foo[]</p>bar',\n        'foo[]<p style=color:brown>bar',\n        '<div style=color:blue><p style=color:green>foo[]</div>bar',\n        '<div style=color:blue><p style=color:green>foo[]</div><p style=color:brown>bar',\n        '<p style=color:blue>foo[]<div style=color:brown><p style=color:green>bar',\n\n        // Uncollapsed selection (should be same as delete command)\n        'foo[bar]baz',\n        '<p>foo<span style=color:#aBcDeF>[bar]</span>baz',\n        '<p>foo<span style=color:#aBcDeF>{bar}</span>baz',\n        '<p>foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '<p>[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '<p>{foo<span style=color:#aBcDeF>bar}</span>baz',\n        '<p>foo<span style=color:#aBcDeF>[bar</span>baz]',\n        '<p>foo<span style=color:#aBcDeF>{bar</span>baz}',\n        '<p>foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n        'foo<b>[bar]</b>baz',\n        'foo<b>{bar}</b>baz',\n        'foo{<b>bar</b>}baz',\n        'foo<span>[bar]</span>baz',\n        'foo<span>{bar}</span>baz',\n        'foo{<span>bar</span>}baz',\n        '<b>foo[bar</b><i>baz]quz</i>',\n        '<p>foo</p><p>[bar]</p><p>baz</p>',\n        '<p>foo</p><p>{bar}</p><p>baz</p>',\n        '<p>foo</p><p>{bar</p>}<p>baz</p>',\n        '<p>foo</p>{<p>bar}</p><p>baz</p>',\n        '<p>foo</p>{<p>bar</p>}<p>baz</p>',\n\n        '<p>foo[bar<p>baz]quz',\n        '<p>foo[bar<div>baz]quz</div>',\n        '<p>foo[bar<h1>baz]quz</h1>',\n        '<div>foo[bar</div><p>baz]quz',\n        '<blockquote>foo[bar</blockquote><pre>baz]quz</pre>',\n\n        '<p><b>foo[bar</b><p>baz]quz',\n        '<div><p>foo[bar</div><p>baz]quz',\n        '<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote',\n        '<p>foo[bar<p style=color:blue>baz]quz',\n        '<p>foo[bar<p><b>baz]quz</b>',\n\n        '<div><p>foo<p>[bar<p>baz]</div>',\n\n        'foo[<br>]bar',\n        '<p>foo[</p><p>]bar</p>',\n        '<p>foo[</p><p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>',\n        'foo{<p>}bar</p>',\n        'foo[<p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>baz',\n        'foo{<p>bar</p>}baz',\n        'foo<p>{bar</p>}baz',\n        'foo{<p>bar}</p>baz',\n        '<p>foo[</p>]bar',\n        '<p>foo{</p>}bar',\n        '<p>foo[</p>]bar<br>baz',\n        '<p>foo[</p>]bar<p>baz</p>',\n        'foo[<div><p>]bar</div>',\n        '<div><p>foo[</p></div>]bar',\n        'foo[<div><p>]bar</p>baz</div>',\n        'foo[<div>]bar<p>baz</p></div>',\n        '<div><p>foo</p>bar[</div>]baz',\n        '<div>foo<p>bar[</p></div>]baz',\n\n        '<p>foo<br>{</p>]bar',\n        '<p>foo<br><br>{</p>]bar',\n        'foo<br>{<p>]bar</p>',\n        'foo<br><br>{<p>]bar</p>',\n        '<p>foo<br>{</p><p>}bar</p>',\n        '<p>foo<br><br>{</p><p>}bar</p>',\n\n        '<table><tbody><tr><th>foo<th>[bar]<th>baz<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>foo<th>ba[r<th>b]az<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>fo[o<th>bar<th>b]az<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>foo<th>bar<th>ba[z<tr><td>q]uz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>[foo<th>bar<th>baz]<tr><td>quz<td>qoz<td>qiz</table>',\n        '<table><tbody><tr><th>[foo<th>bar<th>baz<tr><td>quz<td>qoz<td>qiz]</table>',\n        '{<table><tbody><tr><th>foo<th>bar<th>baz<tr><td>quz<td>qoz<td>qiz</table>}',\n        '<table><tbody><tr><td>foo<td>ba[r<tr><td>baz<td>quz<tr><td>q]oz<td>qiz</table>',\n        '<p>fo[o<table><tr><td>b]ar</table><p>baz',\n        '<p>foo<table><tr><td>ba[r</table><p>b]az',\n        '<p>fo[o<table><tr><td>bar</table><p>b]az',\n\n        '<p>foo<ol><li>ba[r<li>b]az</ol><p>quz',\n        '<p>foo<ol><li>bar<li>[baz]</ol><p>quz',\n        '<p>fo[o<ol><li>b]ar<li>baz</ol><p>quz',\n        '<p>foo<ol><li>bar<li>ba[z</ol><p>q]uz',\n        '<p>fo[o<ol><li>bar<li>b]az</ol><p>quz',\n        '<p>fo[o<ol><li>bar<li>baz</ol><p>q]uz',\n\n        '<ol><li>fo[o</ol><ol><li>b]ar</ol>',\n        '<ol><li>fo[o</ol><ul><li>b]ar</ul>',\n\n        'foo[<ol><li>]bar</ol>',\n        '<ol><li>foo[<li>]bar</ol>',\n        'foo[<dl><dt>]bar<dd>baz</dl>',\n        'foo[<dl><dd>]bar</dl>',\n        '<dl><dt>foo[<dd>]bar</dl>',\n        '<dl><dt>foo[<dt>]bar<dd>baz</dl>',\n        '<dl><dt>foo<dd>bar[<dd>]baz</dl>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=35281\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13976\n        '<ol><li>foo</ol>{}<br><ol><li>bar</ol>',\n        '<ol><li>foo</ol><p>{}<br></p><ol><li>bar</ol>',\n        '<ol><li><p>foo</ol><p>{}<br></p><ol><li>bar</ol>',\n        '<ol id=a><li>foo</ol>{}<br><ol><li>bar</ol>',\n        '<ol><li>foo</ol>{}<br><ol id=b><li>bar</ol>',\n        '<ol id=a><li>foo</ol>{}<br><ol id=b><li>bar</ol>',\n        '<ol class=a><li>foo</ol>{}<br><ol class=b><li>bar</ol>',\n        '<ol><ol><li>foo</ol><li>{}<br><ol><li>bar</ol></ol>',\n        '<ol><ol><li>foo</ol><li>{}<br></li><ol><li>bar</ol></ol>',\n        '<ol><li>foo[</ol>bar]<ol><li>baz</ol>',\n        '<ol><li>foo[</ol><p>bar]<ol><li>baz</ol>',\n        '<ol><li><p>foo[</ol><p>bar]<ol><li>baz</ol>',\n        '<ol><li>fo[]o</ol><ol><li>bar</ol>',\n        '<ol><li>foo</ol>[bar<ol><li>]baz</ol>',\n        '<ol><li>foo</ol><p>[bar<ol><li>]baz</ol>',\n        '<ol><li>foo</ol><p>[bar<ol><li><p>]baz</ol>',\n        '<ol><li>foo</ol><ol><li>[]bar</ol>',\n        '<ol><ol><li>foo[</ol><li>bar</ol>baz]<ol><li>quz</ol>',\n        '<ul><li>foo</ul>{}<br><ul><li>bar</ul>',\n        '<ul><li>foo</ul><p>{}<br></p><ul><li>bar</ul>',\n        '<ol><li>foo[<li>bar]</ol><ol><li>baz</ol><ol><li>quz</ol>',\n        '<ol><li>foo</ol>{}<br><ul><li>bar</ul>',\n        '<ol><li>foo</ol><p>{}<br></p><ul><li>bar</ul>',\n        '<ul><li>foo</ul>{}<br><ol><li>bar</ol>',\n        '<ul><li>foo</ul><p>{}<br></p><ol><li>bar</ol>',\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13831\n        '<p><b>[foo]</b>',\n        '<p><quasit>[foo]</quasit>',\n        '<p><b><i>[foo]</i></b>',\n        '<p><b>{foo}</b>',\n        '<p>{<b>foo</b>}',\n        '<p><b>[]f</b>',\n        '<b>[foo]</b>',\n        '<div><b>[foo]</b></div>',\n    ],\n    //@}\n    hilitecolor: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        '<p style=\"background-color: rgb(0, 255, 255)\">foo[bar]baz</p>',\n        '<p style=\"background-color: #00ffff\">foo[bar]baz</p>',\n        '<p style=\"background-color: aqua\">foo[bar]baz</p>',\n        '{<p style=\"background-color: aqua\">foo</p><p>bar</p>}',\n        '<span style=\"background-color: aqua\">foo<span style=\"background-color: tan\">[bar]</span>baz</span>',\n        '<span style=\"background-color: #00ffff\">foo<span style=\"background-color: tan\">[bar]</span>baz</span>',\n        '<span style=\"background-color: #0ff\">foo<span style=\"background-color: tan\">[bar]</span>baz</span>',\n        '<span style=\"background-color: rgb(0, 255, 255)\">foo<span style=\"background-color: tan\">[bar]</span>baz</span>',\n        '<span style=\"background-color: aqua\">foo<span style=\"background-color: tan\">b[ar]</span>baz</span>',\n        '<p style=\"background-color: aqua\">foo<span style=\"background-color: tan\">b[ar]</span>baz</p>',\n        '<div style=\"background-color: aqua\"><p style=\"background-color: tan\">b[ar]</p></div>',\n        '<span style=\"display: block; background-color: aqua\"><span style=\"display: block; background-color: tan\">b[ar]</span></span>',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<span style=background-color:tan>b]ar</span>baz',\n        'foo<span style=background-color:tan>ba[r</span>b]az',\n        'fo[o<span style=background-color:tan>bar</span>b]az',\n        'foo[<span style=background-color:tan>b]ar</span>baz',\n        'foo<span style=background-color:tan>ba[r</span>]baz',\n        'foo[<span style=background-color:tan>bar</span>]baz',\n        'foo<span style=background-color:tan>[bar]</span>baz',\n        'foo{<span style=background-color:tan>bar</span>}baz',\n        '<span style=background-color:tan>fo[o</span><span style=background-color:yellow>b]ar</span>',\n        '<span style=background-color:tan>fo[o</span><span style=background-color:tan>b]ar</span>',\n        '<span style=background-color:tan>fo[o<span style=background-color:transparent>b]ar</span></span>',\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13829\n        '!<font size=6>[foo]</font>',\n        '!<span style=font-size:xx-large>[foo]</span>',\n        '!<font size=6>foo[bar]baz</font>',\n        '!<span style=font-size:xx-large>foo[bar]baz</span>',\n        '![foo<font size=6>bar</font>baz]',\n        '![foo<span style=font-size:xx-large>bar</span>baz]',\n    ],\n    //@}\n    indent: [\n    //@{\n        // All these have a trailing unselected paragraph, because otherwise\n        // Gecko is unhappy: it throws exceptions in non-CSS mode, and in CSS\n        // mode it adds the indentation invisibly to the wrapper div in many\n        // cases.\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        '<p dir=rtl>×¤×[××¨]××<p dir=rtl>× ×××£',\n        '<p dir=rtl>×¤×[××¨××<p>Foobar]baz<p>Extra',\n        '<p>Foo[barbaz<p dir=rtl>×¤×××¨]××<p>Extra',\n        '<div><p>Foo[barbaz<p dir=rtl>×¤×××¨]××</div><p>Extra',\n        'foo]bar[baz<p>extra',\n        '{<p><p> <p>foo</p>}<p>extra',\n        'foo[bar<i>baz]qoz</i>quz<p>extra',\n        '[]foo<p>extra',\n        'foo[]<p>extra',\n        '<p>[]foo<p>extra',\n        '<p>foo[]<p>extra',\n        '<p>{}<br>foo</p><p>extra',\n        '<p>foo<br>{}</p><p>extra',\n        '<span>{}<br>foo</span>bar<p>extra',\n        '<span>foo<br>{}</span>bar<p>extra',\n        '<p>foo</p>{}<p>bar</p>',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<p>foo[bar]</p><p>baz</p><p>extra',\n        '<p>[foobar</p><p>ba]z</p><p>extra',\n        'foo[bar]<br>baz<p>extra',\n        'foo[bar]<br><br><br><br>baz<p>extra',\n        'foobar<br>[ba]z<p>extra',\n        'foobar<br><br><br><br>[ba]z<p>extra',\n        'foo[bar<br>ba]z<p>extra',\n        '<div>foo<p>[bar]</p>baz</div><p>extra',\n\n        // These mimic existing indentation in various browsers, to see how\n        // they cope with indenting twice.  This is spec, Gecko non-CSS, and\n        // Opera:\n        '<blockquote><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n        '<p>[foo]<blockquote><p>bar</blockquote><p>extra',\n        '<p>[foo<blockquote><p>b]ar</blockquote><p>extra',\n        '<p>foo<blockquote><p>bar</blockquote><p>[baz]<p>extra',\n        '<p>foo<blockquote><p>[bar</blockquote><p>baz]<p>extra',\n        '<p>[foo<blockquote><p>bar</blockquote><p>baz]<p>extra',\n        '<blockquote><p>foo</blockquote><p>[bar]<blockquote><p>baz</blockquote><p>extra',\n\n        '<blockquote>foo[bar]<br>baz</blockquote><p>extra',\n        '<blockquote>foo[bar<br>b]az</blockquote><p>extra',\n        '<blockquote>foo[bar]</blockquote>baz<p>extra',\n        '<blockquote>foo[bar</blockquote>b]az<p>extra',\n        '[foo]<blockquote>bar</blockquote><p>extra',\n        '[foo<blockquote>b]ar</blockquote><p>extra',\n        'foo<blockquote>bar</blockquote>[baz]<p>extra',\n        '[foo<blockquote>bar</blockquote>baz]<p>extra',\n        '<blockquote>foo</blockquote>[bar]<blockquote>baz</blockquote><p>extra',\n\n        // IE:\n        '<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n        '<p>[foo]<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>bar</blockquote><p>extra',\n        '<p>[foo<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>b]ar</blockquote><p>extra',\n        '<p>foo<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>bar</blockquote><p>[baz]<p>extra',\n        '<p>foo<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>[bar</blockquote><p>baz]<p>extra',\n        '<p>[foo<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>bar</blockquote><p>baz]<p>extra',\n        '<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>foo</blockquote><p>[bar]<blockquote style=\"margin-right: 0\" dir=\"ltr\"><p>baz</blockquote><p>extra',\n\n        // Firefox CSS mode:\n        '<p style=\"margin-left: 40px\">foo[bar]</p><p style=\"margin-left: 40px\">baz</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar</p><p style=\"margin-left: 40px\">b]az</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar]</p><p>baz</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar</p><p>b]az</p><p>extra',\n        '<p>[foo]<p style=\"margin-left: 40px\">bar<p>extra',\n        '<p>[foo<p style=\"margin-left: 40px\">b]ar<p>extra',\n        '<p>foo<p style=\"margin-left: 40px\">bar<p>[baz]<p>extra',\n        '<p>foo<p style=\"margin-left: 40px\">[bar<p>baz]<p>extra',\n        '<p>[foo<p style=\"margin-left: 40px\">bar<p>baz]<p>extra',\n        '<p style=\"margin-left: 40px\">foo<p>[bar]<p style=\"margin-left: 40px\">baz<p>extra',\n\n        // WebKit:\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n        '<p>[foo]<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>bar</blockquote><p>extra',\n        '<p>[foo<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>b]ar</blockquote><p>extra',\n        '<p>foo<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>bar</blockquote><p>[baz]<p>extra',\n        '<p>foo<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>[bar</blockquote><p>baz]<p>extra',\n        '<p>[foo<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>bar</blockquote><p>baz]<p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>foo</blockquote><p>[bar]<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px\"><p>baz</blockquote><p>extra',\n\n        // MDC says \"In Firefox, if the selection spans multiple lines at\n        // different levels of indentation, only the least indented lines in\n        // the selection will be indented.\"  Let's test that.\n        '<blockquote>f[oo<blockquote>b]ar</blockquote></blockquote><p>extra',\n\n        // Lists!\n        '<ol><li>foo<li>[bar]<li>baz</ol>',\n        '<ol data-start=1 data-end=2><li>foo<li>bar<li>baz</ol>',\n        '<ol><li>foo</ol>[bar]',\n        '<ol><li>[foo]<br>bar<li>baz</ol>',\n        '<ol><li>foo<br>[bar]<li>baz</ol>',\n        '<ol><li><div>[foo]</div>bar<li>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol data-start=0 data-end=1><li>bar<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol data-start=1 data-end=2><li>bar<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>b[a]r</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol><li>b[a]r</ol><li>baz</ol>',\n        '<ol><li>foo{<ol><li>bar</ol>}<li>baz</ol>',\n        '<ol><li>foo</li>{<ol><li>bar</ol>}<li>baz</ol>',\n        '<ol><li>[foo]<ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>[foo]</li><ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>foo<li>[bar]<ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<li>[bar]</li><ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>baz</ol><li>[quz]</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>baz</ol><li>[quz]</ol>',\n\n        // Lists with id's:\n        // http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-July/020721.html\n        '<ol><ol id=u1><li id=i1>foo</ol><li id=i2>[bar]</li><ol id=u3><li id=i3>baz</ol></ol>',\n        '<ol><ol><li id=i1>foo</ol><li id=i2>[bar]</li><ol id=u3><li id=i3>baz</ol></ol>',\n        '<ol><ol id=u1><li id=i1>foo</ol><li id=i2>[bar]</li><ol><li id=i3>baz</ol></ol>',\n        '<ol><li id=i2>[bar]</li><ol id=u3><li id=i3>baz</ol></ol>',\n        '<ol><ol id=u1><li id=i1>foo</ol><li id=i2>[bar]</ol>',\n\n        // Try indenting multiple items at once.\n        '<ol><li>foo<li>b[ar<li>baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>[foo</li><ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>foo<ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>foo</li><ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>[foo<ol><li>bar</ol><li>baz]</ol><p>extra',\n        '<ol><li>[foo</li><ol><li>bar</ol><li>baz]</ol><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ol><li>[foo]<ol><li>bar</ol>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]</ol>baz</ol>',\n        '<ol><li>foo<ol><li>bar</ol>[baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol>baz</ol>',\n\n        'foo<!--bar-->[baz]<p>extra',\n        '[foo]<!--bar-->baz<p>extra',\n        '<p>foo<!--bar-->{}<p>extra',\n        '<p>{}<!--foo-->bar<p>extra',\n\n        // Whitespace nodes\n        '<blockquote><p>foo</blockquote> <p>[bar]',\n        '<p>[foo]</p> <blockquote><p>bar</blockquote>',\n        '<blockquote><p>foo</blockquote> <p>[bar]</p> <blockquote><p>baz</blockquote>',\n        '<ol><li>foo</li><ol><li>bar</li> </ol><li>[baz]</ol>',\n        '<ol><li>foo</li><ol><li>bar</li></ol> <li>[baz]</ol>',\n        '<ol><li>foo</li><ol><li>bar</li> </ol> <li>[baz]</ol>',\n        '<ol><li>foo<ol><li>bar</li> </ol></li><li>[baz]</ol>',\n        '<ol><li>foo<ol><li>bar</li></ol></li> <li>[baz]</ol>',\n        '<ol><li>foo<ol><li>bar</li> </ol></li> <li>[baz]</ol>',\n        '<ol><li>foo<li>[bar]</li> <ol><li>baz</ol></ol>',\n        '<ol><li>foo<li>[bar]</li><ol> <li>baz</ol></ol>',\n        '<ol><li>foo<li>[bar]</li> <ol> <li>baz</ol></ol>',\n        '<ol><li>foo<li>[bar] <ol><li>baz</ol></ol>',\n        '<ol><li>foo<li>[bar]<ol> <li>baz</ol></ol>',\n        '<ol><li>foo<li>[bar] <ol> <li>baz</ol></ol>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=32003\n        '<ul><li>a<br>{<br>}</li><li>b</li></ul>',\n    ],\n    //@}\n    inserthorizontalrule: [\n    //@{\n        'foo[]bar',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        '<p>foo[bar<p>baz]quz',\n        '<div><b>foo</b>{}<b>bar</b></div>',\n        '<div><b>foo[</b><b>]bar</b></div>',\n        '<div><b>foo</b>{<b>bar</b>}<b>baz</b></div>',\n        '<b>foo[]bar</b>',\n        '<b id=abc>foo[]bar</b>',\n        [\"abc\", 'foo[bar]baz'],\n        'foo[bar]baz',\n\n        'foo<b>[bar]</b>baz',\n        'foo<b>{bar}</b>baz',\n        'foo{<b>bar</b>}baz',\n        '<p>foo<p>[bar]<p>baz',\n        '<p>foo<p>{bar}<p>baz',\n        '<p>foo{<p>bar</p>}<p>baz',\n\n        '<p>foo[bar]baz</p>',\n        '<p id=abc>foo[bar]baz</p>',\n        '<h1>foo[bar]baz</h1>',\n        '<p>foo<b>b[a]r</b>baz</p>',\n\n        '<a>foo[bar]baz</a>',\n        '<a href=/>foo[bar]baz</a>',\n        '<abbr>foo[bar]baz</abbr>',\n        '<address>foo[bar]baz</address>',\n        '<article>foo[bar]baz</article>',\n        '<aside>foo[bar]baz</aside>',\n        '<b>foo[bar]baz</b>',\n        '<bdi>foo[bar]baz</bdi>',\n        '<bdo dir=rtl>foo[bar]baz</bdo>',\n        '<blockquote>foo[bar]baz</blockquote>',\n        '<table><caption>foo[bar]baz</caption><tr><td>quz</table>',\n        '<cite>foo[bar]baz</cite>',\n        '<code>foo[bar]baz</code>',\n        '<dl><dd>foo[bar]baz</dd></dl>',\n        '<del>foo[bar]baz</del>',\n        '<details>foo[bar]baz</details>',\n        '<dfn>foo[bar]baz</dfn>',\n        '<div>foo[bar]baz</div>',\n        '<dl><dt>foo[bar]baz</dt></dl>',\n        '<em>foo[bar]baz</em>',\n        '<figure><figcaption>foo[bar]baz</figcaption>quz</figure>',\n        '<figure>foo[bar]baz</figure>',\n        '<footer>foo[bar]baz</footer>',\n        '<h1>foo[bar]baz</h1>',\n        '<h2>foo[bar]baz</h2>',\n        '<h3>foo[bar]baz</h3>',\n        '<h4>foo[bar]baz</h4>',\n        '<h5>foo[bar]baz</h5>',\n        '<h6>foo[bar]baz</h6>',\n        '<header>foo[bar]baz</header>',\n        '<hgroup>foo[bar]baz</hgroup>',\n        '<hgroup><h1>foo[bar]baz</h1></hgroup>',\n        '<i>foo[bar]baz</i>',\n        '<ins>foo[bar]baz</ins>',\n        '<kbd>foo[bar]baz</kbd>',\n        '<mark>foo[bar]baz</mark>',\n        '<nav>foo[bar]baz</nav>',\n        '<ol><li>foo[bar]baz</li></ol>',\n        '<p>foo[bar]baz</p>',\n        '<pre>foo[bar]baz</pre>',\n        '<q>foo[bar]baz</q>',\n        '<ruby>foo[bar]baz<rt>quz</rt></ruby>',\n        '<ruby>foo<rt>bar[baz]quz</rt></ruby>',\n        '<ruby>foo<rp>bar[baz]quz</rp><rt>qoz</rt><rp>qiz</rp></ruby>',\n        '<s>foo[bar]baz</s>',\n        '<samp>foo[bar]baz</samp>',\n        '<section>foo[bar]baz</section>',\n        '<small>foo[bar]baz</small>',\n        '<span>foo[bar]baz</span>',\n        '<strong>foo[bar]baz</strong>',\n        '<sub>foo[bar]baz</sub>',\n        '<sup>foo[bar]baz</sup>',\n        '<table><tr><td>foo[bar]baz</td></table>',\n        '<table><tr><th>foo[bar]baz</th></table>',\n        '<u>foo[bar]baz</u>',\n        '<ul><li>foo[bar]baz</li></ul>',\n        '<var>foo[bar]baz</var>',\n\n        '<acronym>foo[bar]baz</acronym>',\n        '<big>foo[bar]baz</big>',\n        '<blink>foo[bar]baz</blink>',\n        '<center>foo[bar]baz</center>',\n        '<dir>foo[bar]baz</dir>',\n        '<dir><li>foo[bar]baz</li></dir>',\n        '<font>foo[bar]baz</font>',\n        '<listing>foo[bar]baz</listing>',\n        '<marquee>foo[bar]baz</marquee>',\n        '<nobr>foo[bar]baz</nobr>',\n        '<strike>foo[bar]baz</strike>',\n        '<tt>foo[bar]baz</tt>',\n        '<xmp>foo[bar]baz</xmp>',\n\n        '<quasit>foo[bar]baz</quasit>',\n\n        '<table><tr><td>fo[o<td>b]ar</table>',\n        'fo[o<span contenteditable=false>bar</span>b]az',\n    ],\n    //@}\n    inserthtml: [\n    //@{\n        'foo[]bar',\n        'foo[bar]baz',\n        'foo<span style=color:#aBcDeF>[bar]</span>baz',\n        'foo<span style=color:#aBcDeF>{bar}</span>baz',\n        'foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '{foo<span style=color:#aBcDeF>bar}</span>baz',\n        'foo<span style=color:#aBcDeF>[bar</span>baz]',\n        'foo<span style=color:#aBcDeF>{bar</span>baz}',\n        'foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n        ['', 'foo[bar]baz'],\n        ['\\0', 'foo[bar]baz'],\n        ['\\x07', 'foo[bar]baz'],\n        // The following line makes Firefox 7.0a2 go into an infinite loop on\n        // my machine.\n        //['\\ud800', 'foo[bar]baz'],\n\n        ['<b>', 'foo[bar]baz'],\n        ['<b>abc', 'foo[bar]baz'],\n        ['<p>abc', '<p>foo[bar]baz'],\n        ['<li>abc', '<p>foo[bar]baz'],\n        ['<p>abc', '<ol>{<li>foo</li>}<li>bar</ol>'],\n        ['<p>abc', '<ol><li>foo</li>{<li>bar</li>}<li>baz</ol>'],\n        ['<p>abc', '<ol><li>[foo]</li><li>bar</ol>'],\n\n        ['abc', '<xmp>f[o]o</xmp>'],\n        ['<b>abc</b>', '<xmp>f[o]o</xmp>'],\n        ['abc', '<script>f[o]o</script>bar'],\n        ['<b>abc</b>', '<script>f[o]o</script>bar'],\n\n        ['<a>abc</a>', '<a>f[o]o</a>'],\n        ['<a href=/>abc</a>', '<a href=.>f[o]o</a>'],\n        ['<hr>', '<p>f[o]o'],\n        ['<hr>', '<b>f[o]o</b>'],\n        ['<h2>abc</h2>', '<h1>f[o]o</h1>'],\n        ['<td>abc</td>', '<table><tr><td>f[o]o</table>'],\n        ['<td>abc</td>', 'f[o]o'],\n\n        ['<dt>abc</dt>', '<dl><dt>f[o]o<dd>bar</dl>'],\n        ['<dt>abc</dt>', '<dl><dt>foo<dd>b[a]r</dl>'],\n        ['<dd>abc</dd>', '<dl><dt>f[o]o<dd>bar</dl>'],\n        ['<dd>abc</dd>', '<dl><dt>foo<dd>b[a]r</dl>'],\n        ['<dt>abc</dt>', 'f[o]o'],\n        ['<dt>abc</dt>', '<ol><li>f[o]o</ol>'],\n        ['<dd>abc</dd>', 'f[o]o'],\n        ['<dd>abc</dd>', '<ol><li>f[o]o</ol>'],\n\n        ['<li>abc</li>', '<dir><li>f[o]o</dir>'],\n        ['<li>abc</li>', '<ol><li>f[o]o</ol>'],\n        ['<li>abc</li>', '<ul><li>f[o]o</ul>'],\n        ['<dir><li>abc</dir>', '<dir><li>f[o]o</dir>'],\n        ['<dir><li>abc</dir>', '<ol><li>f[o]o</ol>'],\n        ['<dir><li>abc</dir>', '<ul><li>f[o]o</ul>'],\n        ['<ol><li>abc</ol>', '<dir><li>f[o]o</dir>'],\n        ['<ol><li>abc</ol>', '<ol><li>f[o]o</ol>'],\n        ['<ol><li>abc</ol>', '<ul><li>f[o]o</ul>'],\n        ['<ul><li>abc</ul>', '<dir><li>f[o]o</dir>'],\n        ['<ul><li>abc</ul>', '<ol><li>f[o]o</ol>'],\n        ['<ul><li>abc</ul>', '<ul><li>f[o]o</ul>'],\n        ['<li>abc</li>', 'f[o]o'],\n\n        ['<nobr>abc</nobr>', '<nobr>f[o]o</nobr>'],\n        ['<nobr>abc</nobr>', 'f[o]o'],\n\n        ['<p>abc', '<font color=blue>foo[]bar</font>'],\n        ['<p>abc', '<span style=color:blue>foo[]bar</span>'],\n        ['<p>abc', '<span style=font-variant:small-caps>foo[]bar</span>'],\n        [' ', '<p>[foo]</p>'],\n        ['<span style=display:none></span>', '<p>[foo]</p>'],\n        ['<!--abc-->', '<p>[foo]</p>'],\n\n        ['abc', '<p>{}<br></p>'],\n        ['<!--abc-->', '<p>{}<br></p>'],\n        ['abc', '<p><!--foo-->{}<span><br></span><!--bar--></p>'],\n        ['<!--abc-->', '<p><!--foo-->{}<span><br></span><!--bar--></p>'],\n        ['abc', '<p>{}<span><!--foo--><br><!--bar--></span></p>'],\n        ['<!--abc-->', '<p>{}<span><!--foo--><br><!--bar--></span></p>'],\n\n        ['abc', '<p><br>{}</p>'],\n        ['<!--abc-->', '<p><br>{}</p>'],\n        ['abc', '<p><!--foo--><span><br></span>{}<!--bar--></p>'],\n        ['<!--abc-->', '<p><!--foo--><span><br></span>{}<!--bar--></p>'],\n        ['abc', '<p><span><!--foo--><br><!--bar--></span>{}</p>'],\n        ['<!--abc-->', '<p><span><!--foo--><br><!--bar--></span>{}</p>'],\n    ],\n    //@}\n    insertimage: [\n    //@{\n        'foo[]bar',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        [\"\", 'foo[bar]baz'],\n        'foo[bar]baz',\n        'foo<span style=color:#aBcDeF>[bar]</span>baz',\n        'foo<span style=color:#aBcDeF>{bar}</span>baz',\n        'foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '{foo<span style=color:#aBcDeF>bar}</span>baz',\n        'foo<span style=color:#aBcDeF>[bar</span>baz]',\n        'foo<span style=color:#aBcDeF>{bar</span>baz}',\n        'foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n        'foo<b>[bar]</b>baz',\n        'foo<b>{bar}</b>baz',\n        'foo{<b>bar</b>}baz',\n        'foo<span>[bar]</span>baz',\n        'foo<span>{bar}</span>baz',\n        'foo{<span>bar</span>}baz',\n        '<b>foo[bar</b><i>baz]quz</i>',\n        '<p>foo</p><p>[bar]</p><p>baz</p>',\n        '<p>foo</p><p>{bar}</p><p>baz</p>',\n        '<p>foo</p>{<p>bar</p>}<p>baz</p>',\n\n        '<p>foo[bar<p>baz]quz',\n        '<p>foo[bar<div>baz]quz</div>',\n        '<p>foo[bar<h1>baz]quz</h1>',\n        '<div>foo[bar</div><p>baz]quz',\n        '<blockquote>foo[bar</blockquote><pre>baz]quz</pre>',\n\n        '<p><b>foo[bar</b><p>baz]quz',\n        '<div><p>foo[bar</div><p>baz]quz',\n        '<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote',\n        '<p>foo[bar<p style=color:blue>baz]quz',\n        '<p>foo[bar<p><b>baz]quz</b>',\n\n        '<div><p>foo<p>[bar<p>baz]</div>',\n\n        'foo[<br>]bar',\n        '<p>foo[</p><p>]bar</p>',\n        '<p>foo[</p><p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>',\n        'foo[<p>]bar<br>baz</p>',\n        'foo[<p>]bar</p>baz',\n        '<p>foo[</p>]bar',\n        '<p>foo[</p>]bar<br>baz',\n        '<p>foo[</p>]bar<p>baz</p>',\n        'foo[<div><p>]bar</div>',\n        '<div><p>foo[</p></div>]bar',\n        'foo[<div><p>]bar</p>baz</div>',\n        'foo[<div>]bar<p>baz</p></div>',\n        '<div><p>foo</p>bar[</div>]baz',\n        '<div>foo<p>bar[</p></div>]baz',\n    ],\n    //@}\n    insertlinebreak: [\n    //@{ Same as insertparagraph (set below)\n    ],\n    //@}\n    insertorderedlist: [\n    //@{\n        'foo[]bar',\n        'foo[bar]baz',\n        'foo<br>[bar]',\n        'f[oo<br>b]ar<br>baz',\n        '<p>[foo]<br>bar</p>',\n        '[foo<ol><li>bar]</ol>baz',\n        'foo<ol><li>[bar</ol>baz]',\n        '[foo<ul><li>bar]</ul>baz',\n        'foo<ul><li>[bar</ul>baz]',\n        'foo<ul><li>[bar</ul><ol><li>baz]</ol>quz',\n        'foo<ol><li>[bar</ol><ul><li>baz]</ul>quz',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr><td>fo[o<td>b]ar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        '<p>foo<p>[bar]<p>baz',\n        '<p>foo<blockquote>[bar]</blockquote><p>baz',\n        '<dl><dt>foo<dd>[bar]<dt>baz<dd>quz</dl>',\n        '<dl><dt>foo<dd>bar<dt>[baz]<dd>quz</dl>',\n\n        '<p>[foo<p>bar]<p>baz',\n        '<p>[foo<blockquote>bar]</blockquote><p>baz',\n        '<dl><dt>[foo<dd>bar]<dt>baz<dd>quz</dl>',\n        '<dl><dt>foo<dd>[bar<dt>baz]<dd>quz</dl>',\n\n        '<p>[foo<blockquote><p>bar]<p>baz</blockquote>',\n\n\n        // Various <ol> stuff\n        '<ol><li>foo<li>[bar]<li>baz</ol>',\n        '<ol><li>foo</ol>[bar]',\n        '[foo]<ol><li>bar</ol>',\n        '<ol><li>foo</ol>[bar]<ol><li>baz</ol>',\n        '<ol><ol><li>[foo]</ol></ol>',\n        '<ol><li>[foo]<br>bar<li>baz</ol>',\n        '<ol><li>foo<br>[bar]<li>baz</ol>',\n        '<ol><li><div>[foo]</div>bar<li>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>[foo]<ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>[foo]</li><ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>foo<li>[bar]<ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<li>[bar]</li><ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>baz</ol><li>[quz]</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>baz</ol><li>[quz]</ol>',\n\n        // Multiple items at once.\n        '<ol><li>foo<li>[bar<li>baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>foo<ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>[foo<ol><li>bar</ol><li>baz]</ol><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ol><li>[foo]<ol><li>bar</ol>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]</ol>baz</ol>',\n        '<ol><li>foo<ol><li>bar</ol>[baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol>baz</ol>',\n\n\n        // Same stuff but with <ul>\n        '<ul><li>foo<li>[bar]<li>baz</ul>',\n        '<ul><li>foo</ul>[bar]',\n        '[foo]<ul><li>bar</ul>',\n        '<ul><li>foo</ul>[bar]<ul><li>baz</ul>',\n        '<ul><ul><li>[foo]</ul></ul>',\n        '<ul><li>[foo]<br>bar<li>baz</ul>',\n        '<ul><li>foo<br>[bar]<li>baz</ul>',\n        '<ul><li><div>[foo]</div>bar<li>baz</ul>',\n        '<ul><li>foo<ul><li>[bar]<li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<ul><li>bar<li>[baz]</ul><li>quz</ul>',\n        '<ul><li>foo</li><ul><li>[bar]<li>baz</ul><li>quz</ul>',\n        '<ul><li>foo</li><ul><li>bar<li>[baz]</ul><li>quz</ul>',\n        '<ul><li>[foo]<ul><li>bar</ul><li>baz</ul>',\n        '<ul><li>[foo]</li><ul><li>bar</ul><li>baz</ul>',\n        '<ul><li>foo<li>[bar]<ul><li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<li>[bar]</li><ul><li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<ul><li>bar<li>baz</ul><li>[quz]</ul>',\n        '<ul><li>foo</li><ul><li>bar<li>baz</ul><li>[quz]</ul>',\n\n        // Multiple items at once.\n        '<ul><li>foo<li>[bar<li>baz]</ul>',\n        '<ul><li>[foo<ul><li>bar]</ul><li>baz</ul>',\n        '<ul><li>foo<ul><li>b[ar</ul><li>b]az</ul>',\n        '<ul><li>[foo<ul><li>bar</ul><li>baz]</ul><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ul><li>[foo]<ul><li>bar</ul>baz</ul>',\n        '<ul><li>foo<ul><li>[bar]</ul>baz</ul>',\n        '<ul><li>foo<ul><li>bar</ul>[baz]</ul>',\n        '<ul><li>[foo<ul><li>bar]</ul>baz</ul>',\n\n\n        // Mix of <ol> and <ul>\n        'foo<ol><li>bar</ol><ul><li>[baz]</ul>quz',\n        'foo<ol><li>bar</ol><ul><li>[baz</ul>quz]',\n        'foo<ul><li>[bar]</ul><ol><li>baz</ol>quz',\n        '[foo<ul><li>bar]</ul><ol><li>baz</ol>quz',\n\n        // Interaction with indentation\n        '[foo]<blockquote>bar</blockquote>baz',\n        'foo<blockquote>[bar]</blockquote>baz',\n        '[foo<blockquote>bar]</blockquote>baz',\n        '<ol><li>foo</ol><blockquote>[bar]</blockquote>baz',\n        '[foo]<blockquote><ol><li>bar</ol></blockquote>baz',\n        'foo<blockquote>[bar]<br>baz</blockquote>',\n        '[foo<blockquote>bar]<br>baz</blockquote>',\n        '<ol><li>foo</ol><blockquote>[bar]<br>baz</blockquote>',\n\n        '<p>[foo]<blockquote><p>bar</blockquote><p>baz',\n        '<p>foo<blockquote><p>[bar]</blockquote><p>baz',\n        '<p>[foo<blockquote><p>bar]</blockquote><p>baz',\n        '<ol><li>foo</ol><blockquote><p>[bar]</blockquote><p>baz',\n\n        // Attributes\n        '<ul id=abc><li>foo<li>[bar]<li>baz</ul>',\n        '<ul style=color:blue><li>foo<li>[bar]<li>baz</ul>',\n        '<ul style=text-indent:1em><li>foo<li>[bar]<li>baz</ul>',\n        '<ul id=abc><li>[foo]<li>bar<li>baz</ul>',\n        '<ul style=color:blue><li>[foo]<li>bar<li>baz</ul>',\n        '<ul style=text-indent:1em><li>[foo]<li>bar<li>baz</ul>',\n        '<ul id=abc><li>foo<li>bar<li>[baz]</ul>',\n        '<ul style=color:blue><li>foo<li>bar<li>[baz]</ul>',\n        '<ul style=text-indent:1em><li>foo<li>bar<li>[baz]</ul>',\n\n        // Whitespace nodes\n        '<ol><li>foo</ol> <p>[bar]',\n        '<p>[foo]</p> <ol><li>bar</ol>',\n        '<ol><li>foo</ol> <p>[bar]</p> <ol><li>baz</ol>',\n\n        // This caused an infinite loop at one point due to a bug in \"fix\n        // disallowed ancestors\".  Disabled because I'm not sure how we want it\n        // to behave:\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14578\n        '!<span contenteditable=true>foo[]</span>',\n    ],\n    //@}\n    insertparagraph: [\n    //@{\n        'foo[bar]baz',\n        'fo[o<table><tr><td>b]ar</table>',\n        '<table><tr><td>[foo<td>bar]<tr><td>baz<td>quz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<tr><td>baz<td>quz</table>',\n        '<table><tr><td>fo[o</table>b]ar',\n        '<table><tr><td>fo[o<td>b]ar<td>baz</table>',\n        '{<table><tr><td>foo</table>}',\n        '<table><tr><td>[foo]</table>',\n        '<ol><li>[foo]<li>bar</ol>',\n        '<ol><li>f[o]o<li>bar</ol>',\n\n        '[]foo',\n        'foo[]',\n        '<span>foo[]</span>',\n        'foo[]<br>',\n        'foo[]bar',\n        '<address>[]foo</address>',\n        '<address>foo[]</address>',\n        '<address>foo[]<br></address>',\n        '<address>foo[]bar</address>',\n        '<div>[]foo</div>',\n        '<div>foo[]</div>',\n        '<div>foo[]<br></div>',\n        '<div>foo[]bar</div>',\n        '<dl><dt>[]foo<dd>bar</dl>',\n        '<dl><dt>foo[]<dd>bar</dl>',\n        '<dl><dt>foo[]<br><dd>bar</dl>',\n        '<dl><dt>foo[]bar<dd>baz</dl>',\n        '<dl><dt>foo<dd>[]bar</dl>',\n        '<dl><dt>foo<dd>bar[]</dl>',\n        '<dl><dt>foo<dd>bar[]<br></dl>',\n        '<dl><dt>foo<dd>bar[]baz</dl>',\n        '<h1>[]foo</h1>',\n        '<h1>foo[]</h1>',\n        '<h1>foo[]<br></h1>',\n        '<h1>foo[]bar</h1>',\n        '<ol><li>[]foo</ol>',\n        '<ol><li>foo[]</ol>',\n        '<ol><li>foo[]<br></ol>',\n        '<ol><li>foo[]bar</ol>',\n        '<p>[]foo</p>',\n        '<p>foo[]</p>',\n        '<p>foo[]<br></p>',\n        '<p>foo[]bar</p>',\n        '<pre>[]foo</pre>',\n        '<pre>foo[]</pre>',\n        '<pre>foo[]<br></pre>',\n        '<pre>foo[]bar</pre>',\n\n        '<pre>foo[]<br><br></pre>',\n        '<pre>foo<br>{}<br></pre>',\n        '<pre>foo&#10;[]</pre>',\n        '<pre>foo[]&#10;</pre>',\n        '<pre>foo&#10;[]&#10;</pre>',\n\n        '<xmp>foo[]bar</xmp>',\n        '<script>foo[]bar</script>baz',\n        '<div style=display:none>foo[]bar</div>baz',\n        '<listing>foo[]bar</listing>',\n\n        '<ol><li>{}<br></li></ol>',\n        'foo<ol><li>{}<br></li></ol>',\n        '<ol><li>{}<br></li></ol>foo',\n        '<ol><li>foo<li>{}<br></ol>',\n        '<ol><li>{}<br><li>bar</ol>',\n        '<ol><li>foo</li><ul><li>{}<br></ul></ol>',\n\n        '<dl><dt>{}<br></dt></dl>',\n        '<dl><dt>foo<dd>{}<br></dl>',\n        '<dl><dt>{}<br><dd>bar</dl>',\n        '<dl><dt>foo<dd>bar<dl><dt>{}<br><dd>baz</dl></dl>',\n        '<dl><dt>foo<dd>bar<dl><dt>baz<dd>{}<br></dl></dl>',\n\n        '<h1>foo[bar</h1><p>baz]quz</p>',\n        '<p>foo[bar</p><h1>baz]quz</h1>',\n        '<p>foo</p>{}<br>',\n        '{}<br><p>foo</p>',\n        '<p>foo</p>{}<br><h1>bar</h1>',\n        '<h1>foo</h1>{}<br><p>bar</p>',\n        '<h1>foo</h1>{}<br><h2>bar</h2>',\n        '<p>foo</p><h1>[bar]</h1><p>baz</p>',\n        '<p>foo</p>{<h1>bar</h1>}<p>baz</p>',\n\n        '<table><tr><td>foo[]bar</table>',\n        '<table><tr><td><p>foo[]bar</table>',\n\n        '<blockquote>[]foo</blockquote>',\n        '<blockquote>foo[]</blockquote>',\n        '<blockquote>foo[]<br></blockquote>',\n        '<blockquote>foo[]bar</blockquote>',\n        '<blockquote><p>[]foo</blockquote>',\n        '<blockquote><p>foo[]</blockquote>',\n        '<blockquote><p>foo[]bar</blockquote>',\n        '<blockquote><p>foo[]<p>bar</blockquote>',\n        '<blockquote><p>foo[]bar<p>baz</blockquote>',\n\n        '<span>foo[]bar</span>',\n        '<span>foo[]bar</span>baz',\n        '<b>foo[]bar</b>',\n        '<b>foo[]bar</b>baz',\n        '<b>foo[]</b>bar',\n        'foo<b>[]bar</b>',\n        '<b>foo[]</b><i>bar</i>',\n        '<b id=x class=y>foo[]bar</b>',\n        '<i><b>foo[]bar</b>baz</i>',\n\n        '<p><b>foo[]bar</b></p>',\n        '<p><b>[]foo</b></p>',\n        '<p><b id=x class=y>foo[]bar</b></p>',\n        '<div><b>foo[]bar</b></div>',\n\n        '<a href=foo>foo[]bar</a>',\n        '<a href=foo>foo[]bar</a>baz',\n        '<a href=foo>foo[]</a>bar',\n        'foo<a href=foo>[]bar</a>',\n\n        '<p>foo[]<!--bar-->',\n        '<p><!--foo-->[]bar',\n\n        '<p>foo<span style=color:#aBcDeF>[bar]</span>baz',\n        '<p>foo<span style=color:#aBcDeF>{bar}</span>baz',\n        '<p>foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '<p>[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '<p>{foo<span style=color:#aBcDeF>bar}</span>baz',\n        '<p>foo<span style=color:#aBcDeF>[bar</span>baz]',\n        '<p>foo<span style=color:#aBcDeF>{bar</span>baz}',\n        '<p>foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=5036\n        '<ul contenteditable><li>{}<br></ul>',\n        '<ul contenteditable><li>foo[]</ul>',\n        '<div contenteditable=false><ul contenteditable><li>{}<br></ul></div>',\n        '<div contenteditable=false><ul contenteditable><li>foo[]</ul></div>',\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=13841\n        // https://bugs.webkit.org/show_bug.cgi?id=23507\n        '<address><p>foo[]</address>',\n        '<dl><dt><p>foo[]</dl>',\n        '<dl><dd><p>foo[]</dl>',\n        '<ol><li><p>foo[]</ol>',\n        '<ul><li><p>foo[]</ul>',\n        '<address><div>foo[]</address>',\n        '<dl><dt><div>foo[]</dl>',\n        '<dl><dd><div>foo[]</dl>',\n        '<ol><li><div>foo[]</ol>',\n        '<ul><li><div>foo[]</ul>',\n        '<div><p>foo[]</div>',\n        '<div><div>foo[]</div>',\n\n        '<address><p>[]foo</address>',\n        '<dl><dt><p>[]foo</dl>',\n        '<dl><dd><p>[]foo</dl>',\n        '<ol><li><p>[]foo</ol>',\n        '<ul><li><p>[]foo</ul>',\n        '<address><div>[]foo</address>',\n        '<dl><dt><div>[]foo</dl>',\n        '<dl><dd><div>[]foo</dl>',\n        '<ol><li><div>[]foo</ol>',\n        '<ul><li><div>[]foo</ul>',\n        '<div><p>[]foo</div>',\n        '<div><div>[]foo</div>',\n\n        '<address><p>foo[]bar</address>',\n        '<dl><dt><p>foo[]bar</dl>',\n        '<dl><dd><p>foo[]bar</dl>',\n        '<ol><li><p>foo[]bar</ol>',\n        '<ul><li><p>foo[]bar</ul>',\n        '<address><div>foo[]bar</address>',\n        '<dl><dt><div>foo[]bar</dl>',\n        '<dl><dd><div>foo[]bar</dl>',\n        '<ol><li><div>foo[]bar</ol>',\n        '<ul><li><div>foo[]bar</ul>',\n        '<div><p>foo[]bar</div>',\n        '<div><div>foo[]bar</div>',\n\n        '<ol><li class=a id=x><p class=b id=y>foo[]</ol>',\n        '<div class=a id=x><div class=b id=y>foo[]</div></div>',\n        '<div class=a id=x><p class=b id=y>foo[]</div>',\n        '<ol><li class=a id=x><p class=b id=y>[]foo</ol>',\n        '<div class=a id=x><div class=b id=y>[]foo</div></div>',\n        '<div class=a id=x><p class=b id=y>[]foo</div>',\n        '<ol><li class=a id=x><p class=b id=y>foo[]bar</ol>',\n        '<div class=a id=x><div class=b id=y>foo[]bar</div></div>',\n        '<div class=a id=x><p class=b id=y>foo[]bar</div>',\n    ],\n    //@}\n    inserttext: [\n    //@{\n        'foo[bar]baz',\n        ['', 'foo[bar]baz'],\n\n        ['\\t', 'foo[]bar'],\n        ['&', 'foo[]bar'],\n        ['\\n', 'foo[]bar'],\n        ['abc\\ndef', 'foo[]bar'],\n        ['\\x07', 'foo[]bar'],\n\n        ['<b>hi</b>', 'foo[]bar'],\n        ['<', 'foo[]bar'],\n        ['&amp;', 'foo[]bar'],\n\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14254\n        ['!\\r', 'foo[]bar'],\n        ['!\\r\\n', 'foo[]bar'],\n        ['!\\0', 'foo[]bar'],\n        ['!\\ud800', 'foo[]bar'],\n\n        // Whitespace tests!  The following two bugs are relevant to some of\n        // these:\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14119\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=681626\n        [' ', 'foo[]bar'],\n        [' ', 'foo []bar'],\n        [' ', 'foo[] bar'],\n        [' ', 'foo &nbsp;[]bar'],\n        [' ', 'foo []&nbsp;bar'],\n        [' ', 'foo[] &nbsp;bar'],\n        [' ', 'foo&nbsp; []bar'],\n        [' ', 'foo&nbsp;[] bar'],\n        [' ', 'foo[]&nbsp; bar'],\n        [' ', 'foo&nbsp;&nbsp;[]bar'],\n        [' ', 'foo&nbsp;[]&nbsp;bar'],\n        [' ', 'foo[]&nbsp;&nbsp;bar'],\n        [' ', 'foo []&nbsp;        bar'],\n        [' ', 'foo  []bar'],\n        [' ', 'foo []&nbsp;&nbsp; &nbsp; bar'],\n\n        [' ', '[]foo'],\n        [' ', '{}foo'],\n        [' ', 'foo[]'],\n        [' ', 'foo{}'],\n        [' ', 'foo&nbsp;[]'],\n        [' ', 'foo&nbsp;{}'],\n        [' ', 'foo&nbsp;&nbsp;[]'],\n        [' ', 'foo&nbsp;&nbsp;{}'],\n        [' ', '<b>foo[]</b>bar'],\n        [' ', 'foo[]<b>bar</b>'],\n\n        [' ', 'foo[] '],\n        [' ', ' foo   []   '],\n        [' ', 'foo[]<span> </span>'],\n        [' ', 'foo[]<span> </span> '],\n        [' ', ' []foo'],\n        [' ', '   []   foo '],\n        [' ', '<span> </span>[]foo'],\n        [' ', ' <span> </span>[]foo'],\n\n        [' ', '{}<br>'],\n        [' ', '<p>{}<br>'],\n\n        [' ', '<p>foo[]<p>bar'],\n        [' ', '<p>foo&nbsp;[]<p>bar'],\n        [' ', '<p>foo[]<p>&nbsp;bar'],\n\n        // Some of the same tests as above, repeated with various values of\n        // white-space.\n        [' ', '<pre>foo[]bar</pre>'],\n        [' ', '<pre>foo []bar</pre>'],\n        [' ', '<pre>foo[] bar</pre>'],\n        [' ', '<pre>foo &nbsp;[]bar</pre>'],\n        [' ', '<pre>[]foo</pre>'],\n        [' ', '<pre>foo[]</pre>'],\n        [' ', '<pre>foo&nbsp;[]</pre>'],\n        [' ', '<pre> foo   []   </pre>'],\n\n        [' ', '<div style=white-space:pre>foo[]bar</div>'],\n        [' ', '<div style=white-space:pre>foo []bar</div>'],\n        [' ', '<div style=white-space:pre>foo[] bar</div>'],\n        [' ', '<div style=white-space:pre>foo &nbsp;[]bar</div>'],\n        [' ', '<div style=white-space:pre>[]foo</div>'],\n        [' ', '<div style=white-space:pre>foo[]</div>'],\n        [' ', '<div style=white-space:pre>foo&nbsp;[]</div>'],\n        [' ', '<div style=white-space:pre> foo   []   </div>'],\n\n        [' ', '<div style=white-space:pre-wrap>foo[]bar</div>'],\n        [' ', '<div style=white-space:pre-wrap>foo []bar</div>'],\n        [' ', '<div style=white-space:pre-wrap>foo[] bar</div>'],\n        [' ', '<div style=white-space:pre-wrap>foo &nbsp;[]bar</div>'],\n        [' ', '<div style=white-space:pre-wrap>[]foo</div>'],\n        [' ', '<div style=white-space:pre-wrap>foo[]</div>'],\n        [' ', '<div style=white-space:pre-wrap>foo&nbsp;[]</div>'],\n        [' ', '<div style=white-space:pre-wrap> foo   []   </div>'],\n\n        [' ', '<div style=white-space:pre-line>foo[]bar</div>'],\n        [' ', '<div style=white-space:pre-line>foo []bar</div>'],\n        [' ', '<div style=white-space:pre-line>foo[] bar</div>'],\n        [' ', '<div style=white-space:pre-line>foo &nbsp;[]bar</div>'],\n        [' ', '<div style=white-space:pre-line>[]foo</div>'],\n        [' ', '<div style=white-space:pre-line>foo[]</div>'],\n        [' ', '<div style=white-space:pre-line>foo&nbsp;[]</div>'],\n        [' ', '<div style=white-space:pre-line> foo   []   </div>'],\n\n        [' ', '<div style=white-space:nowrap>foo[]bar</div>'],\n        [' ', '<div style=white-space:nowrap>foo []bar</div>'],\n        [' ', '<div style=white-space:nowrap>foo[] bar</div>'],\n        [' ', '<div style=white-space:nowrap>foo &nbsp;[]bar</div>'],\n        [' ', '<div style=white-space:nowrap>[]foo</div>'],\n        [' ', '<div style=white-space:nowrap>foo[]</div>'],\n        [' ', '<div style=white-space:nowrap>foo&nbsp;[]</div>'],\n        [' ', '<div style=white-space:nowrap> foo   []   </div>'],\n\n        // End whitespace tests\n\n        // Autolinking tests\n        [' ', 'http://a[]'],\n        [' ', 'ftp://a[]'],\n        [' ', 'quasit://a[]'],\n        [' ', '.x-++-.://a[]'],\n        [' ', '(http://a)[]'],\n        [' ', '&lt;http://a>[]'],\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14744\n        ['! ', '&#x5b;http://a&#x5d;[]'],\n        ['! ', '&#x7b;http://a&#x7d;[]'],\n        [' ', 'http://a![]'],\n        [' ', '!\"#$%&amp;\\'()*+,-./:;&lt;=>?\\^_`|~http://a!\"#$%&amp;\\'()*+,-./:;&lt;=>?\\^_`|~[]'],\n        [' ', 'http://a!\"\\'(),-.:;&lt;>`[]'],\n        [' ', 'http://a#$%&amp;*+/=?\\^_|~[]'],\n        [' ', 'mailto:a[]'],\n        [' ', 'a@b[]'],\n        [' ', 'a@[]'],\n        [' ', '@b[]'],\n        [' ', '#@x[]'],\n        [' ', 'a@.[]'],\n        [' ', '!\"#$%&amp;\\'()*+,-./:;&lt;=>?\\^_`|~a@b!\"#$%&amp;\\'()*+,-./:;&lt;=>?\\^_`|~[]'],\n        [' ', '<b>a@b</b>{}'],\n        [' ', '<b>a</b><i>@</i><u>b</u>{}'],\n        [' ', 'a@b<b>[]c</b>'],\n        [' ', '<p>a@b</p><p>[]c</p>'],\n        ['a', 'http://a[]'],\n        ['\\t', 'http://a[]'],\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14254\n        ['!\\r', 'http://a[]'],\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=14745\n        ['!\\n', 'http://a[]'],\n        ['\\f', 'http://a[]'],\n        ['\\u00A0', 'http://a[]'],\n\n        ['   ', 'foo[]'],\n\n        'foo[]bar',\n        'foo&nbsp;[]',\n        'foo\\xa0[]',\n        '<p>foo[]',\n        '<p>foo</p>{}',\n        '<p>[]foo',\n        '<p>{}foo',\n        '{}<p>foo',\n        '<p>foo</p>{}<p>bar</p>',\n        '<b>foo[]</b>bar',\n        '<b>foo</b>[]bar',\n        'foo<b>{}</b>bar',\n        '<a>foo[]</a>bar',\n        '<a>foo</a>[]bar',\n        '<a href=/>foo[]</a>bar',\n        '<a href=/>foo</a>[]bar',\n        '<p>fo[o<p>b]ar',\n        '<p>fo[o<p>bar<p>b]az',\n        '{}<br>',\n        '<p>{}<br>',\n        '<p><span>{}<br></span>',\n        '<p>foo<span style=color:#aBcDeF>[bar]</span>baz',\n        '<p>foo<span style=color:#aBcDeF>{bar}</span>baz',\n        '<p>foo{<span style=color:#aBcDeF>bar</span>}baz',\n        '<p>[foo<span style=color:#aBcDeF>bar]</span>baz',\n        '<p>{foo<span style=color:#aBcDeF>bar}</span>baz',\n        '<p>foo<span style=color:#aBcDeF>[bar</span>baz]',\n        '<p>foo<span style=color:#aBcDeF>{bar</span>baz}',\n        '<p>foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz',\n\n\n        // These are like the corresponding tests in the multitest section, but\n        // because the selection isn't collapsed, we don't need to do\n        // multitests to set overrides.\n        'foo<b>[bar]</b>baz',\n        'foo<i>[bar]</i>baz',\n        'foo<s>[bar]</s>baz',\n        'foo<sub>[bar]</sub>baz',\n        'foo<sup>[bar]</sup>baz',\n        'foo<u>[bar]</u>baz',\n        'foo<a href=http://www.google.com>[bar]</a>baz',\n        'foo<font face=sans-serif>[bar]</font>baz',\n        'foo<font size=4>[bar]</font>baz',\n        'foo<font color=#0000FF>[bar]</font>baz',\n        'foo<span style=background-color:#00FFFF>[bar]</span>baz',\n        'foo<a href=http://www.google.com><font color=blue>[bar]</font></a>baz',\n        'foo<font color=blue><a href=http://www.google.com>[bar]</a></font>baz',\n        'foo<a href=http://www.google.com><font color=brown>[bar]</font></a>baz',\n        'foo<font color=brown><a href=http://www.google.com>[bar]</a></font>baz',\n        'foo<a href=http://www.google.com><font color=black>[bar]</font></a>baz',\n        'foo<a href=http://www.google.com><u>[bar]</u></a>baz',\n        'foo<u><a href=http://www.google.com>[bar]</a></u>baz',\n        'foo<sub><font size=2>[bar]</font></sub>baz',\n        'foo<font size=2><sub>[bar]</sub></font>baz',\n        'foo<sub><font size=3>[bar]</font></sub>baz',\n        'foo<font size=3><sub>[bar]</sub></font>baz',\n\n        // Now repeat but with different selections.\n        '[foo<b>bar]</b>baz',\n        '[foo<i>bar]</i>baz',\n        '[foo<s>bar]</s>baz',\n        '[foo<sub>bar]</sub>baz',\n        '[foo<sup>bar]</sup>baz',\n        '[foo<u>bar]</u>baz',\n        '[foo<a href=http://www.google.com>bar]</a>baz',\n        '[foo<font face=sans-serif>bar]</font>baz',\n        '[foo<font size=4>bar]</font>baz',\n        '[foo<font color=#0000FF>bar]</font>baz',\n        '[foo<span style=background-color:#00FFFF>bar]</span>baz',\n        '[foo<a href=http://www.google.com><font color=blue>bar]</font></a>baz',\n        '[foo<font color=blue><a href=http://www.google.com>bar]</a></font>baz',\n        '[foo<a href=http://www.google.com><font color=brown>bar]</font></a>baz',\n        '[foo<font color=brown><a href=http://www.google.com>bar]</a></font>baz',\n        '[foo<a href=http://www.google.com><font color=black>bar]</font></a>baz',\n        '[foo<a href=http://www.google.com><u>bar]</u></a>baz',\n        '[foo<u><a href=http://www.google.com>bar]</a></u>baz',\n        '[foo<sub><font size=2>bar]</font></sub>baz',\n        '[foo<font size=2><sub>bar]</sub></font>baz',\n        '[foo<sub><font size=3>bar]</font></sub>baz',\n        '[foo<font size=3><sub>bar]</sub></font>baz',\n\n        'foo<b>[bar</b>baz]',\n        'foo<i>[bar</i>baz]',\n        'foo<s>[bar</s>baz]',\n        'foo<sub>[bar</sub>baz]',\n        'foo<sup>[bar</sup>baz]',\n        'foo<u>[bar</u>baz]',\n        'foo<a href=http://www.google.com>[bar</a>baz]',\n        'foo<font face=sans-serif>[bar</font>baz]',\n        'foo<font size=4>[bar</font>baz]',\n        'foo<font color=#0000FF>[bar</font>baz]',\n        'foo<span style=background-color:#00FFFF>[bar</span>baz]',\n        'foo<a href=http://www.google.com><font color=blue>[bar</font></a>baz]',\n        'foo<font color=blue><a href=http://www.google.com>[bar</a></font>baz]',\n        'foo<a href=http://www.google.com><font color=brown>[bar</font></a>baz]',\n        'foo<font color=brown><a href=http://www.google.com>[bar</a></font>baz]',\n        'foo<a href=http://www.google.com><font color=black>[bar</font></a>baz]',\n        'foo<a href=http://www.google.com><u>[bar</u></a>baz]',\n        'foo<u><a href=http://www.google.com>[bar</a></u>baz]',\n        'foo<sub><font size=2>[bar</font></sub>baz]',\n        'foo<font size=2><sub>[bar</sub></font>baz]',\n        'foo<sub><font size=3>[bar</font></sub>baz]',\n        'foo<font size=3><sub>[bar</sub></font>baz]',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=19702\n        '<blockquote><font color=blue>[foo]</font></blockquote>',\n    ],\n    //@}\n    insertunorderedlist: [\n    //@{\n        'foo[]bar',\n        'foo[bar]baz',\n        'foo<br>[bar]',\n        'f[oo<br>b]ar<br>baz',\n        '<p>[foo]<br>bar</p>',\n        '[foo<ol><li>bar]</ol>baz',\n        'foo<ol><li>[bar</ol>baz]',\n        '[foo<ul><li>bar]</ul>baz',\n        'foo<ul><li>[bar</ul>baz]',\n        'foo<ul><li>[bar</ul><ol><li>baz]</ol>quz',\n        'foo<ol><li>[bar</ol><ul><li>baz]</ul>quz',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr><td>fo[o<td>b]ar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        '<p>foo<p>[bar]<p>baz',\n        '<p>foo<blockquote>[bar]</blockquote><p>baz',\n        '<dl><dt>foo<dd>[bar]<dt>baz<dd>quz</dl>',\n        '<dl><dt>foo<dd>bar<dt>[baz]<dd>quz</dl>',\n\n        '<p>[foo<p>bar]<p>baz',\n        '<p>[foo<blockquote>bar]</blockquote><p>baz',\n        '<dl><dt>[foo<dd>bar]<dt>baz<dd>quz</dl>',\n        '<dl><dt>foo<dd>[bar<dt>baz]<dd>quz</dl>',\n\n        '<p>[foo<blockquote><p>bar]<p>baz</blockquote>',\n\n\n        // Various <ol> stuff\n        '<ol><li>foo<li>[bar]<li>baz</ol>',\n        '<ol><li>foo</ol>[bar]',\n        '[foo]<ol><li>bar</ol>',\n        '<ol><li>foo</ol>[bar]<ol><li>baz</ol>',\n        '<ol><ol><li>[foo]</ol></ol>',\n        '<ol><li>[foo]<br>bar<li>baz</ol>',\n        '<ol><li>foo<br>[bar]<li>baz</ol>',\n        '<ol><li><div>[foo]</div>bar<li>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>[foo]<ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>[foo]</li><ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>foo<li>[bar]<ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<li>[bar]</li><ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>baz</ol><li>[quz]</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>baz</ol><li>[quz]</ol>',\n\n        // Multiple items at once.\n        '<ol><li>foo<li>[bar<li>baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>foo<ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>[foo<ol><li>bar</ol><li>baz]</ol><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ol><li>[foo]<ol><li>bar</ol>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]</ol>baz</ol>',\n        '<ol><li>foo<ol><li>bar</ol>[baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol>baz</ol>',\n\n\n        // Same stuff but with <ul>\n        '<ul><li>foo<li>[bar]<li>baz</ul>',\n        '<ul><li>foo</ul>[bar]',\n        '[foo]<ul><li>bar</ul>',\n        '<ul><li>foo</ul>[bar]<ul><li>baz</ul>',\n        '<ul><ul><li>[foo]</ul></ul>',\n        '<ul><li>[foo]<br>bar<li>baz</ul>',\n        '<ul><li>foo<br>[bar]<li>baz</ul>',\n        '<ul><li><div>[foo]</div>bar<li>baz</ul>',\n        '<ul><li>foo<ul><li>[bar]<li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<ul><li>bar<li>[baz]</ul><li>quz</ul>',\n        '<ul><li>foo</li><ul><li>[bar]<li>baz</ul><li>quz</ul>',\n        '<ul><li>foo</li><ul><li>bar<li>[baz]</ul><li>quz</ul>',\n        '<ul><li>[foo]<ul><li>bar</ul><li>baz</ul>',\n        '<ul><li>[foo]</li><ul><li>bar</ul><li>baz</ul>',\n        '<ul><li>foo<li>[bar]<ul><li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<li>[bar]</li><ul><li>baz</ul><li>quz</ul>',\n        '<ul><li>foo<ul><li>bar<li>baz</ul><li>[quz]</ul>',\n        '<ul><li>foo</li><ul><li>bar<li>baz</ul><li>[quz]</ul>',\n\n        // Multiple items at once.\n        '<ul><li>foo<li>[bar<li>baz]</ul>',\n        '<ul><li>[foo<ul><li>bar]</ul><li>baz</ul>',\n        '<ul><li>foo<ul><li>b[ar</ul><li>b]az</ul>',\n        '<ul><li>[foo<ul><li>bar</ul><li>baz]</ul><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ul><li>[foo]<ul><li>bar</ul>baz</ul>',\n        '<ul><li>foo<ul><li>[bar]</ul>baz</ul>',\n        '<ul><li>foo<ul><li>bar</ul>[baz]</ul>',\n        '<ul><li>[foo<ul><li>bar]</ul>baz</ul>',\n\n\n        // Mix of <ol> and <ul>\n        'foo<ol><li>bar</ol><ul><li>[baz]</ul>quz',\n        'foo<ol><li>bar</ol><ul><li>[baz</ul>quz]',\n        'foo<ul><li>[bar]</ul><ol><li>baz</ol>quz',\n        '[foo<ul><li>bar]</ul><ol><li>baz</ol>quz',\n\n        // Interaction with indentation\n        '[foo]<blockquote>bar</blockquote>baz',\n        'foo<blockquote>[bar]</blockquote>baz',\n        '[foo<blockquote>bar]</blockquote>baz',\n        '<ol><li>foo</ol><blockquote>[bar]</blockquote>baz',\n        '[foo]<blockquote><ol><li>bar</ol></blockquote>baz',\n        'foo<blockquote>[bar]<br>baz</blockquote>',\n        '[foo<blockquote>bar]<br>baz</blockquote>',\n        '<ol><li>foo</ol><blockquote>[bar]<br>baz</blockquote>',\n\n        '<p>[foo]<blockquote><p>bar</blockquote><p>baz',\n        '<p>foo<blockquote><p>[bar]</blockquote><p>baz',\n        '<p>[foo<blockquote><p>bar]</blockquote><p>baz',\n        '<ol><li>foo</ol><blockquote><p>[bar]</blockquote><p>baz',\n\n        // Attributes\n        '<ul id=abc><li>foo<li>[bar]<li>baz</ul>',\n        '<ul style=color:blue><li>foo<li>[bar]<li>baz</ul>',\n        '<ul style=text-indent:1em><li>foo<li>[bar]<li>baz</ul>',\n        '<ul id=abc><li>[foo]<li>bar<li>baz</ul>',\n        '<ul style=color:blue><li>[foo]<li>bar<li>baz</ul>',\n        '<ul style=text-indent:1em><li>[foo]<li>bar<li>baz</ul>',\n        '<ul id=abc><li>foo<li>bar<li>[baz]</ul>',\n        '<ul style=color:blue><li>foo<li>bar<li>[baz]</ul>',\n        '<ul style=text-indent:1em><li>foo<li>bar<li>[baz]</ul>',\n\n        // Whitespace nodes\n        '<ul><li>foo</ul> <p>[bar]',\n        '<p>[foo]</p> <ul><li>bar</ul>',\n        '<ul><li>foo</ul> <p>[bar]</p> <ul><li>baz</ul>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=24167\n        '{<div style=\"font-size: 1.3em\">1</div><div style=\"font-size: 1.1em\">2</div>}',\n    ],\n    //@}\n    italic: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<span style=\"font-style: italic\">[bar]</span>baz',\n        'foo<address>[bar]</address>baz',\n        'foo<cite>[bar]</cite>baz',\n        'foo<dfn>[bar]</dfn>baz',\n        'foo<em>[bar]</em>baz',\n        'foo<i>[bar]</i>baz',\n        'foo<var>[bar]</var>baz',\n\n        'foo{<address>bar</address>}baz',\n        'foo{<cite>bar</cite>}baz',\n        'foo{<dfn>bar</dfn>}baz',\n        'foo{<em>bar</em>}baz',\n        'foo{<i>bar</i>}baz',\n        'foo{<var>bar</var>}baz',\n\n        'foo<address>b[a]r</address>baz',\n        'foo<cite>b[a]r</cite>baz',\n        'foo<dfn>b[a]r</dfn>baz',\n        'foo<em>b[a]r</em>baz',\n        'foo<i>b[a]r</i>baz',\n        'foo<var>b[a]r</var>baz',\n\n        'fo[o<address>bar</address>b]az',\n        'fo[o<cite>bar</cite>b]az',\n        'fo[o<dfn>bar</dfn>b]az',\n        'fo[o<em>bar</em>b]az',\n        'fo[o<i>bar</i>b]az',\n        'fo[o<var>bar</var>b]az',\n\n        'foo[<address>bar</address>baz]',\n        'foo[<cite>bar</cite>baz]',\n        'foo[<dfn>bar</dfn>baz]',\n        'foo[<em>bar</em>baz]',\n        'foo[<i>bar</i>baz]',\n        'foo[<var>bar</var>baz]',\n\n        '[foo<address>bar</address>]baz',\n        '[foo<cite>bar</cite>]baz',\n        '[foo<dfn>bar</dfn>]baz',\n        '[foo<em>bar</em>]baz',\n        '[foo<i>bar</i>]baz',\n        '[foo<var>bar</var>]baz',\n\n        'foo<span style=\"font-style: italic\">[bar]</span>baz',\n        'foo<span style=\"font-style: oblique\">[bar]</span>baz',\n        'foo<span style=\"font-style: oblique\">b[a]r</span>baz',\n\n        '<i>{<p>foo</p><p>bar</p>}<p>baz</p></i>',\n        '<i><p>foo[<b>bar</b>}</p><p>baz</p></i>',\n        'foo [bar <b>baz] qoz</b> quz sic',\n        'foo bar <b>baz [qoz</b> quz] sic',\n        'foo [bar <i>baz] qoz</i> quz sic',\n        'foo bar <i>baz [qoz</i> quz] sic',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<i>b]ar</i>baz',\n        'foo<i>ba[r</i>b]az',\n        'fo[o<i>bar</i>b]az',\n        'foo[<i>b]ar</i>baz',\n        'foo<i>ba[r</i>]baz',\n        'foo[<i>bar</i>]baz',\n        'foo<i>[bar]</i>baz',\n        'foo{<i>bar</i>}baz',\n        'fo[o<span style=font-style:italic>b]ar</span>baz',\n        'fo[o<span style=font-style:oblique>b]ar</span>baz',\n        '<span style=font-style:italic>fo[o</span><span style=font-style:oblique>b]ar</span>',\n        '<span style=font-style:oblique>fo[o</span><span style=font-style:italic>b]ar</span>',\n        '<i>fo[o</i><address>b]ar</address>',\n    ],\n    //@}\n    justifycenter: [\n    //@{\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        'foo[bar<b>baz]qoz</b>quz<p>extra',\n        '<p>foo[]bar<p>extra',\n        '<p>foo[bar]baz<p>extra',\n        '<h1>foo[bar]baz</h1><p>extra',\n        '<pre>foo[bar]baz</pre><p>extra',\n        '<xmp>foo[bar]baz</xmp><p>extra',\n        '<center><p>[foo]<p>bar</center><p>extra',\n        '<center><p>[foo<p>bar]</center><p>extra',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table align=center><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table align=center><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=center><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=center><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=center data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table align=center><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody align=center><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody align=center><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=center><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=center data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody align=center><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tbody align=center><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody><tr align=center><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr align=center data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr align=center data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr align=center><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr align=center><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr align=center><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<div align=center><p>[foo]<p>bar</div><p>extra',\n        '<div align=center><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:center><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:center><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=justify><p>[foo]<p>bar</div><p>extra',\n        '<div align=justify><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:justify><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:justify><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=left><p>[foo]<p>bar</div><p>extra',\n        '<div align=left><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:left><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:left><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=right><p>[foo]<p>bar</div><p>extra',\n        '<div align=right><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:right><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:right><p>[foo<p>bar]</div><p>extra',\n\n        '<center>foo</center>[bar]<p>extra',\n        '[foo]<center>bar</center><p>extra',\n        '<center>foo</center>[bar]<center>baz</center><p>extra',\n        '<div align=center>foo</div>[bar]<p>extra',\n        '[foo]<div align=center>bar</div><p>extra',\n        '<div align=center>foo</div>[bar]<div align=center>baz</div><p>extra',\n        '<div align=center><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div align=center><p>bar</div><p>extra',\n        '<div align=center><p>foo</div><p>[bar]<div align=center><p>baz</div><p>extra',\n        '<div style=text-align:center>foo</div>[bar]<p>extra',\n        '[foo]<div style=text-align:center>bar</div><p>extra',\n        '<div style=text-align:center>foo</div>[bar]<div style=text-align:center>baz</div><p>extra',\n        '<div style=text-align:center><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div style=text-align:center><p>bar</div><p>extra',\n        '<div style=text-align:center><p>foo</div><p>[bar]<div style=text-align:center><p>baz</div><p>extra',\n        '<p align=center>foo<p>[bar]<p>extra',\n        '<p>[foo]<p align=center>bar<p>extra',\n        '<p align=center>foo<p>[bar]<p align=center>baz<p>extra',\n\n        '<center>[foo</center>bar]<p>extra',\n        '<center>fo[o</center>b]ar<p>extra',\n        '<div align=center>[foo</div>bar]<p>extra',\n        '<div align=center>fo[o</div>b]ar<p>extra',\n        '<div style=text-align:center>[foo</div>bar]<p>extra',\n        '<div style=text-align:center>fo[o</div>b]ar<p>extra',\n        '<span style=text-align:center>[foo]</span><p>extra',\n        '<span style=text-align:center>f[o]o</span><p>extra',\n\n        '<div style=text-align:center>[foo<div style=text-align:left contenteditable=false>bar</div>baz]</div><p>extra',\n\n        '<div align=nonsense><p>[foo]</div><p>extra',\n        '<div style=text-align:inherit><p>[foo]</div><p>extra',\n        '<quasit align=right><p>[foo]</p></quasit><p>extra',\n\n        '<div align=center>{<div align=left>foo</div>}</div>',\n        '<div align=left>{<div align=center>foo</div>}</div>',\n        '<div align=center>{<div align=left>foo</div>bar}</div>',\n        '<div align=left>{<div align=center>foo</div>bar}</div>',\n        '<div align=center>{<div align=left>foo</div><img src=/img/lion.svg>}</div>',\n        '<div align=left>{<div align=center>foo</div><img src=/img/lion.svg>}</div>',\n        '<div align=center>{<div align=left>foo</div><!-- bar -->}</div>',\n        '<div align=left>{<div align=center>foo</div><!-- bar -->}</div>',\n\n        '<div style=text-align:start>[foo]</div><p>extra',\n        '<div style=text-align:end>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:start>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:end>[foo]</div><p>extra',\n\n        // Whitespace nodes\n        '<div style=text-align:center><p>foo</div> <p>[bar]',\n        '<div align=center><p>foo</div> <p>[bar]',\n        '<center><p>foo</center> <p>[bar]',\n        '<p>[foo]</p> <div style=text-align:center><p>bar</div>',\n        '<p>[foo]</p> <div align=center><p>bar</div>',\n        '<p>[foo]</p> <center><p>bar</center>',\n        '<div style=text-align:center><p>foo</div> <p>[bar]</p> <div style=text-align:center><p>baz</div>',\n        '<div align=center><p>foo</div> <p>[bar]</p> <div align=center><p>baz</div>',\n        '<center><p>foo</center> <p>[bar]</p> <center><p>baz</center>',\n    ],\n    //@}\n    justifyfull: [\n    //@{\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        'foo[bar<b>baz]qoz</b>quz<p>extra',\n        '<p>foo[]bar<p>extra',\n        '<p>foo[bar]baz<p>extra',\n        '<h1>foo[bar]baz</h1><p>extra',\n        '<pre>foo[bar]baz</pre><p>extra',\n        '<xmp>foo[bar]baz</xmp><p>extra',\n        '<center><p>[foo]<p>bar</center><p>extra',\n        '<center><p>[foo<p>bar]</center><p>extra',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table align=justify><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table align=justify><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=justify><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=justify><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=justify data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table align=justify><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody align=justify><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody align=justify><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=justify><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=justify data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody align=justify><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tbody align=justify><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody><tr align=justify><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr align=justify data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr align=justify data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr align=justify><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr align=justify><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr align=justify><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<div align=center><p>[foo]<p>bar</div><p>extra',\n        '<div align=center><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:center><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:center><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=justify><p>[foo]<p>bar</div><p>extra',\n        '<div align=justify><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:justify><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:justify><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=left><p>[foo]<p>bar</div><p>extra',\n        '<div align=left><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:left><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:left><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=right><p>[foo]<p>bar</div><p>extra',\n        '<div align=right><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:right><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:right><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=justify>foo</div>[bar]<p>extra',\n        '[foo]<div align=justify>bar</div><p>extra',\n        '<div align=justify>foo</div>[bar]<div align=justify>baz</div><p>extra',\n        '<div align=justify><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div align=justify><p>bar</div><p>extra',\n        '<div align=justify><p>foo</div><p>[bar]<div align=justify><p>baz</div><p>extra',\n        '<div style=text-align:justify>foo</div>[bar]<p>extra',\n        '[foo]<div style=text-align:justify>bar</div><p>extra',\n        '<div style=text-align:justify>foo</div>[bar]<div style=text-align:justify>baz</div><p>extra',\n        '<div style=text-align:justify><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div style=text-align:justify><p>bar</div><p>extra',\n        '<div style=text-align:justify><p>foo</div><p>[bar]<div style=text-align:justify><p>baz</div><p>extra',\n        '<p align=justify>foo<p>[bar]<p>extra',\n        '<p>[foo]<p align=justify>bar<p>extra',\n        '<p align=justify>foo<p>[bar]<p align=justify>baz<p>extra',\n\n        '<div align=justify>[foo</div>bar]<p>extra',\n        '<div align=justify>fo[o</div>b]ar<p>extra',\n        '<div style=text-align:justify>[foo</div>bar]<p>extra',\n        '<div style=text-align:justify>fo[o</div>b]ar<p>extra',\n        '<span style=text-align:justify>[foo]</span><p>extra',\n        '<span style=text-align:justify>f[o]o</span><p>extra',\n\n        '<div style=text-align:justify>[foo<div style=text-align:left contenteditable=false>bar</div>baz]</div><p>extra',\n\n        '<div align=nonsense><p>[foo]</div><p>extra',\n        '<div style=text-align:inherit><p>[foo]</div><p>extra',\n        '<quasit align=center><p>[foo]</p></quasit><p>extra',\n\n        '<div style=text-align:start>[foo]</div><p>extra',\n        '<div style=text-align:end>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:start>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:end>[foo]</div><p>extra',\n\n        // Whitespace nodes\n        '<div style=text-align:justify><p>foo</div> <p>[bar]',\n        '<div align=justify><p>foo</div> <p>[bar]',\n        '<p>[foo]</p> <div style=text-align:justify><p>bar</div>',\n        '<p>[foo]</p> <div align=justify><p>bar</div>',\n        '<div style=text-align:justify><p>foo</div> <p>[bar]</p> <div style=text-align:justify><p>baz</div>',\n        '<div align=justify><p>foo</div> <p>[bar]</p> <div align=justify><p>baz</div>',\n    ],\n    //@}\n    justifyleft: [\n    //@{\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        'foo[bar<b>baz]qoz</b>quz<p>extra',\n        '<p>foo[]bar<p>extra',\n        '<p>foo[bar]baz<p>extra',\n        '<h1>foo[bar]baz</h1><p>extra',\n        '<pre>foo[bar]baz</pre><p>extra',\n        '<xmp>foo[bar]baz</xmp><p>extra',\n        '<center><p>[foo]<p>bar</center><p>extra',\n        '<center><p>[foo<p>bar]</center><p>extra',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table align=left><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table align=left><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=left><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=left><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=left data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table align=left><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody align=left><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody align=left><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=left><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=left data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody align=left><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tbody align=left><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody><tr align=left><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr align=left data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr align=left data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr align=left><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr align=left><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr align=left><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<div align=center><p>[foo]<p>bar</div><p>extra',\n        '<div align=center><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:center><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:center><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=justify><p>[foo]<p>bar</div><p>extra',\n        '<div align=justify><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:justify><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:justify><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=left><p>[foo]<p>bar</div><p>extra',\n        '<div align=left><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:left><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:left><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=right><p>[foo]<p>bar</div><p>extra',\n        '<div align=right><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:right><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:right><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=left>foo</div>[bar]<p>extra',\n        '[foo]<div align=left>bar</div><p>extra',\n        '<div align=left>foo</div>[bar]<div align=left>baz</div><p>extra',\n        '<div align=left><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div align=left><p>bar</div><p>extra',\n        '<div align=left><p>foo</div><p>[bar]<div align=left><p>baz</div><p>extra',\n        '<div style=text-align:left>foo</div>[bar]<p>extra',\n        '[foo]<div style=text-align:left>bar</div><p>extra',\n        '<div style=text-align:left>foo</div>[bar]<div style=text-align:left>baz</div><p>extra',\n        '<div style=text-align:left><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div style=text-align:left><p>bar</div><p>extra',\n        '<div style=text-align:left><p>foo</div><p>[bar]<div style=text-align:left><p>baz</div><p>extra',\n        '<p align=left>foo<p>[bar]<p>extra',\n        '<p>[foo]<p align=left>bar<p>extra',\n        '<p align=left>foo<p>[bar]<p align=left>baz<p>extra',\n\n        '<div align=left>[foo</div>bar]<p>extra',\n        '<div align=left>fo[o</div>b]ar<p>extra',\n        '<div style=text-align:left>[foo</div>bar]<p>extra',\n        '<div style=text-align:left>fo[o</div>b]ar<p>extra',\n        '<span style=text-align:left>[foo]</span><p>extra',\n        '<span style=text-align:left>f[o]o</span><p>extra',\n\n        '<div style=text-align:left>[foo<div style=text-align:left contenteditable=false>bar</div>baz]</div><p>extra',\n\n        '<div align=nonsense><p>[foo]</div><p>extra',\n        '<div style=text-align:inherit><p>[foo]</div><p>extra',\n        '<quasit align=center><p>[foo]</p></quasit><p>extra',\n\n        '<div style=text-align:start>[foo]</div><p>extra',\n        '<div style=text-align:end>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:start>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:end>[foo]</div><p>extra',\n\n        // Whitespace nodes\n        '<div style=text-align:left><p>foo</div> <p>[bar]',\n        '<div align=left><p>foo</div> <p>[bar]',\n        '<p>[foo]</p> <div style=text-align:left><p>bar</div>',\n        '<p>[foo]</p> <div align=left><p>bar</div>',\n        '<div style=text-align:left><p>foo</div> <p>[bar]</p> <div style=text-align:left><p>baz</div>',\n        '<div align=left><p>foo</div> <p>[bar]</p> <div align=left><p>baz</div>',\n    ],\n    //@}\n    justifyright: [\n    //@{\n        'foo[]bar<p>extra',\n        '<span>foo</span>{}<span>bar</span><p>extra',\n        '<span>foo[</span><span>]bar</span><p>extra',\n        'foo[bar]baz<p>extra',\n        'foo[bar<b>baz]qoz</b>quz<p>extra',\n        '<p>foo[]bar<p>extra',\n        '<p>foo[bar]baz<p>extra',\n        '<h1>foo[bar]baz</h1><p>extra',\n        '<pre>foo[bar]baz</pre><p>extra',\n        '<xmp>foo[bar]baz</xmp><p>extra',\n        '<center><p>[foo]<p>bar</center><p>extra',\n        '<center><p>[foo<p>bar]</center><p>extra',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table align=right><tbody><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table align=right><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=right><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=right><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table align=right data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table align=right><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody align=right><tr><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody align=right><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=right><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody align=right data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody align=right><tr><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tbody align=right><tr><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<table><tbody><tr align=right><td>foo<td>b[a]r<td>baz</table><p>extra',\n        '<table><tbody><tr align=right data-start=1 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody><tr align=right data-start=0 data-end=2><td>foo<td>bar<td>baz</table><p>extra',\n        '<table><tbody data-start=0 data-end=1><tr align=right><td>foo<td>bar<td>baz</table><p>extra',\n        '<table data-start=0 data-end=1><tbody><tr align=right><td>foo<td>bar<td>baz</table><p>extra',\n        '{<table><tr align=right><td>foo<td>bar<td>baz</table>}<p>extra',\n\n        '<div align=center><p>[foo]<p>bar</div><p>extra',\n        '<div align=center><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:center><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:center><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=justify><p>[foo]<p>bar</div><p>extra',\n        '<div align=justify><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:justify><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:justify><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=left><p>[foo]<p>bar</div><p>extra',\n        '<div align=left><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:left><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:left><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=right><p>[foo]<p>bar</div><p>extra',\n        '<div align=right><p>[foo<p>bar}</div><p>extra',\n        '<div style=text-align:right><p>[foo]<p>bar</div><p>extra',\n        '<div style=text-align:right><p>[foo<p>bar]</div><p>extra',\n\n        '<div align=right>foo</div>[bar]<p>extra',\n        '[foo]<div align=right>bar</div><p>extra',\n        '<div align=right>foo</div>[bar]<div align=right>baz</div><p>extra',\n        '<div align=right><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div align=right><p>bar</div><p>extra',\n        '<div align=right><p>foo</div><p>[bar]<div align=right><p>baz</div><p>extra',\n        '<div style=text-align:right>foo</div>[bar]<p>extra',\n        '[foo]<div style=text-align:right>bar</div><p>extra',\n        '<div style=text-align:right>foo</div>[bar]<div style=text-align:right>baz</div><p>extra',\n        '<div style=text-align:right><p>foo</div><p>[bar]<p>extra',\n        '<p>[foo]<div style=text-align:right><p>bar</div><p>extra',\n        '<div style=text-align:right><p>foo</div><p>[bar]<div style=text-align:right><p>baz</div><p>extra',\n        '<p align=right>foo<p>[bar]<p>extra',\n        '<p>[foo]<p align=right>bar<p>extra',\n        '<p align=right>foo<p>[bar]<p align=right>baz<p>extra',\n\n        '<div align=right>[foo</div>bar]<p>extra',\n        '<div align=right>fo[o</div>b]ar<p>extra',\n        '<div style=text-align:right>[foo</div>bar]<p>extra',\n        '<div style=text-align:right>fo[o</div>b]ar<p>extra',\n        '<span style=text-align:right>[foo]</span><p>extra',\n        '<span style=text-align:right>f[o]o</span><p>extra',\n\n        '<div style=text-align:right>[foo<div style=text-align:left contenteditable=false>bar</div>baz]</div><p>extra',\n\n        '<div align=nonsense><p>[foo]</div><p>extra',\n        '<div style=text-align:inherit><p>[foo]</div><p>extra',\n        '<quasit align=center><p>[foo]</p></quasit><p>extra',\n\n        '<div style=text-align:start>[foo]</div><p>extra',\n        '<div style=text-align:end>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:start>[foo]</div><p>extra',\n        '<div dir=rtl style=text-align:end>[foo]</div><p>extra',\n\n        // Whitespace nodes\n        '<div style=text-align:right><p>foo</div> <p>[bar]',\n        '<div align=right><p>foo</div> <p>[bar]',\n        '<p>[foo]</p> <div style=text-align:right><p>bar</div>',\n        '<p>[foo]</p> <div align=right><p>bar</div>',\n        '<div style=text-align:right><p>foo</div> <p>[bar]</p> <div style=text-align:right><p>baz</div>',\n        '<div align=right><p>foo</div> <p>[bar]</p> <div align=right><p>baz</div>',\n    ],\n    //@}\n    outdent: [\n    //@{\n        // These mimic existing indentation in various browsers, to see how\n        // they cope with outdenting various things.  This is spec, Gecko\n        // non-CSS, and Opera:\n        '<blockquote><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n\n        // IE:\n        '<blockquote style=\"margin-right: 0px;\" dir=\"ltr\"><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote style=\"margin-right: 0px;\" dir=\"ltr\"><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote style=\"margin-right: 0px;\" dir=\"ltr\"><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote style=\"margin-right: 0px;\" dir=\"ltr\"><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n\n        // Firefox CSS mode:\n        '<p style=\"margin-left: 40px\">foo[bar]</p><p style=\"margin-left: 40px\">baz</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar</p><p style=\"margin-left: 40px\">b]az</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar]</p><p>baz</p><p>extra',\n        '<p style=\"margin-left: 40px\">foo[bar</p><p>b]az</p><p>extra',\n\n        // WebKit:\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>foo[bar]</p><p>baz</p></blockquote><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>foo[bar</p><p>b]az</p></blockquote><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>foo[bar]</p></blockquote><p>baz</p><p>extra',\n        '<blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>foo[bar</p></blockquote><p>b]az</p><p>extra',\n\n        // Now let's try nesting lots of stuff and see what happens.\n        '<blockquote><blockquote>foo[bar]baz</blockquote></blockquote>',\n        '<blockquote><blockquote data-abc=def>foo[bar]baz</blockquote></blockquote>',\n        '<blockquote data-abc=def><blockquote>foo[bar]baz</blockquote></blockquote>',\n        '<blockquote><div>foo[bar]baz</div></blockquote>',\n        '<blockquote><div id=abc>foo[bar]baz</div></blockquote>',\n        '<blockquote id=abc>foo[bar]baz</blockquote>',\n        '<blockquote style=\"color: blue\">foo[bar]baz</blockquote>',\n\n        '<blockquote><blockquote><p>foo[bar]<p>baz</blockquote></blockquote>',\n        '<blockquote><blockquote data-abc=def><p>foo[bar]<p>baz</blockquote></blockquote>',\n        '<blockquote data-abc=def><blockquote><p>foo[bar]<p>baz</blockquote></blockquote>',\n        '<blockquote><div><p>foo[bar]<p>baz</div></blockquote>',\n        '<blockquote><div id=abc><p>foo[bar]<p>baz</div></blockquote>',\n        '<blockquote id=abc><p>foo[bar]<p>baz</blockquote>',\n        '<blockquote style=\"color: blue\"><p>foo[bar]<p>baz</blockquote>',\n\n        '<blockquote><p><b>foo[bar]</b><p>baz</blockquote>',\n        '<blockquote><p><strong>foo[bar]</strong><p>baz</blockquote>',\n        '<blockquote><p><span>foo[bar]</span><p>baz</blockquote>',\n        '<blockquote><blockquote style=\"color: blue\"><p>foo[bar]</blockquote><p>baz</blockquote>',\n        '<blockquote style=\"color: blue\"><blockquote><p>foo[bar]</blockquote><p>baz</blockquote>',\n\n        // Lists!\n        '<ol><li>foo<li>[bar]<li>baz</ol>',\n        '<ol data-start=1 data-end=2><li>foo<li>bar<li>baz</ol>',\n        '<ol><li>foo</ol>[bar]',\n        '<ol><li>[foo]<br>bar<li>baz</ol>',\n        '<ol><li>foo<br>[bar]<li>baz</ol>',\n        '<ol><li><div>[foo]</div>bar<li>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>[bar]<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol data-start=0 data-end=1><li>bar<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>[baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol data-start=1 data-end=2><li>bar<li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>b[a]r</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol><li>b[a]r</ol><li>baz</ol>',\n        '<ol><li>foo{<ol><li>bar</ol>}<li>baz</ol>',\n        '<ol><li>foo</li>{<ol><li>bar</ol>}<li>baz</ol>',\n        '<ol><li>[foo]<ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>[foo]</li><ol><li>bar</ol><li>baz</ol>',\n        '<ol><li>foo<li>[bar]<ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<li>[bar]</li><ol><li>baz</ol><li>quz</ol>',\n        '<ol><li>foo<ol><li>bar<li>baz</ol><li>[quz]</ol>',\n        '<ol><li>foo</li><ol><li>bar<li>baz</ol><li>[quz]</ol>',\n\n        // Try outdenting multiple items at once.\n        '<ol><li>foo<li>b[ar<li>baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>[foo</li><ol><li>bar]</ol><li>baz</ol>',\n        '<ol><li>foo<ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>foo</li><ol><li>b[ar</ol><li>b]az</ol>',\n        '<ol><li>[foo<ol><li>bar</ol><li>baz]</ol><p>extra',\n        '<ol><li>[foo</li><ol><li>bar</ol><li>baz]</ol><p>extra',\n\n        // We probably can't actually get this DOM . . .\n        '<ol><li>[foo]<ol><li>bar</ol>baz</ol>',\n        '<ol><li>foo<ol><li>[bar]</ol>baz</ol>',\n        '<ol><li>foo<ol><li>bar</ol>[baz]</ol>',\n        '<ol><li>[foo<ol><li>bar]</ol>baz</ol>',\n\n        // Attribute handling on lists\n        'foo<ol start=5><li>[bar]</ol>baz',\n        'foo<ol id=abc><li>[bar]</ol>baz',\n        'foo<ol style=color:blue><li>[bar]</ol>baz',\n        'foo<ol><li value=5>[bar]</ol>baz',\n        'foo<ol><li id=abc>[bar]</ol>baz',\n        'foo<ol><li style=color:blue>[bar]</ol>baz',\n        '<ol><li>foo</li><ol><li value=5>[bar]</ol></ol>',\n        '<ul><li>foo</li><ol><li value=5>[bar]</ol></ul>',\n        '<ol><li>foo</li><ol start=5><li>[bar]</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol id=abc><li>[bar]</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol style=color:blue><li>[bar]</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol style=text-indent:1em><li>[bar]</ol><li>baz</ol>',\n        '<ol><li>foo</li><ol start=5><li>[bar<li>baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol id=abc><li>[bar<li>baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol style=color:blue><li>[bar<li>baz]</ol><li>quz</ol>',\n        '<ol><li>foo</li><ol style=text-indent:1em><li>[bar<li>baz]</ol><li>quz</ol>',\n\n        // List inside indentation element\n        '<blockquote><ol><li>[foo]</ol></blockquote><p>extra',\n        '<blockquote>foo<ol><li>[bar]</ol>baz</blockquote><p>extra',\n        '<blockquote><ol><li>foo</li><ol><li>[bar]</ol><li>baz</ol></blockquote><p>extra',\n\n        '<ol><li><h1>[foo]</h1></ol>',\n        '<ol><li><xmp>[foo]</xmp></li></ol>',\n        '<blockquote><ol><li>foo<div><ol><li>[bar]</ol></div><li>baz</ol></blockquote>',\n\n        // Whitespace nodes\n        '<blockquote> <p>[foo]</p></blockquote>',\n        '<blockquote><p>[foo]</p> </blockquote>',\n        '<blockquote> <p>[foo]</p> </blockquote>',\n        '<ol> <li>[foo]</li></ol>',\n        '<ol><li>[foo]</li> </ol>',\n        '<ol> <li>[foo]</li> </ol>',\n        '<ul> <li>[foo]</li></ul>',\n        '<ul><li>[foo]</li> </ul>',\n        '<ul> <li>[foo]</li> </ul>',\n        '<blockquote> <p>[foo]</p> <p>bar</p> <p>baz</p></blockquote>',\n        '<blockquote> <p>foo</p> <p>[bar]</p> <p>baz</p></blockquote>',\n        '<blockquote> <p>foo</p> <p>bar</p> <p>[baz]</p></blockquote>',\n        '<ol> <li>[foo]</li> <li>bar</li> <li>baz</li></ol>',\n        '<ol> <li>foo</li> <li>[bar]</li> <li>baz</li></ol>',\n        '<ol> <li>foo</li> <li>bar</li> <li>[baz]</li></ol>',\n        '<ul> <li>[foo]</li> <li>bar</li> <li>baz</li></ul>',\n        '<ul> <li>foo</li> <li>[bar]</li> <li>baz</li></ul>',\n        '<ul> <li>foo</li> <li>bar</li> <li>[baz]</li></ul>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=24249\n        '<ol><li>[]a<table><tr><td><br></table></ol>',\n        // https://bugs.webkit.org/show_bug.cgi?id=43447\n        '<blockquote><span>foo<br>[bar]</span></blockquote>',\n    ],\n    //@}\n    removeformat: [\n    //@{\n        'foo[]bar',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        '[foo<b>bar</b>baz]',\n        'foo[<b>bar</b>baz]',\n        'foo[<b>bar</b>]baz',\n        'foo<b>[bar]</b>baz',\n        'foo<b>b[a]r</b>baz',\n        '[foo<strong>bar</strong>baz]',\n        '[foo<span style=\"font-weight: bold\">bar</span>baz]',\n        'foo<span style=\"font-weight: bold\">b[a]r</span>baz',\n        '[foo<span style=\"font-variant: small-caps\">bar</span>baz]',\n        'foo<span style=\"font-variant: small-caps\">b[a]r</span>baz',\n        '[foo<b id=foo>bar</b>baz]',\n        'foo<b id=foo>b[a]r</b>baz',\n\n        // HTML has lots of inline elements, doesn't it?\n        '[foo<a>bar</a>baz]',\n        'foo<a>b[a]r</a>baz',\n        '[foo<a href=foo>bar</a>baz]',\n        'foo<a href=foo>b[a]r</a>baz',\n        '[foo<abbr>bar</abbr>baz]',\n        'foo<abbr>b[a]r</abbr>baz',\n        '[foo<acronym>bar</acronym>baz]',\n        'foo<acronym>b[a]r</acronym>baz',\n        '[foo<b>bar</b>baz]',\n        'foo<b>b[a]r</b>baz',\n        '[foo<bdi dir=rtl>bar</bdi>baz]',\n        'foo<bdi dir=rtl>b[a]r</bdi>baz',\n        '[foo<bdo dir=rtl>bar</bdo>baz]',\n        'foo<bdo dir=rtl>b[a]r</bdo>baz',\n        '[foo<big>bar</big>baz]',\n        'foo<big>b[a]r</big>baz',\n        '[foo<blink>bar</blink>baz]',\n        'foo<blink>b[a]r</blink>baz',\n        '[foo<cite>bar</cite>baz]',\n        'foo<cite>b[a]r</cite>baz',\n        '[foo<code>bar</code>baz]',\n        'foo<code>b[a]r</code>baz',\n        '[foo<del>bar</del>baz]',\n        'foo<del>b[a]r</del>baz',\n        '[foo<dfn>bar</dfn>baz]',\n        'foo<dfn>b[a]r</dfn>baz',\n        '[foo<em>bar</em>baz]',\n        'foo<em>b[a]r</em>baz',\n        '[foo<font>bar</font>baz]',\n        'foo<font>b[a]r</font>baz',\n        '[foo<font color=blue>bar</font>baz]',\n        'foo<font color=blue>b[a]r</font>baz',\n        '[foo<i>bar</i>baz]',\n        'foo<i>b[a]r</i>baz',\n        '[foo<ins>bar</ins>baz]',\n        'foo<ins>b[a]r</ins>baz',\n        '[foo<kbd>bar</kbd>baz]',\n        'foo<kbd>b[a]r</kbd>baz',\n        '[foo<mark>bar</mark>baz]',\n        'foo<mark>b[a]r</mark>baz',\n        '[foo<nobr>bar</nobr>baz]',\n        'foo<nobr>b[a]r</nobr>baz',\n        '[foo<q>bar</q>baz]',\n        'foo<q>b[a]r</q>baz',\n        '[foo<samp>bar</samp>baz]',\n        'foo<samp>b[a]r</samp>baz',\n        '[foo<s>bar</s>baz]',\n        'foo<s>b[a]r</s>baz',\n        '[foo<small>bar</small>baz]',\n        'foo<small>b[a]r</small>baz',\n        '[foo<span>bar</span>baz]',\n        'foo<span>b[a]r</span>baz',\n        '[foo<strike>bar</strike>baz]',\n        'foo<strike>b[a]r</strike>baz',\n        '[foo<strong>bar</strong>baz]',\n        'foo<strong>b[a]r</strong>baz',\n        '[foo<sub>bar</sub>baz]',\n        'foo<sub>b[a]r</sub>baz',\n        '[foo<sup>bar</sup>baz]',\n        'foo<sup>b[a]r</sup>baz',\n        '[foo<tt>bar</tt>baz]',\n        'foo<tt>b[a]r</tt>baz',\n        '[foo<u>bar</u>baz]',\n        'foo<u>b[a]r</u>baz',\n        '[foo<var>bar</var>baz]',\n        'foo<var>b[a]r</var>baz',\n\n        // Empty and replaced elements\n        '[foo<br>bar]',\n        '[foo<hr>bar]',\n        '[foo<wbr>bar]',\n        '[foo<img>bar]',\n        '[foo<img src=abc>bar]',\n        '[foo<video></video>bar]',\n        '[foo<video src=abc></video>bar]',\n        '[foo<svg><circle fill=blue r=20 cx=20 cy=20 /></svg>bar]',\n\n        // Unrecognized elements\n        '[foo<nonexistentelement>bar</nonexistentelement>baz]',\n        'foo<nonexistentelement>b[a]r</nonexistentelement>baz',\n        '[foo<nonexistentelement style=\"display: block\">bar</nonexistentelement>baz]',\n        'foo<nonexistentelement style=\"display: block\">b[a]r</nonexistentelement>baz',\n\n        // Random stuff\n        '[foo<span id=foo>bar</span>baz]',\n        'foo<span id=foo>b[a]r</span>baz',\n        '[foo<span class=foo>bar</span>baz]',\n        'foo<span class=foo>b[a]r</span>baz',\n        '[foo<b style=\"font-weight: normal\">bar</b>baz]',\n        'foo<b style=\"font-weight: normal\">b[a]r</b>baz',\n        '<p style=\"background-color: aqua\">foo[bar]baz</p>',\n        '<p><span style=\"background-color: aqua\">foo[bar]baz</span></p>',\n        '<p style=\"font-weight: bold\">foo[bar]baz</p>',\n        '<b><p style=\"font-weight: bold\">foo[bar]baz</p></b>',\n        '<p style=\"font-variant: small-caps\">foo[bar]baz</p>',\n        '{<p style=\"font-variant: small-caps\">foobarbaz</p>}',\n        '<p style=\"text-indent: 2em\">foo[bar]baz</p>',\n        '{<p style=\"text-indent: 2em\">foobarbaz</p>}',\n\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=649138\n        // Chrome 15 dev fails this for some unclear reason.\n        '<table data-start=0 data-end=1><tr><td><b>foo</b></table>',\n    ],\n    //@}\n    strikethrough: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<u>[bar]</u>baz',\n        'foo<span style=\"text-decoration: underline\">[bar]</span>baz',\n        '<u>foo[bar]baz</u>',\n        '<u>foo[b<span style=\"color:blue\">ar]ba</span>z</u>',\n        '<u>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</u>',\n        '<u>foo[b<span style=\"font-size:3em\">ar]ba</span>z</u>',\n        '<u>foo[b<i>ar]ba</i>z</u>',\n        '<p style=\"text-decoration: underline\">foo[bar]baz</p>',\n\n        'foo<s>[bar]</s>baz',\n        'foo<span style=\"text-decoration: line-through\">[bar]</span>baz',\n        '<s>foo[bar]baz</s>',\n        '<s>foo[b<span style=\"color:blue\">ar]ba</span>z</s>',\n        '<s>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</s>',\n        '<s>foo[b<span style=\"font-size:3em\">ar]ba</span>z</s>',\n        '<s>foo[b<i>ar]ba</i>z</s>',\n        '<p style=\"text-decoration: line-through\">foo[bar]baz</p>',\n\n        'foo<strike>[bar]</strike>baz',\n        '<strike>foo[bar]baz</strike>',\n        '<strike>foo[b<span style=\"color:blue\">ar]ba</span>z</strike>',\n        '<strike>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</strike>',\n        '<strike>foo[b<span style=\"font-size:3em\">ar]ba</span>z</strike>',\n        '<strike>foo[b<i>ar]ba</i>z</strike>',\n\n        'foo<ins>[bar]</ins>baz',\n        '<ins>foo[bar]baz</ins>',\n        '<ins>foo[b<span style=\"color:blue\">ar]ba</span>z</ins>',\n        '<ins>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</ins>',\n        '<ins>foo[b<span style=\"font-size:3em\">ar]ba</span>z</ins>',\n        '<ins>foo[b<i>ar]ba</i>z</ins>',\n\n        'foo<del>[bar]</del>baz',\n        '<del>foo[bar]baz</del>',\n        '<del>foo[b<span style=\"color:blue\">ar]ba</span>z</del>',\n        '<del>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</del>',\n        '<del>foo[b<span style=\"font-size:3em\">ar]ba</span>z</del>',\n        '<del>foo[b<i>ar]ba</i>z</del>',\n\n        'foo<span style=\"text-decoration: underline line-through\">[bar]</span>baz',\n        'foo<span style=\"text-decoration: underline line-through\">b[a]r</span>baz',\n        'foo<s style=\"text-decoration: underline\">[bar]</s>baz',\n        'foo<s style=\"text-decoration: underline\">b[a]r</s>baz',\n        'foo<u style=\"text-decoration: line-through\">[bar]</u>baz',\n        'foo<u style=\"text-decoration: line-through\">b[a]r</u>baz',\n        'foo<s style=\"text-decoration: overline\">[bar]</s>baz',\n        'foo<s style=\"text-decoration: overline\">b[a]r</s>baz',\n        'foo<u style=\"text-decoration: overline\">[bar]</u>baz',\n        'foo<u style=\"text-decoration: overline\">b[a]r</u>baz',\n\n        '<p style=\"text-decoration: line-through\">foo[bar]baz</p>',\n        '<p style=\"text-decoration: overline\">foo[bar]baz</p>',\n\n        'foo<span class=\"underline\">[bar]</span>baz',\n        'foo<span class=\"underline\">b[a]r</span>baz',\n        'foo<span class=\"line-through\">[bar]</span>baz',\n        'foo<span class=\"line-through\">b[a]r</span>baz',\n        'foo<span class=\"underline-and-line-through\">[bar]</span>baz',\n        'foo<span class=\"underline-and-line-through\">b[a]r</span>baz',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<s>b]ar</s>baz',\n        'foo<s>ba[r</s>b]az',\n        'fo[o<s>bar</s>b]az',\n        'foo[<s>b]ar</s>baz',\n        'foo<s>ba[r</s>]baz',\n        'foo[<s>bar</s>]baz',\n        'foo<s>[bar]</s>baz',\n        'foo{<s>bar</s>}baz',\n        'fo[o<span style=text-decoration:line-through>b]ar</span>baz',\n        '<strike>fo[o</strike><s>b]ar</s>',\n        '<s>fo[o</s><del>b]ar</del>',\n    ],\n    //@}\n    subscript: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<sub>[bar]</sub>baz',\n        'foo<sub>b[a]r</sub>baz',\n        'foo<sup>[bar]</sup>baz',\n        'foo<sup>b[a]r</sup>baz',\n\n        'foo<span style=vertical-align:sub>[bar]</span>baz',\n        'foo<span style=vertical-align:super>[bar]</span>baz',\n\n        'foo<sub><sub>[bar]</sub></sub>baz',\n        'foo<sub><sub>b[a]r</sub></sub>baz',\n        'foo<sub>b<sub>[a]</sub>r</sub>baz',\n        'foo<sup><sup>[bar]</sup></sup>baz',\n        'foo<sup><sup>b[a]r</sup></sup>baz',\n        'foo<sup>b<sup>[a]</sup>r</sup>baz',\n        'foo<sub><sup>[bar]</sup></sub>baz',\n        'foo<sub><sup>b[a]r</sup></sub>baz',\n        'foo<sub>b<sup>[a]</sup>r</sub>baz',\n        'foo<sup><sub>[bar]</sub></sup>baz',\n        'foo<sup><sub>b[a]r</sub></sup>baz',\n        'foo<sup>b<sub>[a]</sub>r</sup>baz',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<sub>b]ar</sub>baz',\n        'foo<sub>ba[r</sub>b]az',\n        'fo[o<sub>bar</sub>b]az',\n        'foo[<sub>b]ar</sub>baz',\n        'foo<sub>ba[r</sub>]baz',\n        'foo[<sub>bar</sub>]baz',\n        'foo<sub>[bar]</sub>baz',\n        'foo{<sub>bar</sub>}baz',\n        '<sub>fo[o</sub><sup>b]ar</sup>',\n        '<sub>fo[o</sub><span style=vertical-align:sub>b]ar</span>',\n        'foo<span style=vertical-align:top>[bar]</span>baz',\n        '<sub>fo[o</sub><span style=vertical-align:top>b]ar</span>',\n    ],\n    //@}\n    superscript: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<sub>[bar]</sub>baz',\n        'foo<sub>b[a]r</sub>baz',\n        'foo<sup>[bar]</sup>baz',\n        'foo<sup>b[a]r</sup>baz',\n\n        'foo<span style=vertical-align:sub>[bar]</span>baz',\n        'foo<span style=vertical-align:super>[bar]</span>baz',\n\n        'foo<sub><sub>[bar]</sub></sub>baz',\n        'foo<sub><sub>b[a]r</sub></sub>baz',\n        'foo<sub>b<sub>[a]</sub>r</sub>baz',\n        'foo<sup><sup>[bar]</sup></sup>baz',\n        'foo<sup><sup>b[a]r</sup></sup>baz',\n        'foo<sup>b<sup>[a]</sup>r</sup>baz',\n        'foo<sub><sup>[bar]</sup></sub>baz',\n        'foo<sub><sup>b[a]r</sup></sub>baz',\n        'foo<sub>b<sup>[a]</sup>r</sub>baz',\n        'foo<sup><sub>[bar]</sub></sup>baz',\n        'foo<sup><sub>b[a]r</sub></sup>baz',\n        'foo<sup>b<sub>[a]</sub>r</sup>baz',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<sup>b]ar</sup>baz',\n        'foo<sup>ba[r</sup>b]az',\n        'fo[o<sup>bar</sup>b]az',\n        'foo[<sup>b]ar</sup>baz',\n        'foo<sup>ba[r</sup>]baz',\n        'foo[<sup>bar</sup>]baz',\n        'foo<sup>[bar]</sup>baz',\n        'foo{<sup>bar</sup>}baz',\n        '<sup>fo[o</sup><sub>b]ar</sub>',\n        '<sup>fo[o</sup><span style=vertical-align:super>b]ar</span>',\n        'foo<span style=vertical-align:bottom>[bar]</span>baz',\n        '<sup>fo[o</sup><span style=vertical-align:bottom>b]ar</span>',\n\n        // https://bugs.webkit.org/show_bug.cgi?id=28472\n        'foo<sup>[bar]<br></sup>',\n    ],\n    //@}\n    underline: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<p>[foo<p><br><p>bar]',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<table><tbody><tr><td>foo<td>b[a]r<td>baz</table>',\n        '<table><tbody><tr data-start=1 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody><tr data-start=0 data-end=2><td>foo<td>bar<td>baz</table>',\n        '<table><tbody data-start=0 data-end=1><tr><td>foo<td>bar<td>baz</table>',\n        '<table data-start=0 data-end=1><tbody><tr><td>foo<td>bar<td>baz</table>',\n        '{<table><tr><td>foo<td>bar<td>baz</table>}',\n\n        'foo<u>[bar]</u>baz',\n        'foo<span style=\"text-decoration: underline\">[bar]</span>baz',\n        '<u>foo[bar]baz</u>',\n        '<u>foo[b<span style=\"color:blue\">ar]ba</span>z</u>',\n        '<u>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</u>',\n        '<u>foo[b<span style=\"font-size:3em\">ar]ba</span>z</u>',\n        '<u>foo[b<i>ar]ba</i>z</u>',\n        '<p style=\"text-decoration: underline\">foo[bar]baz</p>',\n\n        'foo<s>[bar]</s>baz',\n        'foo<span style=\"text-decoration: line-through\">[bar]</span>baz',\n        '<s>foo[bar]baz</s>',\n        '<s>foo[b<span style=\"color:blue\">ar]ba</span>z</s>',\n        '<s>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</s>',\n        '<s>foo[b<span style=\"font-size:3em\">ar]ba</span>z</s>',\n        '<s>foo[b<i>ar]ba</i>z</s>',\n        '<p style=\"text-decoration: line-through\">foo[bar]baz</p>',\n\n        'foo<strike>[bar]</strike>baz',\n        '<strike>foo[bar]baz</strike>',\n        '<strike>foo[b<span style=\"color:blue\">ar]ba</span>z</strike>',\n        '<strike>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</strike>',\n        '<strike>foo[b<span style=\"font-size:3em\">ar]ba</span>z</strike>',\n        '<strike>foo[b<i>ar]ba</i>z</strike>',\n\n        'foo<ins>[bar]</ins>baz',\n        '<ins>foo[bar]baz</ins>',\n        '<ins>foo[b<span style=\"color:blue\">ar]ba</span>z</ins>',\n        '<ins>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</ins>',\n        '<ins>foo[b<span style=\"font-size:3em\">ar]ba</span>z</ins>',\n        '<ins>foo[b<i>ar]ba</i>z</ins>',\n\n        'foo<del>[bar]</del>baz',\n        '<del>foo[bar]baz</del>',\n        '<del>foo[b<span style=\"color:blue\">ar]ba</span>z</del>',\n        '<del>foo[b<span style=\"color:blue\" id=foo>ar]ba</span>z</del>',\n        '<del>foo[b<span style=\"font-size:3em\">ar]ba</span>z</del>',\n        '<del>foo[b<i>ar]ba</i>z</del>',\n\n        'foo<span style=\"text-decoration: underline line-through\">[bar]</span>baz',\n        'foo<span style=\"text-decoration: underline line-through\">b[a]r</span>baz',\n        'foo<s style=\"text-decoration: underline\">[bar]</s>baz',\n        'foo<s style=\"text-decoration: underline\">b[a]r</s>baz',\n        'foo<u style=\"text-decoration: line-through\">[bar]</u>baz',\n        'foo<u style=\"text-decoration: line-through\">b[a]r</u>baz',\n        'foo<s style=\"text-decoration: overline\">[bar]</s>baz',\n        'foo<s style=\"text-decoration: overline\">b[a]r</s>baz',\n        'foo<u style=\"text-decoration: overline\">[bar]</u>baz',\n        'foo<u style=\"text-decoration: overline\">b[a]r</u>baz',\n\n        '<p style=\"text-decoration: line-through\">foo[bar]baz</p>',\n        '<p style=\"text-decoration: overline\">foo[bar]baz</p>',\n\n        'foo<span class=\"underline\">[bar]</span>baz',\n        'foo<span class=\"underline\">b[a]r</span>baz',\n        'foo<span class=\"line-through\">[bar]</span>baz',\n        'foo<span class=\"line-through\">b[a]r</span>baz',\n        'foo<span class=\"underline-and-line-through\">[bar]</span>baz',\n        'foo<span class=\"underline-and-line-through\">b[a]r</span>baz',\n\n        // Tests for queryCommandIndeterm() and queryCommandState()\n        'fo[o<u>b]ar</u>baz',\n        'foo<u>ba[r</u>b]az',\n        'fo[o<u>bar</u>b]az',\n        'foo[<u>b]ar</u>baz',\n        'foo<u>ba[r</u>]baz',\n        'foo[<u>bar</u>]baz',\n        'foo<u>[bar]</u>baz',\n        'foo{<u>bar</u>}baz',\n        'fo[o<span style=text-decoration:underline>b]ar</span>baz',\n        '<ins>fo[o</ins><u>b]ar</u>',\n        '<u>fo[o</u><ins>b]ar</ins>',\n    ],\n    //@}\n    unlink: [\n    //@{\n        'foo[]bar',\n        '<p>[foo</p> <p>bar]</p>',\n        '<span>[foo</span> <span>bar]</span>',\n        '<p>[foo</p><p> <span>bar</span> </p><p>baz]</p>',\n        '<b>foo[]bar</b>',\n        '<i>foo[]bar</i>',\n        '<span>foo</span>{}<span>bar</span>',\n        '<span>foo[</span><span>]bar</span>',\n        'foo[bar]baz',\n        'foo[bar<b>baz]qoz</b>quz',\n        'foo[bar<i>baz]qoz</i>quz',\n        '{<p><p> <p>foo</p>}',\n\n        '<a href=http://www.google.com/>foo[bar]baz</a>',\n        '<a href=http://www.google.com/>foo[barbaz</a>}',\n        '{<a href=http://www.google.com/>foobar]baz</a>',\n        '{<a href=http://www.google.com/>foobarbaz</a>}',\n        '<a href=http://www.google.com/>[foobarbaz]</a>',\n\n        'foo<a href=http://www.google.com/>b[]ar</a>baz',\n        'foo<a href=http://www.google.com/>[bar]</a>baz',\n        'foo[<a href=http://www.google.com/>bar</a>]baz',\n        'foo<a href=http://www.google.com/>[bar</a>baz]',\n        '[foo<a href=http://www.google.com/>bar]</a>baz',\n        '[foo<a href=http://www.google.com/>bar</a>baz]',\n\n        '<a id=foo href=http://www.google.com/>foobar[]baz</a>',\n        '<a id=foo href=http://www.google.com/>foo[bar]baz</a>',\n        '<a id=foo href=http://www.google.com/>[foobarbaz]</a>',\n        'foo<a id=foo href=http://www.google.com/>[bar]</a>baz',\n        'foo[<a id=foo href=http://www.google.com/>bar</a>]baz',\n        '[foo<a id=foo href=http://www.google.com/>bar</a>baz]',\n\n        '<a name=foo>foobar[]baz</a>',\n        '<a name=foo>foo[bar]baz</a>',\n        '<a name=foo>[foobarbaz]</a>',\n        'foo<a name=foo>[bar]</a>baz',\n        'foo[<a name=foo>bar</a>]baz',\n        '[foo<a name=foo>bar</a>baz]',\n    ],\n    //@}\n    copy: ['!foo[bar]baz'],\n    cut: ['!foo[bar]baz'],\n    defaultparagraphseparator: [\n    //@{\n        ['', 'foo[bar]baz'],\n        ['div', 'foo[bar]baz'],\n        ['p', 'foo[bar]baz'],\n        ['DIV', 'foo[bar]baz'],\n        ['P', 'foo[bar]baz'],\n        [' div ', 'foo[bar]baz'],\n        [' p ', 'foo[bar]baz'],\n        ['<div>', 'foo[bar]baz'],\n        ['<p>', 'foo[bar]baz'],\n        ['li', 'foo[bar]baz'],\n        ['blockquote', 'foo[bar]baz'],\n    ],\n    //@}\n    paste: ['!foo[bar]baz'],\n    selectall: ['foo[bar]baz'],\n    stylewithcss: [\n    //@{\n        ['true', 'foo[bar]baz'],\n        ['TRUE', 'foo[bar]baz'],\n        ['TrUe', 'foo[bar]baz'],\n        ['true ', 'foo[bar]baz'],\n        [' true', 'foo[bar]baz'],\n        ['truer', 'foo[bar]baz'],\n        [' true ', 'foo[bar]baz'],\n        [' TrUe', 'foo[bar]baz'],\n        ['', 'foo[bar]baz'],\n        [' ', 'foo[bar]baz'],\n        ['false', 'foo[bar]baz'],\n        ['FALSE', 'foo[bar]baz'],\n        ['FaLsE', 'foo[bar]baz'],\n        [' false', 'foo[bar]baz'],\n        ['false ', 'foo[bar]baz'],\n        ['falser', 'foo[bar]baz'],\n        ['falsÃ©', 'foo[bar]baz'],\n    ],\n    //@}\n    usecss: [\n    //@{\n        ['true', 'foo[bar]baz'],\n        ['TRUE', 'foo[bar]baz'],\n        ['TrUe', 'foo[bar]baz'],\n        ['true ', 'foo[bar]baz'],\n        [' true', 'foo[bar]baz'],\n        ['truer', 'foo[bar]baz'],\n        [' true ', 'foo[bar]baz'],\n        [' TrUe', 'foo[bar]baz'],\n        ['', 'foo[bar]baz'],\n        [' ', 'foo[bar]baz'],\n        ['false', 'foo[bar]baz'],\n        ['FALSE', 'foo[bar]baz'],\n        ['FaLsE', 'foo[bar]baz'],\n        [' false', 'foo[bar]baz'],\n        ['false ', 'foo[bar]baz'],\n        ['falser', 'foo[bar]baz'],\n        ['falsÃ©', 'foo[bar]baz'],\n    ],\n    //@}\n    quasit: ['foo[bar]baz'],\n    multitest: [\n    //@{\n        // Insertion-affecting state.  Test that insertText works right, and\n        // test that various block commands preserve (or don't preserve) the\n        // state.\n        ['foo[]bar', 'bold', 'inserttext'],\n        ['foo[]bar', 'bold', 'delete'],\n        ['foo[]bar', 'bold', 'delete', 'inserttext'],\n        ['foo[]bar', 'bold', 'formatblock'],\n        ['foo[]bar', 'bold', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'bold', 'forwarddelete'],\n        ['foo[]bar', 'bold', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'bold', 'indent'],\n        ['foo[]bar', 'bold', 'indent', 'inserttext'],\n        ['foo[]bar', 'bold', 'inserthorizontalrule'],\n        ['foo[]bar', 'bold', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'bold', 'inserthtml'],\n        ['foo[]bar', 'bold', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'bold', 'insertimage'],\n        ['foo[]bar', 'bold', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'bold', 'insertlinebreak'],\n        ['foo[]bar', 'bold', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'bold', 'insertorderedlist'],\n        ['foo[]bar', 'bold', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'bold', 'insertparagraph'],\n        ['foo[]bar', 'bold', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'bold', 'insertunorderedlist'],\n        ['foo[]bar', 'bold', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'bold', 'justifycenter'],\n        ['foo[]bar', 'bold', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'bold', 'justifyfull'],\n        ['foo[]bar', 'bold', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'bold', 'justifyleft'],\n        ['foo[]bar', 'bold', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'bold', 'justifyright'],\n        ['foo[]bar', 'bold', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'bold', 'outdent'],\n        ['foo[]bar', 'bold', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'italic', 'inserttext'],\n        ['foo[]bar', 'italic', 'delete'],\n        ['foo[]bar', 'italic', 'delete', 'inserttext'],\n        ['foo[]bar', 'italic', 'formatblock'],\n        ['foo[]bar', 'italic', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'italic', 'forwarddelete'],\n        ['foo[]bar', 'italic', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'italic', 'indent'],\n        ['foo[]bar', 'italic', 'indent', 'inserttext'],\n        ['foo[]bar', 'italic', 'inserthorizontalrule'],\n        ['foo[]bar', 'italic', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'italic', 'inserthtml'],\n        ['foo[]bar', 'italic', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'italic', 'insertimage'],\n        ['foo[]bar', 'italic', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'italic', 'insertlinebreak'],\n        ['foo[]bar', 'italic', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'italic', 'insertorderedlist'],\n        ['foo[]bar', 'italic', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'italic', 'insertparagraph'],\n        ['foo[]bar', 'italic', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'italic', 'insertunorderedlist'],\n        ['foo[]bar', 'italic', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'italic', 'justifycenter'],\n        ['foo[]bar', 'italic', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'italic', 'justifyfull'],\n        ['foo[]bar', 'italic', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'italic', 'justifyleft'],\n        ['foo[]bar', 'italic', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'italic', 'justifyright'],\n        ['foo[]bar', 'italic', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'italic', 'outdent'],\n        ['foo[]bar', 'italic', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'strikethrough', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'delete'],\n        ['foo[]bar', 'strikethrough', 'delete', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'formatblock'],\n        ['foo[]bar', 'strikethrough', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'forwarddelete'],\n        ['foo[]bar', 'strikethrough', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'indent'],\n        ['foo[]bar', 'strikethrough', 'indent', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'inserthorizontalrule'],\n        ['foo[]bar', 'strikethrough', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'inserthtml'],\n        ['foo[]bar', 'strikethrough', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'insertimage'],\n        ['foo[]bar', 'strikethrough', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'insertlinebreak'],\n        ['foo[]bar', 'strikethrough', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'insertorderedlist'],\n        ['foo[]bar', 'strikethrough', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'insertparagraph'],\n        ['foo[]bar', 'strikethrough', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'insertunorderedlist'],\n        ['foo[]bar', 'strikethrough', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'justifycenter'],\n        ['foo[]bar', 'strikethrough', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'justifyfull'],\n        ['foo[]bar', 'strikethrough', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'justifyleft'],\n        ['foo[]bar', 'strikethrough', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'justifyright'],\n        ['foo[]bar', 'strikethrough', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'strikethrough', 'outdent'],\n        ['foo[]bar', 'strikethrough', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'subscript', 'inserttext'],\n        ['foo[]bar', 'subscript', 'delete'],\n        ['foo[]bar', 'subscript', 'delete', 'inserttext'],\n        ['foo[]bar', 'subscript', 'formatblock'],\n        ['foo[]bar', 'subscript', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'subscript', 'forwarddelete'],\n        ['foo[]bar', 'subscript', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'subscript', 'indent'],\n        ['foo[]bar', 'subscript', 'indent', 'inserttext'],\n        ['foo[]bar', 'subscript', 'inserthorizontalrule'],\n        ['foo[]bar', 'subscript', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'subscript', 'inserthtml'],\n        ['foo[]bar', 'subscript', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'subscript', 'insertimage'],\n        ['foo[]bar', 'subscript', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'subscript', 'insertlinebreak'],\n        ['foo[]bar', 'subscript', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'subscript', 'insertorderedlist'],\n        ['foo[]bar', 'subscript', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'subscript', 'insertparagraph'],\n        ['foo[]bar', 'subscript', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'subscript', 'insertunorderedlist'],\n        ['foo[]bar', 'subscript', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'subscript', 'justifycenter'],\n        ['foo[]bar', 'subscript', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'subscript', 'justifyfull'],\n        ['foo[]bar', 'subscript', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'subscript', 'justifyleft'],\n        ['foo[]bar', 'subscript', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'subscript', 'justifyright'],\n        ['foo[]bar', 'subscript', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'subscript', 'outdent'],\n        ['foo[]bar', 'subscript', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'superscript', 'inserttext'],\n        ['foo[]bar', 'superscript', 'delete'],\n        ['foo[]bar', 'superscript', 'delete', 'inserttext'],\n        ['foo[]bar', 'superscript', 'formatblock'],\n        ['foo[]bar', 'superscript', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'superscript', 'forwarddelete'],\n        ['foo[]bar', 'superscript', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'superscript', 'indent'],\n        ['foo[]bar', 'superscript', 'indent', 'inserttext'],\n        ['foo[]bar', 'superscript', 'inserthorizontalrule'],\n        ['foo[]bar', 'superscript', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'superscript', 'inserthtml'],\n        ['foo[]bar', 'superscript', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'superscript', 'insertimage'],\n        ['foo[]bar', 'superscript', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'superscript', 'insertlinebreak'],\n        ['foo[]bar', 'superscript', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'superscript', 'insertorderedlist'],\n        ['foo[]bar', 'superscript', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'superscript', 'insertparagraph'],\n        ['foo[]bar', 'superscript', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'superscript', 'insertunorderedlist'],\n        ['foo[]bar', 'superscript', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'superscript', 'justifycenter'],\n        ['foo[]bar', 'superscript', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'superscript', 'justifyfull'],\n        ['foo[]bar', 'superscript', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'superscript', 'justifyleft'],\n        ['foo[]bar', 'superscript', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'superscript', 'justifyright'],\n        ['foo[]bar', 'superscript', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'superscript', 'outdent'],\n        ['foo[]bar', 'superscript', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'underline', 'inserttext'],\n        ['foo[]bar', 'underline', 'delete'],\n        ['foo[]bar', 'underline', 'delete', 'inserttext'],\n        ['foo[]bar', 'underline', 'formatblock'],\n        ['foo[]bar', 'underline', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'underline', 'forwarddelete'],\n        ['foo[]bar', 'underline', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'underline', 'indent'],\n        ['foo[]bar', 'underline', 'indent', 'inserttext'],\n        ['foo[]bar', 'underline', 'inserthorizontalrule'],\n        ['foo[]bar', 'underline', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'underline', 'inserthtml'],\n        ['foo[]bar', 'underline', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'underline', 'insertimage'],\n        ['foo[]bar', 'underline', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'underline', 'insertlinebreak'],\n        ['foo[]bar', 'underline', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'underline', 'insertorderedlist'],\n        ['foo[]bar', 'underline', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'underline', 'insertparagraph'],\n        ['foo[]bar', 'underline', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'underline', 'insertunorderedlist'],\n        ['foo[]bar', 'underline', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'underline', 'justifycenter'],\n        ['foo[]bar', 'underline', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'underline', 'justifyfull'],\n        ['foo[]bar', 'underline', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'underline', 'justifyleft'],\n        ['foo[]bar', 'underline', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'underline', 'justifyright'],\n        ['foo[]bar', 'underline', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'underline', 'outdent'],\n        ['foo[]bar', 'underline', 'outdent', 'inserttext'],\n\n        // Insertion-affecting value.  Test that insertText works right, and\n        // test that various block commands preserve (or don't preserve) the\n        // value.\n        ['foo[]bar', 'backcolor', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'delete'],\n        ['foo[]bar', 'backcolor', 'delete', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'formatblock'],\n        ['foo[]bar', 'backcolor', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'forwarddelete'],\n        ['foo[]bar', 'backcolor', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'indent'],\n        ['foo[]bar', 'backcolor', 'indent', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'inserthorizontalrule'],\n        ['foo[]bar', 'backcolor', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'inserthtml'],\n        ['foo[]bar', 'backcolor', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'insertimage'],\n        ['foo[]bar', 'backcolor', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'insertlinebreak'],\n        ['foo[]bar', 'backcolor', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'insertorderedlist'],\n        ['foo[]bar', 'backcolor', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'insertparagraph'],\n        ['foo[]bar', 'backcolor', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'insertunorderedlist'],\n        ['foo[]bar', 'backcolor', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'justifycenter'],\n        ['foo[]bar', 'backcolor', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'justifyfull'],\n        ['foo[]bar', 'backcolor', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'justifyleft'],\n        ['foo[]bar', 'backcolor', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'justifyright'],\n        ['foo[]bar', 'backcolor', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'backcolor', 'outdent'],\n        ['foo[]bar', 'backcolor', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', 'delete'],\n        ['foo[]bar', 'createlink', 'delete', 'inserttext'],\n        ['foo[]bar', 'createlink', 'formatblock'],\n        ['foo[]bar', 'createlink', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'createlink', 'forwarddelete'],\n        ['foo[]bar', 'createlink', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'createlink', 'indent'],\n        ['foo[]bar', 'createlink', 'indent', 'inserttext'],\n        ['foo[]bar', 'createlink', 'inserthorizontalrule'],\n        ['foo[]bar', 'createlink', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'createlink', 'inserthtml'],\n        ['foo[]bar', 'createlink', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'createlink', 'insertimage'],\n        ['foo[]bar', 'createlink', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'createlink', 'insertlinebreak'],\n        ['foo[]bar', 'createlink', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'createlink', 'insertorderedlist'],\n        ['foo[]bar', 'createlink', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'createlink', 'insertparagraph'],\n        ['foo[]bar', 'createlink', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'createlink', 'insertunorderedlist'],\n        ['foo[]bar', 'createlink', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'createlink', 'justifycenter'],\n        ['foo[]bar', 'createlink', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'createlink', 'justifyfull'],\n        ['foo[]bar', 'createlink', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'createlink', 'justifyleft'],\n        ['foo[]bar', 'createlink', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'createlink', 'justifyright'],\n        ['foo[]bar', 'createlink', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'createlink', 'outdent'],\n        ['foo[]bar', 'createlink', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'fontname', 'inserttext'],\n        ['foo[]bar', 'fontname', 'delete'],\n        ['foo[]bar', 'fontname', 'delete', 'inserttext'],\n        ['foo[]bar', 'fontname', 'formatblock'],\n        ['foo[]bar', 'fontname', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'fontname', 'forwarddelete'],\n        ['foo[]bar', 'fontname', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'fontname', 'indent'],\n        ['foo[]bar', 'fontname', 'indent', 'inserttext'],\n        ['foo[]bar', 'fontname', 'inserthorizontalrule'],\n        ['foo[]bar', 'fontname', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'fontname', 'inserthtml'],\n        ['foo[]bar', 'fontname', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'fontname', 'insertimage'],\n        ['foo[]bar', 'fontname', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'fontname', 'insertlinebreak'],\n        ['foo[]bar', 'fontname', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'fontname', 'insertorderedlist'],\n        ['foo[]bar', 'fontname', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'fontname', 'insertparagraph'],\n        ['foo[]bar', 'fontname', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'fontname', 'insertunorderedlist'],\n        ['foo[]bar', 'fontname', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'fontname', 'justifycenter'],\n        ['foo[]bar', 'fontname', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'fontname', 'justifyfull'],\n        ['foo[]bar', 'fontname', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'fontname', 'justifyleft'],\n        ['foo[]bar', 'fontname', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'fontname', 'justifyright'],\n        ['foo[]bar', 'fontname', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'fontname', 'outdent'],\n        ['foo[]bar', 'fontname', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'fontsize', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'delete'],\n        ['foo[]bar', 'fontsize', 'delete', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'formatblock'],\n        ['foo[]bar', 'fontsize', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'forwarddelete'],\n        ['foo[]bar', 'fontsize', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'indent'],\n        ['foo[]bar', 'fontsize', 'indent', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'inserthorizontalrule'],\n        ['foo[]bar', 'fontsize', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'inserthtml'],\n        ['foo[]bar', 'fontsize', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'insertimage'],\n        ['foo[]bar', 'fontsize', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'insertlinebreak'],\n        ['foo[]bar', 'fontsize', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'insertorderedlist'],\n        ['foo[]bar', 'fontsize', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'insertparagraph'],\n        ['foo[]bar', 'fontsize', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'insertunorderedlist'],\n        ['foo[]bar', 'fontsize', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'justifycenter'],\n        ['foo[]bar', 'fontsize', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'justifyfull'],\n        ['foo[]bar', 'fontsize', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'justifyleft'],\n        ['foo[]bar', 'fontsize', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'justifyright'],\n        ['foo[]bar', 'fontsize', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'fontsize', 'outdent'],\n        ['foo[]bar', 'fontsize', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'forecolor', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'delete'],\n        ['foo[]bar', 'forecolor', 'delete', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'formatblock'],\n        ['foo[]bar', 'forecolor', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'forwarddelete'],\n        ['foo[]bar', 'forecolor', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'indent'],\n        ['foo[]bar', 'forecolor', 'indent', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'inserthorizontalrule'],\n        ['foo[]bar', 'forecolor', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'inserthtml'],\n        ['foo[]bar', 'forecolor', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'insertimage'],\n        ['foo[]bar', 'forecolor', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'insertlinebreak'],\n        ['foo[]bar', 'forecolor', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'insertorderedlist'],\n        ['foo[]bar', 'forecolor', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'insertparagraph'],\n        ['foo[]bar', 'forecolor', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'insertunorderedlist'],\n        ['foo[]bar', 'forecolor', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'justifycenter'],\n        ['foo[]bar', 'forecolor', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'justifyfull'],\n        ['foo[]bar', 'forecolor', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'justifyleft'],\n        ['foo[]bar', 'forecolor', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'justifyright'],\n        ['foo[]bar', 'forecolor', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'forecolor', 'outdent'],\n        ['foo[]bar', 'forecolor', 'outdent', 'inserttext'],\n\n        ['foo[]bar', 'hilitecolor', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'delete'],\n        ['foo[]bar', 'hilitecolor', 'delete', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'formatblock'],\n        ['foo[]bar', 'hilitecolor', 'formatblock', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'forwarddelete'],\n        ['foo[]bar', 'hilitecolor', 'forwarddelete', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'indent'],\n        ['foo[]bar', 'hilitecolor', 'indent', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'inserthorizontalrule'],\n        ['foo[]bar', 'hilitecolor', 'inserthorizontalrule', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'inserthtml'],\n        ['foo[]bar', 'hilitecolor', 'inserthtml', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'insertimage'],\n        ['foo[]bar', 'hilitecolor', 'insertimage', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'insertlinebreak'],\n        ['foo[]bar', 'hilitecolor', 'insertlinebreak', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'insertorderedlist'],\n        ['foo[]bar', 'hilitecolor', 'insertorderedlist', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'insertparagraph'],\n        ['foo[]bar', 'hilitecolor', 'insertparagraph', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'insertunorderedlist'],\n        ['foo[]bar', 'hilitecolor', 'insertunorderedlist', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'justifycenter'],\n        ['foo[]bar', 'hilitecolor', 'justifycenter', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'justifyfull'],\n        ['foo[]bar', 'hilitecolor', 'justifyfull', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'justifyleft'],\n        ['foo[]bar', 'hilitecolor', 'justifyleft', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'justifyright'],\n        ['foo[]bar', 'hilitecolor', 'justifyright', 'inserttext'],\n        ['foo[]bar', 'hilitecolor', 'outdent'],\n        ['foo[]bar', 'hilitecolor', 'outdent', 'inserttext'],\n\n        // Test things that interfere with each other\n        ['foo[]bar', 'superscript', 'subscript', 'inserttext'],\n        ['foo[]bar', 'subscript', 'superscript', 'inserttext'],\n\n        ['foo[]bar', 'createlink', ['forecolor', '#0000FF'], 'inserttext'],\n        ['foo[]bar', ['forecolor', '#0000FF'], 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', ['forecolor', 'blue'], 'inserttext'],\n        ['foo[]bar', ['forecolor', 'blue'], 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', ['forecolor', 'brown'], 'inserttext'],\n        ['foo[]bar', ['forecolor', 'brown'], 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', ['forecolor', 'black'], 'inserttext'],\n        ['foo[]bar', ['forecolor', 'black'], 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', 'underline', 'inserttext'],\n        ['foo[]bar', 'underline', 'createlink', 'inserttext'],\n        ['foo[]bar', 'createlink', 'underline', 'underline', 'inserttext'],\n        ['foo[]bar', 'underline', 'underline', 'createlink', 'inserttext'],\n\n        ['foo[]bar', 'subscript', ['fontsize', '2'], 'inserttext'],\n        ['foo[]bar', ['fontsize', '2'], 'subscript', 'inserttext'],\n        ['foo[]bar', 'subscript', ['fontsize', '3'], 'inserttext'],\n        ['foo[]bar', ['fontsize', '3'], 'subscript', 'inserttext'],\n\n        ['foo[]bar', ['hilitecolor', 'aqua'], ['backcolor', 'tan'], 'inserttext'],\n        ['foo[]bar', ['backcolor', 'tan'], ['hilitecolor', 'aqua'], 'inserttext'],\n\n\n        // The following are all just inserttext tests that we took from there,\n        // but we first backspace the selected text instead of letting\n        // inserttext handle it.  This tests that deletion correctly sets\n        // overrides.\n        ['foo<b>[bar]</b>baz', 'delete', 'inserttext'],\n        ['foo<i>[bar]</i>baz', 'delete', 'inserttext'],\n        ['foo<s>[bar]</s>baz', 'delete', 'inserttext'],\n        ['foo<sub>[bar]</sub>baz', 'delete', 'inserttext'],\n        ['foo<sup>[bar]</sup>baz', 'delete', 'inserttext'],\n        ['foo<u>[bar]</u>baz', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com>[bar]</a>baz', 'delete', 'inserttext'],\n        ['foo<font face=sans-serif>[bar]</font>baz', 'delete', 'inserttext'],\n        ['foo<font size=4>[bar]</font>baz', 'delete', 'inserttext'],\n        ['foo<font color=#0000FF>[bar]</font>baz', 'delete', 'inserttext'],\n        ['foo<span style=background-color:#00FFFF>[bar]</span>baz', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=blue>[bar]</font></a>baz', 'delete', 'inserttext'],\n        ['foo<font color=blue><a href=http://www.google.com>[bar]</a></font>baz', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=brown>[bar]</font></a>baz', 'delete', 'inserttext'],\n        ['foo<font color=brown><a href=http://www.google.com>[bar]</a></font>baz', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=black>[bar]</font></a>baz', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><u>[bar]</u></a>baz', 'delete', 'inserttext'],\n        ['foo<u><a href=http://www.google.com>[bar]</a></u>baz', 'delete', 'inserttext'],\n        ['foo<sub><font size=2>[bar]</font></sub>baz', 'delete', 'inserttext'],\n        ['foo<font size=2><sub>[bar]</sub></font>baz', 'delete', 'inserttext'],\n        ['foo<sub><font size=3>[bar]</font></sub>baz', 'delete', 'inserttext'],\n        ['foo<font size=3><sub>[bar]</sub></font>baz', 'delete', 'inserttext'],\n\n        // Now repeat but with different selections.\n        ['[foo<b>bar]</b>baz', 'delete', 'inserttext'],\n        ['[foo<i>bar]</i>baz', 'delete', 'inserttext'],\n        ['[foo<s>bar]</s>baz', 'delete', 'inserttext'],\n        ['[foo<sub>bar]</sub>baz', 'delete', 'inserttext'],\n        ['[foo<sup>bar]</sup>baz', 'delete', 'inserttext'],\n        ['[foo<u>bar]</u>baz', 'delete', 'inserttext'],\n        ['[foo<a href=http://www.google.com>bar]</a>baz', 'delete', 'inserttext'],\n        ['[foo<font face=sans-serif>bar]</font>baz', 'delete', 'inserttext'],\n        ['[foo<font size=4>bar]</font>baz', 'delete', 'inserttext'],\n        ['[foo<font color=#0000FF>bar]</font>baz', 'delete', 'inserttext'],\n        ['[foo<span style=background-color:#00FFFF>bar]</span>baz', 'delete', 'inserttext'],\n        ['[foo<a href=http://www.google.com><font color=blue>bar]</font></a>baz', 'delete', 'inserttext'],\n        ['[foo<font color=blue><a href=http://www.google.com>bar]</a></font>baz', 'delete', 'inserttext'],\n        ['[foo<a href=http://www.google.com><font color=brown>bar]</font></a>baz', 'delete', 'inserttext'],\n        ['[foo<font color=brown><a href=http://www.google.com>bar]</a></font>baz', 'delete', 'inserttext'],\n        ['[foo<a href=http://www.google.com><font color=black>bar]</font></a>baz', 'delete', 'inserttext'],\n        ['[foo<a href=http://www.google.com><u>bar]</u></a>baz', 'delete', 'inserttext'],\n        ['[foo<u><a href=http://www.google.com>bar]</a></u>baz', 'delete', 'inserttext'],\n        ['[foo<sub><font size=2>bar]</font></sub>baz', 'delete', 'inserttext'],\n        ['[foo<font size=2><sub>bar]</sub></font>baz', 'delete', 'inserttext'],\n        ['[foo<sub><font size=3>bar]</font></sub>baz', 'delete', 'inserttext'],\n        ['[foo<font size=3><sub>bar]</sub></font>baz', 'delete', 'inserttext'],\n\n        ['foo<b>[bar</b>baz]', 'delete', 'inserttext'],\n        ['foo<i>[bar</i>baz]', 'delete', 'inserttext'],\n        ['foo<s>[bar</s>baz]', 'delete', 'inserttext'],\n        ['foo<sub>[bar</sub>baz]', 'delete', 'inserttext'],\n        ['foo<sup>[bar</sup>baz]', 'delete', 'inserttext'],\n        ['foo<u>[bar</u>baz]', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com>[bar</a>baz]', 'delete', 'inserttext'],\n        ['foo<font face=sans-serif>[bar</font>baz]', 'delete', 'inserttext'],\n        ['foo<font size=4>[bar</font>baz]', 'delete', 'inserttext'],\n        ['foo<font color=#0000FF>[bar</font>baz]', 'delete', 'inserttext'],\n        ['foo<span style=background-color:#00FFFF>[bar</span>baz]', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=blue>[bar</font></a>baz]', 'delete', 'inserttext'],\n        ['foo<font color=blue><a href=http://www.google.com>[bar</a></font>baz]', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=brown>[bar</font></a>baz]', 'delete', 'inserttext'],\n        ['foo<font color=brown><a href=http://www.google.com>[bar</a></font>baz]', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><font color=black>[bar</font></a>baz]', 'delete', 'inserttext'],\n        ['foo<a href=http://www.google.com><u>[bar</u></a>baz]', 'delete', 'inserttext'],\n        ['foo<u><a href=http://www.google.com>[bar</a></u>baz]', 'delete', 'inserttext'],\n        ['foo<sub><font size=2>[bar</font></sub>baz]', 'delete', 'inserttext'],\n        ['foo<font size=2><sub>[bar</sub></font>baz]', 'delete', 'inserttext'],\n        ['foo<sub><font size=3>[bar</font></sub>baz]', 'delete', 'inserttext'],\n        ['foo<font size=3><sub>[bar</sub></font>baz]', 'delete', 'inserttext'],\n\n        // https://bugs.webkit.org/show_bug.cgi?id=19702\n        ['<blockquote><font color=blue>[foo]</font></blockquote>', 'delete', 'inserttext'],\n    ],\n    //@}\n};\ntests.backcolor = tests.hilitecolor;\ntests.insertlinebreak = tests.insertparagraph;\n\n// Tests that start with \"!\" are believed to have bogus results and should be\n// skipped until the relevant bugs are fixed.\nvar badTests = {};\n(function(){\n    for (var command in tests) {\n        badTests[command] = [];\n        for (var i = 0; i < tests[command].length; i++) {\n            var test = tests[command][i];\n            if (typeof test == \"string\" && test[0] == \"!\") {\n                test = test.slice(1);\n                tests[command][i] = test;\n                badTests[command].push(test);\n            }\n            if (typeof test == \"object\" && test[0][0] == \"!\") {\n                test = [test[0].slice(1)].concat(test.slice(1));\n                tests[command][i] = test;\n                badTests[command].push(test);\n            }\n        }\n    }\n})();\n\nvar defaultValues = {\n//@{\n    backcolor: \"#00FFFF\",\n    createlink: \"http://www.google.com/\",\n    fontname: \"sans-serif\",\n    fontsize: \"4\",\n    forecolor: \"#0000FF\",\n    formatblock: \"<div>\",\n    hilitecolor: \"#00FFFF\",\n    inserthorizontalrule: \"\",\n    inserthtml: \"ab<b>c</b>d\",\n    insertimage: \"/img/lion.svg\",\n    inserttext: \"a\",\n    defaultparagraphseparator: \"div\",\n    stylewithcss: \"true\",\n    usecss: \"true\",\n};\n//@}\n\nvar notes = {\n//@{\n    fontname: 'Note that the body\\'s font-family is \"serif\".',\n};\n//@}\n\nvar doubleTestingCommands = [\n//@{\n    \"backcolor\",\n    \"bold\",\n    \"fontname\",\n    \"fontsize\",\n    \"forecolor\",\n    \"italic\",\n    \"justifycenter\",\n    \"justifyfull\",\n    \"justifyleft\",\n    \"justifyright\",\n    \"strikethrough\",\n    \"stylewithcss\",\n    \"subscript\",\n    \"superscript\",\n    \"underline\",\n    \"usecss\",\n];\n//@}\n\nfunction prettyPrint(value) {\n//@{\n    // Partly stolen from testharness.js\n    if (typeof value != \"string\") {\n        return String(value);\n    }\n\n    value = value.replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g, '\\\\\"');\n\n    for (var i = 0; i < 32; i++) {\n        var replace = \"\\\\\";\n        switch (i) {\n        case 0: replace += \"0\"; break;\n        case 1: replace += \"x01\"; break;\n        case 2: replace += \"x02\"; break;\n        case 3: replace += \"x03\"; break;\n        case 4: replace += \"x04\"; break;\n        case 5: replace += \"x05\"; break;\n        case 6: replace += \"x06\"; break;\n        case 7: replace += \"x07\"; break;\n        case 8: replace += \"b\"; break;\n        case 9: replace += \"t\"; break;\n        case 10: replace += \"n\"; break;\n        case 11: replace += \"v\"; break;\n        case 12: replace += \"f\"; break;\n        case 13: replace += \"r\"; break;\n        case 14: replace += \"x0e\"; break;\n        case 15: replace += \"x0f\"; break;\n        case 16: replace += \"x10\"; break;\n        case 17: replace += \"x11\"; break;\n        case 18: replace += \"x12\"; break;\n        case 19: replace += \"x13\"; break;\n        case 20: replace += \"x14\"; break;\n        case 21: replace += \"x15\"; break;\n        case 22: replace += \"x16\"; break;\n        case 23: replace += \"x17\"; break;\n        case 24: replace += \"x18\"; break;\n        case 25: replace += \"x19\"; break;\n        case 26: replace += \"x1a\"; break;\n        case 27: replace += \"x1b\"; break;\n        case 28: replace += \"x1c\"; break;\n        case 29: replace += \"x1d\"; break;\n        case 30: replace += \"x1e\"; break;\n        case 31: replace += \"x1f\"; break;\n        }\n        value = value.replace(new RegExp(String.fromCharCode(i), \"g\"), replace);\n    }\n    return '\"' + value + '\"';\n}\n//@}\n\nfunction doSetup(selector, idx) {\n//@{\n    var table = document.querySelectorAll(selector)[idx];\n\n    var tr = document.createElement(\"tr\");\n    table.firstChild.appendChild(tr);\n    tr.className = (tr.className + \" active\").trim();\n\n    return tr;\n}\n//@}\n\nfunction queryOutputHelper(beforeIndeterm, beforeState, beforeValue,\n                           afterIndeterm, afterState, afterValue,\n                           command, value) {\n//@{\n    var frag = document.createDocumentFragment();\n    var beforeDiv = document.createElement(\"div\");\n    var afterDiv = document.createElement(\"div\");\n    frag.appendChild(beforeDiv);\n    frag.appendChild(afterDiv);\n    beforeDiv.className = afterDiv.className = \"extra-results\";\n    beforeDiv.textContent = \"Before: \";\n    afterDiv.textContent = \"After: \";\n\n    beforeDiv.appendChild(document.createElement(\"span\"));\n    afterDiv.appendChild(document.createElement(\"span\"));\n    if (\"indeterm\" in commands[command]) {\n        // We only know it has to be either true or false.\n        if (beforeIndeterm !== true && beforeIndeterm !== false) {\n            beforeDiv.lastChild.className = \"bad-result\";\n        }\n    } else {\n        // It always has to be false.\n        beforeDiv.lastChild.className = beforeIndeterm === false\n            ? \"good-result\"\n            : \"bad-result\";\n    }\n    // After running the command, indeterminate must always be false, except if\n    // it's an exception, or if it's insert*list and the state was true to\n    // begin with.  And we can't help strikethrough/underline.\n    if ((/^insert(un)?orderedlist$/.test(command) && beforeState)\n    || command == \"strikethrough\"\n    || command == \"underline\") {\n        if (afterIndeterm !== true && afterIndeterm !== false) {\n            afterDiv.lastChild.className = \"bad-result\";\n        }\n    } else {\n        afterDiv.lastChild.className =\n            afterIndeterm === false\n                ? \"good-result\"\n                : \"bad-result\";\n    }\n    beforeDiv.lastChild.textContent = \"indeterm \" + prettyPrint(beforeIndeterm);\n    afterDiv.lastChild.textContent = \"indeterm \" + prettyPrint(afterIndeterm);\n\n    beforeDiv.appendChild(document.createTextNode(\", \"));\n    afterDiv.appendChild(document.createTextNode(\", \"));\n\n    beforeDiv.appendChild(document.createElement(\"span\"));\n    afterDiv.appendChild(document.createElement(\"span\"));\n    if (/^insert(un)?orderedlist$/.test(command)) {\n        // If the before state is true, the after state could be either true or\n        // false.  But if the before state is false, the after state has to be\n        // true.\n        if (beforeState !== true && beforeState !== false) {\n            beforeDiv.lastChild.className = \"bad-result\";\n        }\n        if (!beforeState) {\n            afterDiv.lastChild.className = afterState === true\n                ? \"good-result\"\n                : \"bad-result\";\n        } else if (afterState !== true && afterState !== false) {\n            afterDiv.lastChild.className = \"bad-result\";\n        }\n    } else if (/^justify(center|full|left|right)$/.test(command)) {\n        // We don't know about the before state, but the after state is always\n        // supposed to be true.\n        if (beforeState !== true && beforeState !== false) {\n            beforeDiv.lastChild.className = \"bad-result\";\n        }\n        afterDiv.lastChild.className = afterState === true\n            ? \"good-result\"\n            : \"bad-result\";\n    } else if (command == \"strikethrough\" || command == \"underline\") {\n        // The only thing we can say is the before/after states need to be\n        // either true or false.\n        if (beforeState !== true && beforeState !== false) {\n            beforeDiv.lastChild.className = \"bad-result\";\n        }\n        if (afterState !== true && afterState !== false) {\n            afterDiv.lastChild.className = \"bad-result\";\n        }\n    } else {\n        // The general rule is it must flip the state, unless there's no state\n        // defined, in which case it should always be false.\n        beforeDiv.lastChild.className =\n        afterDiv.lastChild.className =\n            (\"state\" in commands[command] && typeof beforeState == \"boolean\" && typeof afterState == \"boolean\" && beforeState === !afterState)\n            || (!(\"state\" in commands[command]) && beforeState === false && afterState === false)\n                ? \"good-result\"\n                : \"bad-result\";\n    }\n    beforeDiv.lastChild.textContent = \"state \" + prettyPrint(beforeState);\n    afterDiv.lastChild.textContent = \"state \" + prettyPrint(afterState);\n\n    beforeDiv.appendChild(document.createTextNode(\", \"));\n    afterDiv.appendChild(document.createTextNode(\", \"));\n\n    beforeDiv.appendChild(document.createElement(\"span\"));\n    afterDiv.appendChild(document.createElement(\"span\"));\n\n    // Direct equality comparison doesn't make sense in a bunch of cases.\n    if (command == \"backcolor\" || command == \"forecolor\" || command == \"hilitecolor\") {\n        if (/^([0-9a-fA-F]{3}){1,2}$/.test(value)) {\n            value = \"#\" + value;\n        }\n    } else if (command == \"fontsize\") {\n        value = normalizeFontSize(value);\n        if (value !== null) {\n            value = String(cssSizeToLegacy(value));\n        }\n    } else if (command == \"formatblock\") {\n        value = value.replace(/^<(.*)>$/, \"$1\").toLowerCase();\n    } else if (command == \"defaultparagraphseparator\") {\n        value = value.toLowerCase();\n        if (value != \"p\" && value != \"div\") {\n            value = \"\";\n        }\n    }\n\n    if (((command == \"backcolor\" || command == \"forecolor\" || command == \"hilitecolor\") && value.toLowerCase() == \"currentcolor\")\n    || (command == \"fontsize\" && value === null)\n    || (command == \"formatblock\" && formattableBlockNames.indexOf(value.replace(/^<(.*)>$/, \"$1\").trim()) == -1)\n    || (command == \"defaultparagraphseparator\" && value == \"\")) {\n        afterDiv.lastChild.className = beforeValue === afterValue\n            ? \"good-result\"\n            : \"bad-result\";\n    } else if (/^justify(center|full|left|right)$/.test(command)) {\n        // We know there are only four correct values beforehand, and afterward\n        // the value has to be the one we set.\n        if (!/^(center|justify|left|right)$/.test(beforeValue)) {\n            beforeDiv.lastChild.className = \"bad-result\";\n        }\n        var expectedValue = command == \"justifyfull\"\n            ? \"justify\"\n            : command.replace(\"justify\", \"\");\n        afterDiv.lastChild.className = afterValue === expectedValue\n            ? \"good-result\"\n            : \"bad-result\";\n    } else if (!(\"value\" in commands[command])) {\n        // If it's not defined we want \"\".\n        beforeDiv.lastChild.className = beforeValue === \"\"\n            ? \"good-result\"\n            : \"bad-result\";\n        afterDiv.lastChild.className = afterValue === \"\"\n            ? \"good-result\"\n            : \"bad-result\";\n    } else {\n        // And in all other cases, the value afterwards has to be the one we\n        // set.\n        afterDiv.lastChild.className =\n            areEquivalentValues(command, afterValue, value)\n                ? \"good-result\"\n                : \"bad-result\";\n    }\n    beforeDiv.lastChild.textContent = \"value \" + prettyPrint(beforeValue);\n    afterDiv.lastChild.textContent = \"value \" + prettyPrint(afterValue);\n\n    return frag;\n}\n//@}\n\nfunction normalizeTest(command, test, styleWithCss) {\n//@{\n    // Our standard format for test processing is:\n    //   [input HTML,\n    //     [command1, value1, optional_name_mod],\n    //     [command2, value2, optional_name_mod], ...]\n    // Where `optional_name_mod` is an optionally-specified string used when\n    // generating test names (necessary to ensure uniqueness for command\n    // sequences that use the same command multiple times). This format is\n    // verbose, so we actually use three different formats in the tests and\n    // multiTests arrays:\n    //\n    // 1) Plain string giving the input HTML.  The command is implicit from the\n    // key of the tests array.  If the command takes values, the value is given\n    // by defaultValues, otherwise it's \"\".  Has to be converted to\n    // [input HTML, [command, value].\n    //\n    // 2) Two-element array [value, input HTML].  Has to be converted to\n    // [input HTML, [command, value]].\n    //\n    // 3) An element of multiTests.  This just has to have values filled in.\n    //\n    // Optionally, a styleWithCss argument can be passed, either true or false.\n    // If it is, we'll prepend a styleWithCss invocation.\n    if (command == \"multitest\") {\n        if (typeof test == \"string\") {\n            test = JSON.parse(test);\n        }\n        for (var i = 1; i < test.length; i++) {\n            if (typeof test[i] == \"string\"\n            && test[i] in defaultValues) {\n                test[i] = [test[i], defaultValues[test[i]]];\n            } else if (typeof test[i] == \"string\") {\n                test[i] = [test[i], \"\"];\n            }\n        }\n        return test;\n    }\n\n    if (typeof test == \"string\") {\n        if (command in defaultValues) {\n            test = [test, [command, defaultValues[command]]];\n        } else {\n            test = [test, [command, \"\"]];\n        }\n    } else if (test.length == 2) {\n        test = [test[1], [command, String(test[0])]];\n    }\n\n    if (styleWithCss !== undefined) {\n        test.splice(1, 0, [\"stylewithcss\", String(styleWithCss)]);\n    }\n\n    return test;\n}\n//@}\n\nfunction doInputCell(tr, test, command) {\n//@{\n    var testHtml = test[0];\n\n    var msg = null;\n    if (command in defaultValues) {\n        // Single command with a value, possibly with a styleWithCss stuck\n        // before.  We don't need to specify the command itself, since this\n        // presumably isn't in multiTests, so the command is already given by\n        // the section header.\n        msg = 'value: ' + prettyPrint(test[test.length - 1][1]);\n    } else if (command == \"multitest\") {\n        // Uses a different input format\n        msg = JSON.stringify(test);\n    }\n    var inputCell = document.createElement(\"td\");\n    inputCell.innerHTML = \"<div></div><div></div>\";\n    inputCell.firstChild.innerHTML = testHtml;\n    inputCell.lastChild.textContent = inputCell.firstChild.innerHTML;\n    if (msg !== null) {\n        inputCell.lastChild.textContent += \" (\" + msg + \")\";\n    }\n\n    tr.appendChild(inputCell);\n}\n//@}\n\nfunction doSpecCell(tr, test, command) {\n//@{\n    var specCell = document.createElement(\"td\");\n    tr.appendChild(specCell);\n    try {\n        var points = setupCell(specCell, test[0]);\n        var range = document.createRange();\n        range.setStart(points[0], points[1]);\n        range.setEnd(points[2], points[3]);\n        // The points might be backwards\n        if (range.collapsed) {\n            range.setEnd(points[0], points[1]);\n        }\n        specCell.firstChild.contentEditable = \"true\";\n        specCell.firstChild.spellcheck = false;\n\n        if (command != \"multitest\") {\n            try { var beforeIndeterm = myQueryCommandIndeterm(command, range) }\n            catch(e) { beforeIndeterm = \"Exception\" }\n            try { var beforeState = myQueryCommandState(command, range) }\n            catch(e) { beforeState = \"Exception\" }\n            try { var beforeValue = myQueryCommandValue(command, range) }\n            catch(e) { beforeValue = \"Exception\" }\n        }\n\n        for (var i = 1; i < test.length; i++) {\n            myExecCommand(test[i][0], false, test[i][1], range);\n        }\n\n        if (command != \"multitest\") {\n            try { var afterIndeterm = myQueryCommandIndeterm(command, range) }\n            catch(e) { afterIndeterm = \"Exception\" }\n            try { var afterState = myQueryCommandState(command, range) }\n            catch(e) { afterState = \"Exception\" }\n            try { var afterValue = myQueryCommandValue(command, range) }\n            catch(e) { afterValue = \"Exception\" }\n        }\n\n        specCell.firstChild.contentEditable = \"inherit\";\n        specCell.firstChild.removeAttribute(\"spellcheck\");\n        var compareDiv1 = specCell.firstChild.cloneNode(true);\n\n        // Now do various sanity checks, and throw if they're violated.  First\n        // just count children:\n        if (specCell.childNodes.length != 2) {\n            throw \"The cell didn't have two children.  Did something spill outside the test div?\";\n        }\n\n        // Now verify that the DOM serializes.\n        compareDiv1.normalize();\n        var compareDiv2 = compareDiv1.cloneNode(false);\n        compareDiv2.innerHTML = compareDiv1.innerHTML;\n        // Oddly, IE9 sometimes produces two nodes that return true for\n        // isEqualNode but have different innerHTML (omitting closing tags vs.\n        // not).\n        if (!compareDiv1.isEqualNode(compareDiv2)\n        && compareDiv1.innerHTML != compareDiv2.innerHTML) {\n            throw \"DOM does not round-trip through serialization!  \"\n                + compareDiv1.innerHTML + \" vs. \" + compareDiv2.innerHTML;\n        }\n        if (!compareDiv1.isEqualNode(compareDiv2)) {\n            throw \"DOM does not round-trip through serialization (although innerHTML is the same)!  \"\n                + compareDiv1.innerHTML;\n        }\n\n        // Check for attributes\n        if (specCell.firstChild.attributes.length) {\n            throw \"Wrapper div has attributes!  \" +\n                specCell.innerHTML.replace(/<div><\\/div>$/, \"\");\n        }\n\n        // Final sanity check: make sure everything isAllowedChild() of its\n        // parent.\n        getDescendants(specCell.firstChild).forEach(function(descendant) {\n            if (!isAllowedChild(descendant, descendant.parentNode)) {\n                throw \"Something here is not an allowed child of its parent: \" + descendant;\n            }\n        });\n\n        addBrackets(range);\n\n        specCell.lastChild.textContent = specCell.firstChild.innerHTML;\n        if (command != \"multitest\") {\n            specCell.lastChild.appendChild(queryOutputHelper(\n                beforeIndeterm, beforeState, beforeValue,\n                afterIndeterm, afterState, afterValue,\n                command, test[test.length - 1][1]));\n            if (specCell.querySelector(\".bad-result\")) {\n                specCell.parentNode.className = \"alert\";\n            }\n        }\n    } catch (e) {\n        specCell.firstChild.contentEditable = \"inherit\";\n        specCell.firstChild.removeAttribute(\"spellcheck\");\n        specCell.lastChild.textContent = \"Exception: \" + formatException(e);\n\n        specCell.parentNode.className = \"alert\";\n        specCell.lastChild.className = \"alert\";\n\n        // Don't bother comparing to localStorage, this is always wrong no\n        // matter what.\n        return;\n    }\n\n    if (command != \"multitest\") {\n        // Old storage format\n        var key = \"execcommand-\" + command\n            + \"-\" + (test.length == 2 || test[1][1] == \"false\" ? \"0\" : \"1\")\n            + \"-\" + tr.firstChild.lastChild.textContent;\n    } else {\n        var key = \"execcommand-\" + JSON.stringify(test);\n    }\n\n    // Use getItem() instead of direct property access to work around Firefox\n    // bug: https://bugzilla.mozilla.org/show_bug.cgi?id=532062\n    var oldValue = localStorage.getItem(key);\n    var newValue = specCell.lastChild.firstChild.textContent;\n\n    // Ignore differences between {} and [].\n    if (oldValue === null\n    || oldValue.replace(\"{}\", \"[]\") !== newValue.replace(\"{}\", \"[]\")) {\n        specCell.parentNode.className = \"alert\";\n        var alertDiv = document.createElement(\"div\");\n        specCell.lastChild.appendChild(alertDiv);\n        alertDiv.className = \"alert\";\n        if (oldValue === null) {\n            alertDiv.textContent = \"Newly added test result\";\n        } else if (oldValue.replace(/[\\[\\]{}]/g, \"\") == newValue.replace(/[\\[\\]{}]/g, \"\")) {\n            alertDiv.textContent = \"Last run produced a different selection: \" + oldValue;\n        } else {\n            alertDiv.textContent = \"Last run produced different markup: \" + oldValue;\n        }\n\n        var button = document.createElement(\"button\");\n        alertDiv.appendChild(button);\n        button.textContent = \"Store new result\";\n        button.className = \"store-new-result\";\n        button.onclick = (function(key, val, alertDiv) { return function() {\n            localStorage[key] = val;\n            // Make it easier to do mass updates, and also to jump to the next\n            // new result\n            var buttons = document.getElementsByClassName(\"store-new-result\");\n            for (var i = 0; i < buttons.length; i++) {\n                if (isDescendant(buttons[i], alertDiv)\n                && i + 1 < buttons.length) {\n                    buttons[i + 1].focus();\n                    break;\n                }\n            }\n            var td = alertDiv;\n            while (td.tagName != \"TD\") {\n                td = td.parentNode;\n            }\n            alertDiv.parentNode.removeChild(alertDiv);\n            if (!td.querySelector(\".alert\")) {\n                td.parentNode.className = (\" \" + td.parentNode.className + \" \")\n                    .replace(/ alert /g, \"\")\n                    .replace(/^ | $/g, \"\");\n            }\n        } })(key, newValue, alertDiv);\n    }\n}\n//@}\n\nfunction browserCellException(e, testDiv, browserCell) {\n//@{\n    if (testDiv) {\n        testDiv.contenteditable = \"inherit\";\n        testDiv.removeAttribute(\"spellcheck\");\n    }\n    browserCell.lastChild.className = \"alert\";\n    browserCell.lastChild.textContent = \"Exception: \" + formatException(e);\n    if (testDiv && testDiv.parentNode != browserCell) {\n        browserCell.insertBefore(testDiv, browserCell.firstChild);\n    }\n}\n//@}\n\nfunction formatException(e) {\n//@{\n    if (typeof e == \"object\" && \"stack\" in e) {\n        return e + \" (stack: \" + e.stack + \")\";\n    }\n    return String(e);\n}\n//@}\n\nfunction doSameCell(tr) {\n//@{\n    tr.className = (\" \" + tr.className + \" \").replace(\" active \", \"\").trim();\n    if (tr.className == \"\") {\n        tr.removeAttribute(\"class\");\n    }\n\n    var sameCell = document.createElement(\"td\");\n    if (!document.querySelector(\"#browser-checkbox\").checked) {\n        sameCell.className = \"maybe\";\n        sameCell.textContent = \"?\";\n    } else {\n        var exception = false;\n        try {\n            // Ad hoc normalization to avoid basically spurious mismatches.  For\n            // now this includes ignoring where the selection goes.\n            var normalizedSpecCell = tr.childNodes[1].lastChild.firstChild.textContent\n                .replace(/[[\\]{}]/g, \"\")\n                .replace(/ style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"/g, '')\n                .replace(/ style=\"margin-right: 0px;\" dir=\"ltr\"/g, '')\n                .replace(/ style=\"margin-left: 0px;\" dir=\"rtl\"/g, '')\n                .replace(/ style=\"margin-(left|right): 40px;\"/g, '')\n                .replace(/: /g, \":\")\n                .replace(/;? ?\"/g, '\"')\n                .replace(/<(\\/?)strong/g, '<$1b')\n                .replace(/<(\\/?)strike/g, '<$1s')\n                .replace(/<(\\/?)em/g, '<$1i')\n                .replace(/#[0-9a-fA-F]{6}/g, function(match) { return match.toUpperCase(); });\n            var normalizedBrowserCell = tr.childNodes[2].lastChild.firstChild.textContent\n                .replace(/[[\\]{}]/g, \"\")\n                .replace(/ style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"/g, '')\n                .replace(/ style=\"margin-right: 0px;\" dir=\"ltr\"/g, '')\n                .replace(/ style=\"margin-left: 0px;\" dir=\"rtl\"/g, '')\n                .replace(/ style=\"margin-(left|right): 40px;\"/g, '')\n                .replace(/: /g, \":\")\n                .replace(/;? ?\"/g, '\"')\n                .replace(/<(\\/?)strong/g, '<$1b')\n                .replace(/<(\\/?)strike/g, '<$1s')\n                .replace(/<(\\/?)em/g, '<$1i')\n                .replace(/#[0-9a-fA-F]{6}/g, function(match) { return match.toUpperCase(); })\n                .replace(/ size=\"2\" width=\"100%\"/g, '');\n            if (navigator.userAgent.indexOf(\"MSIE\") != -1) {\n                // IE produces <font style> instead of <span style>, so let's\n                // translate all <span>s to <font>s.\n                normalizedSpecCell = normalizedSpecCell\n                    .replace(/<(\\/?)span/g, '<$1font');\n                normalizedBrowserCell = normalizedBrowserCell\n                    .replace(/<(\\/?)span/g, '<$1font');\n            }\n        } catch (e) {\n            exception = true;\n        }\n        if (!exception && normalizedSpecCell == normalizedBrowserCell) {\n            sameCell.className = \"yes\";\n            sameCell.textContent = \"\\u2713\";\n        } else {\n            sameCell.className = \"no\";\n            sameCell.textContent = \"\\u2717\";\n        }\n    }\n    tr.appendChild(sameCell);\n\n    for (var i = 0; i <= 2; i++) {\n        // Insert <wbr> so IE doesn't stretch the screen.  This is considerably\n        // more complicated than it has to be, thanks to Firefox's lack of\n        // support for outerHTML.\n        var div = tr.childNodes[i].lastChild;\n        if (div.firstChild) {\n            var text = div.firstChild.textContent;\n            div.removeChild(div.firstChild);\n            div.insertBefore(document.createElement(\"div\"), div.firstChild);\n            div.firstChild.innerHTML = text\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"><wbr>\")\n                .replace(/&lt;/g, \"<wbr>&lt;\");\n            while (div.firstChild.hasChildNodes()) {\n                div.insertBefore(div.firstChild.lastChild, div.firstChild.nextSibling);\n            }\n            div.removeChild(div.firstChild);\n        }\n\n        // Add position: absolute span to not affect vertical layout\n        getDescendants(tr.childNodes[i].firstChild)\n        .filter(function(node) {\n            return node.nodeType == Node.TEXT_NODE\n                && /^(\\{\\}?|\\})$/.test(node.data);\n        }).forEach(function(node) {\n            var span = document.createElement(\"span\");\n            span.style.position = \"absolute\";\n            span.textContent = node.data;\n            node.parentNode.insertBefore(span, node);\n            node.parentNode.removeChild(node);\n        });\n    }\n}\n//@}\n\nfunction doTearDown(command) {\n//@{\n    getSelection().removeAllRanges();\n}\n//@}\n\nfunction setupCell(cell, html) {\n//@{\n    cell.innerHTML = \"<div></div><div></div>\";\n\n    return setupDiv(cell.firstChild, html);\n}\n//@}\n\nfunction setupDiv(node, html) {\n//@{\n    // A variety of checks to avoid simple errors.  Not foolproof, of course.\n    var re = /\\{|\\[|data-start/g;\n    var markers = [];\n    var marker;\n    while (marker = re.exec(html)) {\n        markers.push(marker);\n    }\n    if (markers.length != 1) {\n        throw \"Need exactly one start marker ([ or { or data-start), found \" + markers.length;\n    }\n\n    var re = /\\}|\\]|data-end/g;\n    var markers = [];\n    var marker;\n    while (marker = re.exec(html)) {\n        markers.push(marker);\n    }\n    if (markers.length != 1) {\n        throw \"Need exactly one end marker (] or } or data-end), found \" + markers.length;\n    }\n\n    node.innerHTML = html;\n\n    var startNode, startOffset, endNode, endOffset;\n\n    // For braces that don't lie inside text nodes, we can't just set\n    // innerHTML, because that might disturb the DOM.  For instance, if the\n    // brace is right before a <tr>, it could get moved outside the table\n    // entirely, which messes everything up pretty badly.  So we instead\n    // allow using data attributes: data-start and data-end on the start and\n    // end nodes, with a numeric value indicating the offset.  This format\n    // doesn't allow the parent div to be a start or end node, but in that case\n    // you can always use the curly braces.\n    if (node.querySelector(\"[data-start]\")) {\n        startNode = node.querySelector(\"[data-start]\");\n        startOffset = startNode.getAttribute(\"data-start\");\n        startNode.removeAttribute(\"data-start\");\n    }\n    if (node.querySelector(\"[data-end]\")) {\n        endNode = node.querySelector(\"[data-end]\");\n        endOffset = endNode.getAttribute(\"data-end\");\n        endNode.removeAttribute(\"data-end\");\n    }\n\n    var cur = node;\n    while (true) {\n        if (!cur || (cur != node && !(cur.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINS))) {\n            break;\n        }\n\n        if (cur.nodeType != Node.TEXT_NODE) {\n            cur = nextNode(cur);\n            continue;\n        }\n\n        var data = cur.data.replace(/\\]/g, \"\");\n        var startIdx = data.indexOf(\"[\");\n\n        data = cur.data.replace(/\\[/g, \"\");\n        var endIdx = data.indexOf(\"]\");\n\n        cur.data = cur.data.replace(/[\\[\\]]/g, \"\");\n\n        if (startIdx != -1) {\n            startNode = cur;\n            startOffset = startIdx;\n        }\n\n        if (endIdx != -1) {\n            endNode = cur;\n            endOffset = endIdx;\n        }\n\n        // These are only legal as the first or last\n        data = cur.data.replace(/\\}/g, \"\");\n        var elStartIdx = data.indexOf(\"{\");\n\n        data = cur.data.replace(/\\{/g, \"\");\n        var elEndIdx = data.indexOf(\"}\");\n\n        if (elStartIdx == 0) {\n            startNode = cur.parentNode;\n            startOffset = getNodeIndex(cur);\n        } else if (elStartIdx != -1) {\n            startNode = cur.parentNode;\n            startOffset = getNodeIndex(cur) + 1;\n        }\n        if (elEndIdx == 0) {\n            endNode = cur.parentNode;\n            endOffset = getNodeIndex(cur);\n        } else if (elEndIdx != -1) {\n            endNode = cur.parentNode;\n            endOffset = getNodeIndex(cur) + 1;\n        }\n\n        cur.data = cur.data.replace(/[{}]/g, \"\");\n        if (!cur.data.length) {\n            if (cur == startNode || cur == endNode) {\n                throw \"You put a square bracket where there was no text node . . .\";\n            }\n            var oldCur = cur;\n            cur = nextNode(cur);\n            oldCur.parentNode.removeChild(oldCur);\n        } else {\n            cur = nextNode(cur);\n        }\n    }\n\n    return [startNode, startOffset, endNode, endOffset];\n}\n//@}\n\nfunction setSelection(startNode, startOffset, endNode, endOffset) {\n//@{\n    if (navigator.userAgent.indexOf(\"Opera\") != -1) {\n        // Yes, browser sniffing is evil, but I can't be bothered to debug\n        // Opera.\n        var range = document.createRange();\n        range.setStart(startNode, startOffset);\n        range.setEnd(endNode, endOffset);\n        if (range.collapsed) {\n            range.setEnd(startNode, startOffset);\n        }\n        getSelection().removeAllRanges();\n        getSelection().addRange(range);\n    } else if (\"extend\" in getSelection()) {\n        // WebKit behaves unreasonably for collapse(), so do that manually.\n        /*\n        var range = document.createRange();\n        range.setStart(startNode, startOffset);\n        getSelection().removeAllRanges();\n        getSelection().addRange(range);\n        */\n        getSelection().collapse(startNode, startOffset);\n        getSelection().extend(endNode, endOffset);\n    } else {\n        // IE9.  Selections have no direction, so we just make the selection\n        // always forwards.\n        var range;\n        if (getSelection().rangeCount) {\n            range = getSelection().getRangeAt(0);\n        } else {\n            range = document.createRange();\n        }\n        range.setStart(startNode, startOffset);\n        range.setEnd(endNode, endOffset);\n        if (range.collapsed) {\n            // Phooey, we got them backwards.\n            range.setEnd(startNode, startOffset);\n        }\n        if (!getSelection().rangeCount) {\n            getSelection().addRange(range);\n        }\n    }\n}\n//@}\n\n/**\n * Add brackets at the start and end points of the given range, so that they're\n * visible.\n */\nfunction addBrackets(range) {\n//@{\n    // Handle the collapsed case specially, to avoid confusingly getting the\n    // markers backwards in some cases\n    if (range.startContainer.nodeType == Node.TEXT_NODE\n    || range.startContainer.nodeType == Node.COMMENT_NODE) {\n        if (range.collapsed) {\n            range.startContainer.insertData(range.startOffset, \"[]\");\n        } else {\n            range.startContainer.insertData(range.startOffset, \"[\");\n        }\n    } else {\n        var marker = range.collapsed ? \"{}\" : \"{\";\n        if (range.startOffset != range.startContainer.childNodes.length\n        && range.startContainer.childNodes[range.startOffset].nodeType == Node.TEXT_NODE) {\n            range.startContainer.childNodes[range.startOffset].insertData(0, marker);\n        } else if (range.startOffset != 0\n        && range.startContainer.childNodes[range.startOffset - 1].nodeType == Node.TEXT_NODE) {\n            range.startContainer.childNodes[range.startOffset - 1].appendData(marker);\n        } else {\n            // Seems to serialize as I'd want even for tables . . . IE doesn't\n            // allow undefined to be passed as the second argument (it throws\n            // an exception), so we have to explicitly check the number of\n            // children and pass null.\n            range.startContainer.insertBefore(document.createTextNode(marker),\n                range.startContainer.childNodes.length == range.startOffset\n                ? null\n                : range.startContainer.childNodes[range.startOffset]);\n        }\n    }\n    if (range.collapsed) {\n        return;\n    }\n    if (range.endContainer.nodeType == Node.TEXT_NODE\n    || range.endContainer.nodeType == Node.COMMENT_NODE) {\n        range.endContainer.insertData(range.endOffset, \"]\");\n    } else {\n        if (range.endOffset != range.endContainer.childNodes.length\n        && range.endContainer.childNodes[range.endOffset].nodeType == Node.TEXT_NODE) {\n            range.endContainer.childNodes[range.endOffset].insertData(0, \"}\");\n        } else if (range.endOffset != 0\n        && range.endContainer.childNodes[range.endOffset - 1].nodeType == Node.TEXT_NODE) {\n            range.endContainer.childNodes[range.endOffset - 1].appendData(\"}\");\n        } else {\n            range.endContainer.insertBefore(document.createTextNode(\"}\"),\n                range.endContainer.childNodes.length == range.endOffset\n                ? null\n                : range.endContainer.childNodes[range.endOffset]);\n        }\n    }\n}\n//@}\n\nfunction normalizeSerializedStyle(wrapper) {\n//@{\n    // Inline CSS attribute serialization has terrible interop, so we fix\n    // things up a bit to avoid spurious mismatches.  This needs to be removed\n    // once CSSOM defines this stuff properly, but for now there's just no\n    // standard for any of it.  This only normalizes descendants of wrapper,\n    // not wrapper itself.\n    [].forEach.call(wrapper.querySelectorAll(\"[style]\"), function(node) {\n        if (node.style.color != \"\") {\n            var newColor = normalizeColor(node.style.color);\n            node.style.color = \"\";\n            node.style.color = newColor;\n        }\n        if (node.style.backgroundColor != \"\") {\n            var newBackgroundColor = normalizeColor(node.style.backgroundColor);\n            node.style.backgroundColor = \"\";\n            node.style.backgroundColor = newBackgroundColor;\n        }\n        node.setAttribute(\"style\", node.getAttribute(\"style\")\n            // Random spacing differences\n            .replace(/; ?$/, \"\")\n            .replace(/: /g, \":\")\n            // Gecko likes \"transparent\"\n            .replace(/transparent/g, \"rgba(0, 0, 0, 0)\")\n            // WebKit likes to look overly precise\n            .replace(/, 0.496094\\)/g, \", 0.5)\")\n            // Gecko converts anything with full alpha to \"transparent\" which\n            // then becomes \"rgba(0, 0, 0, 0)\", so we have to make other\n            // browsers match\n            .replace(/rgba\\([0-9]+, [0-9]+, [0-9]+, 0\\)/g, \"rgba(0, 0, 0, 0)\")\n        );\n    });\n}\n//@}\n\n/**\n * Input is in the following format:\n *   [input HTML,\n *    array of commands,\n *    expected output HTML,\n *    array of expected execCommand() return values,\n *    object of expected indeterm/state/value].\n * The array of commands is [[command, value, optionalDesc], [command, value,\n * optionalDesc], ...].  optionalDesc is appended to the description of the\n * test in the generated test name.\n *\n * The\n * array of expected execCommand() return values is [true|false, true|false,\n * ...], where the indices match those in the array of commands.  The\n * indeterm/state/value object is of the form\n *   {command: [expected indeterm before, expected state before,\n *     expected value before, expected indeterm after,\n *     expected state after, expected value after],\n *   command: ... }\n * null for any of the last six entries means an INVALID_ACCESS_ERR must be\n * raised.\n */\nfunction runConformanceTest(browserTest) {\n//@{\n    document.getElementById(\"test-container\").innerHTML = \"<div contenteditable></div><p>test\";\n    var testName = JSON.stringify(browserTest[1]) + \" \" + format_value(browserTest[0]);\n    var testDiv = document.querySelector(\"div[contenteditable]\");\n    var originalRootElement, newRootElement;\n    var exception = null;\n    var expectedExecCommandReturnValues = browserTest[3];\n    var expectedQueryResults = browserTest[4];\n    var actualQueryResults = {};\n    var actualQueryExceptions = {};\n    var subtestName;\n\n    try {\n        var points = setupDiv(testDiv, browserTest[0]);\n\n        var range = document.createRange();\n        range.setStart(points[0], points[1]);\n        range.setEnd(points[2], points[3]);\n        // The points might be backwards\n        if (range.collapsed) {\n            range.setEnd(points[0], points[1]);\n        }\n        getSelection().removeAllRanges();\n        getSelection().addRange(range);\n\n        var originalRootElement = document.documentElement.cloneNode(true);\n        originalRootElement.querySelector(\"[contenteditable]\").parentNode\n            .removeChild(originalRootElement.querySelector(\"[contenteditable]\"));\n        originalRootElement.querySelector(\"#log\").parentNode\n            .removeChild(originalRootElement.querySelector(\"#log\"));\n\n        for (var command in expectedQueryResults) {\n            var results = [];\n            var exceptions = {};\n            try { results[0] = document.queryCommandIndeterm(command) }\n            catch(e) { exceptions[0] = e }\n            try { results[1] = document.queryCommandState(command) }\n            catch(e) { exceptions[1] = e }\n            try { results[2] = document.queryCommandValue(command) }\n            catch(e) { exceptions[2] = e }\n            actualQueryResults[command] = results;\n            actualQueryExceptions[command] = exceptions;\n        }\n    } catch(e) {\n        exception = e;\n    }\n\n    for (var i = 0; i < browserTest[1].length; i++) {\n        subtestName = testName + \": execCommand(\" +\n            format_value(browserTest[1][i][0]) + \", false, \" +\n            format_value(browserTest[1][i][1]) + \") \" +\n            (browserTest[1][i][2] ? browserTest[1][i][2] + \" \" : \"\") +\n            \"return value\"\n        subsetTest(test, function() {\n            assert_equals(exception, null, \"Setup must not throw an exception\");\n\n            assert_equals(document.execCommand(browserTest[1][i][0], false, browserTest[1][i][1]),\n                expectedExecCommandReturnValues[i]);\n        }, subtestName);\n    }\n\n    if (exception === null) {\n        try {\n            for (var command in expectedQueryResults) {\n                var results = actualQueryResults[command];\n                var exceptions = actualQueryExceptions[command];\n                try { results[3] = document.queryCommandIndeterm(command) }\n                catch(e) { exceptions[3] = e }\n                try { results[4] = document.queryCommandState(command) }\n                catch(e) { exceptions[4] = e }\n                try { results[5] = document.queryCommandValue(command) }\n                catch(e) { exceptions[5] = e }\n            }\n\n            var newRootElement = document.documentElement.cloneNode(true);\n            newRootElement.querySelector(\"[contenteditable]\").parentNode\n                .removeChild(newRootElement.querySelector(\"[contenteditable]\"));\n            newRootElement.querySelector(\"#log\").parentNode\n                .removeChild(newRootElement.querySelector(\"#log\"));\n\n            normalizeSerializedStyle(testDiv);\n        } catch(e) {\n            exception = e;\n        }\n    }\n\n    subsetTest(test, function() {\n        assert_equals(exception, null, \"Setup must not throw an exception\");\n\n        // Now test for modifications to non-editable content.  First just\n        // count children:\n        assert_equals(testDiv.parentNode.childNodes.length, 2,\n            \"The parent div must have two children.  Did something spill outside the test div?\");\n\n        // Check for attributes\n        assert_equals(testDiv.attributes.length, 1,\n            'Wrapper div must have only one attribute (<div contenteditable=\"\">), but has more (' +\n            formatStartTag(testDiv) + \")\");\n\n        assert_equals(document.body.attributes.length, 0,\n            \"Body element must have no attributes (<body>), but has more (\" +\n            formatStartTag(document.body) + \")\");\n\n        // Check that in general, nothing outside the test div was modified.\n        // TODO: Less verbose error reporting, the way some of the range tests\n        // do?\n        assert_equals(newRootElement.innerHTML, originalRootElement.innerHTML,\n            \"Everything outside the editable div must be unchanged, but some change did occur\");\n    }, testName + \" checks for modifications to non-editable content\");\n\n    subsetTest(test, function() {\n        assert_equals(exception, null, \"Setup must not throw an exception\");\n\n        if (Array.isArray(browserTest[2])) {\n          var expectedInnerHTMLArray = [];\n          browserTest[2].forEach(function (expectedInnerHTML) {\n            expectedInnerHTMLArray.push(expectedInnerHTML.replace(/[\\[\\]{}]/g, \"\"));\n          });\n          assert_in_array(testDiv.innerHTML,\n               expectedInnerHTMLArray,\n               \"Unexpected innerHTML (after normalizing inline style)\");\n        } else {\n          assert_equals(testDiv.innerHTML,\n              browserTest[2].replace(/[\\[\\]{}]/g, \"\"),\n              \"Unexpected innerHTML (after normalizing inline style)\");\n        }\n    }, testName + \" compare innerHTML\");\n\n    for (var command in expectedQueryResults) {\n        var descriptions = [\n            'queryCommandIndeterm(\"' + command + '\") before',\n            'queryCommandState(\"' + command + '\") before',\n            'queryCommandValue(\"' + command + '\") before',\n            'queryCommandIndeterm(\"' + command + '\") after',\n            'queryCommandState(\"' + command + '\") after',\n            'queryCommandValue(\"' + command + '\") after',\n        ];\n        for (var i = 0; i < 6; i++) {\n            subsetTest(test, function() {\n                assert_equals(exception, null, \"Setup must not throw an exception\");\n\n                if (expectedQueryResults[command][i] === null) {\n                    // Some ad hoc tests to verify that we have a real\n                    // DOMException.  FIXME: This should be made more rigorous,\n                    // with clear steps specified for checking that something\n                    // is really a DOMException.\n                    assert_true(i in actualQueryExceptions[command],\n                        \"An exception must be thrown in this case\");\n                    var e = actualQueryExceptions[command][i];\n                    assert_equals(typeof e, \"object\",\n                        \"typeof thrown object\");\n                    assert_idl_attribute(e, \"code\",\n                        \"Thrown object must be a DOMException\");\n                    assert_idl_attribute(e, \"INVALID_ACCESS_ERR\",\n                        \"Thrown object must be a DOMException\");\n                    assert_equals(e.code, e.INVALID_ACCESS_ERR,\n                        \"Thrown object must be an INVALID_ACCESS_ERR, so its .code and .INVALID_ACCESS_ERR attributes must be equal\");\n                } else if ((i == 2 || i == 5)\n                && (command == \"backcolor\" || command == \"forecolor\" || command == \"hilitecolor\")\n                && typeof actualQueryResults[command][i] == \"string\") {\n                    assert_false(i in actualQueryExceptions[command],\n                        \"An exception must not be thrown in this case\");\n                    // We don't return the format that the color should be in:\n                    // that's up to CSSOM.  Thus we normalize before comparing.\n                    assert_equals(normalizeColor(actualQueryResults[command][i]),\n                        expectedQueryResults[command][i],\n                        \"Wrong result returned (after color normalization)\");\n                } else {\n                    assert_false(i in actualQueryExceptions[command],\n                        \"An exception must not be thrown in this case\");\n                    assert_equals(actualQueryResults[command][i],\n                        expectedQueryResults[command][i],\n                        \"Wrong result returned\");\n                }\n            }, testName + \" \" + descriptions[i]);\n        }\n    }\n\n    // Silly Firefox\n    document.body.removeAttribute(\"bgcolor\");\n}\n//@}\n\n/**\n * Return a string like '<body bgcolor=\"#FFFFFF\">'.\n */\nfunction formatStartTag(el) {\n//@{\n    var ret = \"<\" + el.tagName.toLowerCase();\n    for (var i = 0; i < el.attributes.length; i++) {\n        ret += \" \" + el.attributes[i].name + '=\"';\n        ret += el.attributes[i].value.replace(/\\&/g, \"&amp;\")\n            .replace(/\"/g, \"&quot;\");\n        ret += '\"';\n    }\n    return ret + \">\";\n}\n//@}\n\n// vim: foldmarker=@{,@} foldmethod=marker\n"},{"url":"http://web-platform.test:8000/common/subset-tests.js","request_start":1696814057.539385,"response_start":1696814057.5716145,"request_end":1696814057.5417535,"response_end":1696814057.5731692,"ts":1696814057.5738573,"body":"(function() {\n  var subTestStart = 0;\n  var subTestEnd = Infinity;\n  var match;\n  if (location.search) {\n    match = /(?:^\\?|&)(\\d+)-(\\d+|last)(?:&|$)/.exec(location.search);\n    if (match) {\n      subTestStart = parseInt(match[1], 10);\n      if (match[2] !== \"last\") {\n          subTestEnd = parseInt(match[2], 10);\n      }\n    }\n    // Below is utility code to generate <meta> for copy/paste into tests.\n    // Sample usage:\n    // test.html?split=1000\n    match = /(?:^\\?|&)split=(\\d+)(?:&|$)/.exec(location.search);\n    if (match) {\n      var testsPerVariant = parseInt(match[1], 10);\n      add_completion_callback(tests => {\n        var total = tests.length;\n        var template = '<meta name=\"variant\" content=\"?%s-%s\">';\n        var metas = [];\n        for (var i = 1; i < total - testsPerVariant; i = i + testsPerVariant) {\n          metas.push(template.replace(\"%s\", i).replace(\"%s\", i + testsPerVariant - 1));\n        }\n        metas.push(template.replace(\"%s\", i).replace(\"%s\", \"last\"));\n        var pre = document.createElement('pre');\n        pre.textContent = metas.join('\\n');\n        document.body.insertBefore(pre, document.body.firstChild);\n        document.getSelection().selectAllChildren(pre);\n      });\n    }\n  }\n  /**\n   * Check if `currentSubTest` is in the subset specified in the URL.\n   * @param {number} currentSubTest\n   * @returns {boolean}\n   */\n  function shouldRunSubTest(currentSubTest) {\n    return currentSubTest >= subTestStart && currentSubTest <= subTestEnd;\n  }\n  var currentSubTest = 0;\n  /**\n   * Only test a subset of tests with, e.g., `?1-10` in the URL.\n   * Can be used together with `<meta name=\"variant\" content=\"...\">`\n   * Sample usage:\n   * for (const test of tests) {\n   *   subsetTest(async_test, test.fn, test.name);\n   * }\n   */\n  function subsetTest(testFunc, ...args) {\n    currentSubTest++;\n    if (shouldRunSubTest(currentSubTest)) {\n      return testFunc(...args);\n    }\n    return null;\n  }\n  self.shouldRunSubTest = shouldRunSubTest;\n  self.subsetTest = subsetTest;\n})();\n"},{"url":"http://web-platform.test:8000/editing/data/insertimage.js","request_start":1696814057.5365202,"response_start":1696814057.5718036,"request_end":1696814057.540697,"response_end":1696814057.5732543,"ts":1696814057.5744224,"body":"// For documentation of the format, see README in this directory.\nvar browserTests = [\n[\"foo[]bar\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<span>foo</span>{}<span>bar</span>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<span>foo</span><img src=\\\"/img/lion.svg\\\">{}<span>bar</span>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<span>foo[</span><span>]bar</span>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<span>foo<img src=\\\"/img/lion.svg\\\">{}</span><span>bar</span>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[bar]baz\",\n    [[\"insertimage\",\"\"]],\n    \"foo[bar]baz\",\n    [false],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[bar]baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>[bar]</span>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>{bar}</span>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo{<span style=color:#aBcDeF>bar</span>}baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"[foo<span style=color:#aBcDeF>bar]</span>baz\",\n    [[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<img src=\\\"/img/lion.svg\\\">{}baz\",\n    [true,true],\n    {\"stylewithcss\":[false,false,\"\",false,true,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"[foo<span style=color:#aBcDeF>bar]</span>baz\",\n    [[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<img src=\\\"/img/lion.svg\\\">{}baz\",\n    [true,true],\n    {\"stylewithcss\":[false,true,\"\",false,false,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"{foo<span style=color:#aBcDeF>bar}</span>baz\",\n    [[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<img src=\\\"/img/lion.svg\\\">{}baz\",\n    [true,true],\n    {\"stylewithcss\":[false,false,\"\",false,true,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"{foo<span style=color:#aBcDeF>bar}</span>baz\",\n    [[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<img src=\\\"/img/lion.svg\\\">{}baz\",\n    [true,true],\n    {\"stylewithcss\":[false,true,\"\",false,false,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>[bar</span>baz]\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>{bar</span>baz}\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\",\n    [[\"stylewithcss\",\"true\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>quz\",\n    [true,true],\n    {\"stylewithcss\":[false,false,\"\",false,true,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span style=color:#aBcDeF>[bar</span><span style=color:#fEdCbA>baz]</span>quz\",\n    [[\"stylewithcss\",\"false\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span style=\\\"color:rgb(171, 205, 239)\\\"><img src=\\\"/img/lion.svg\\\">{}</span>quz\",\n    [true,true],\n    {\"stylewithcss\":[false,true,\"\",false,false,\"\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<b>[bar]</b>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<b><img src=\\\"/img/lion.svg\\\">{}</b>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<b>{bar}</b>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<b><img src=\\\"/img/lion.svg\\\">{}</b>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo{<b>bar</b>}baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<b><img src=\\\"/img/lion.svg\\\">{}</b>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span>[bar]</span>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo<span>{bar}</span>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo{<span>bar</span>}baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<span><img src=\\\"/img/lion.svg\\\">{}</span>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<b>foo[bar</b><i>baz]quz</i>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<b>foo<img src=\\\"/img/lion.svg\\\">{}</b><i>quz</i>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo</p><p>[bar]</p><p>baz</p>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo</p><p><img src=\\\"/img/lion.svg\\\">{}</p><p>baz</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo</p><p>{bar}</p><p>baz</p>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo</p><p><img src=\\\"/img/lion.svg\\\">{}</p><p>baz</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo</p>{<p>bar</p>}<p>baz</p>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo</p><img src=\\\"/img/lion.svg\\\">{}<p>baz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo</p>{<p>bar</p>}<p>baz</p>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo</p><img src=\\\"/img/lion.svg\\\">{}<p>baz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<div>baz]quz</div>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<div>baz]quz</div>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<h1>baz]quz</h1>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div>foo[bar</div><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div>foo<img src=\\\"/img/lion.svg\\\">{}quz</div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div>foo[bar</div><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div>foo<img src=\\\"/img/lion.svg\\\">{}quz</div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<blockquote>foo[bar</blockquote><pre>baz]quz</pre>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<blockquote>foo<img src=\\\"/img/lion.svg\\\">{}quz</blockquote>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p><b>foo[bar</b><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p><b>foo</b><img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p><b>foo[bar</b><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p><b>foo</b><img src=\\\"/img/lion.svg\\\">{}quz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo[bar</div><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p></div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo[bar</div><p>baz]quz\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p></div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p><blockquote><p>qoz</p></blockquote>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<blockquote><p>baz]quz<p>qoz</blockquote\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}quz</p><blockquote><p>qoz</p></blockquote>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p style=color:blue>baz]quz\",\n    [[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<span style=\\\"color:rgb(0, 0, 255)\\\">quz</span></p>\",\n    [true,true,true],\n    {\"stylewithcss\":[false,false,\"\",false,true,\"\"],\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p style=color:blue>baz]quz\",\n    [[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<font color=\\\"#0000ff\\\">quz</font></p>\",\n    [true,true,true],\n    {\"stylewithcss\":[false,true,\"\",false,false,\"\"],\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p style=color:blue>baz]quz\",\n    [[\"stylewithcss\",\"true\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<span style=\\\"color:rgb(0, 0, 255)\\\">quz</span></p>\",\n    [true,true,true],\n    {\"stylewithcss\":[false,false,\"\",false,true,\"\"],\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p style=color:blue>baz]quz\",\n    [[\"stylewithcss\",\"false\"],[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<font color=\\\"#0000ff\\\">quz</font></p>\",\n    [true,true,true],\n    {\"stylewithcss\":[false,true,\"\",false,false,\"\"],\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p><b>baz]quz</b>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<b>quz</b></p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[bar<p><b>baz]quz</b>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}<b>quz</b></p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo<p>[bar<p>baz]</div>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo</p><p><img src=\\\"/img/lion.svg\\\">{}</p></div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo<p>[bar<p>baz]</div>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo</p><p><img src=\\\"/img/lion.svg\\\">{}</p></div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<br>]bar\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p><p>]bar</p>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p><p>]bar</p>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p><p>]bar<br>baz</p>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar<br>baz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p><p>]bar<br>baz</p>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar<br>baz</p>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<p>]bar</p>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<p>]bar</p>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<p>]bar<br>baz</p>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<p>baz</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<p>]bar</p>baz\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<br>baz\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<p>]bar</p>baz\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<br>baz\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p>]bar\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p>]bar<br>baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p>baz\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<p>foo[</p>]bar<p>baz</p>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p><p>baz</p>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<div><p>]bar</div>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<div><p>]bar</div>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo[</p></div>]bar\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo<img src=\\\"/img/lion.svg\\\">{}bar</p></div>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<div><p>]bar</p>baz</div>\",\n    [[\"defaultparagraphseparator\",\"div\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<div>baz</div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"p\",false,false,\"div\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<div><p>]bar</p>baz</div>\",\n    [[\"defaultparagraphseparator\",\"p\"],[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<div>baz</div>\",\n    [true,true],\n    {\"defaultparagraphseparator\":[false,false,\"div\",false,false,\"p\"],\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[<div>]bar<p>baz</p></div>\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"foo<img src=\\\"/img/lion.svg\\\">{}bar<div><p>baz</p></div>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div><p>foo</p>bar[</div>]baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div><p>foo</p>bar<img src=\\\"/img/lion.svg\\\">{}baz</div>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"<div>foo<p>bar[</p></div>]baz\",\n    [[\"insertimage\",\"/img/lion.svg\"]],\n    \"<div>foo<p>bar<img src=\\\"/img/lion.svg\\\">{}baz</p></div>\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n[\"foo[]bar\",\n    [[\"insertimage\",\"/\\u65E5\\u672C\\u8A9E\\u30D1\\u30B9/lion.svg\"]],\n    \"foo<img src=\\\"/\\u65E5\\u672C\\u8A9E\\u30D1\\u30B9/lion.svg\\\">{}bar\",\n    [true],\n    {\"insertimage\":[false,false,\"\",false,false,\"\"]}],\n]\n"},{"url":"http://web-platform.test:8000/resources/testharness.js","request_start":1696814057.5369823,"response_start":1696814057.5719645,"request_end":1696814057.5409174,"response_end":1696814057.575782,"ts":1696814057.5762622,"body":"/*global self*/\n/*jshint latedef: nofunc*/\n\n/* Documentation: https://web-platform-tests.org/writing-tests/testharness-api.html\n * (../docs/_writing-tests/testharness-api.md) */\n\n(function (global_scope)\n{\n    // default timeout is 10 seconds, test can override if needed\n    var settings = {\n        output:true,\n        harness_timeout:{\n            \"normal\":10000,\n            \"long\":60000\n        },\n        test_timeout:null,\n        message_events: [\"start\", \"test_state\", \"result\", \"completion\"],\n        debug: false,\n    };\n\n    var xhtml_ns = \"http://www.w3.org/1999/xhtml\";\n\n    /*\n     * TestEnvironment is an abstraction for the environment in which the test\n     * harness is used. Each implementation of a test environment has to provide\n     * the following interface:\n     *\n     * interface TestEnvironment {\n     *   // Invoked after the global 'tests' object has been created and it's\n     *   // safe to call add_*_callback() to register event handlers.\n     *   void on_tests_ready();\n     *\n     *   // Invoked after setup() has been called to notify the test environment\n     *   // of changes to the test harness properties.\n     *   void on_new_harness_properties(object properties);\n     *\n     *   // Should return a new unique default test name.\n     *   DOMString next_default_test_name();\n     *\n     *   // Should return the test harness timeout duration in milliseconds.\n     *   float test_timeout();\n     * };\n     */\n\n    /*\n     * A test environment with a DOM. The global object is 'window'. By default\n     * test results are displayed in a table. Any parent windows receive\n     * callbacks or messages via postMessage() when test events occur. See\n     * apisample11.html and apisample12.html.\n     */\n    function WindowTestEnvironment() {\n        this.name_counter = 0;\n        this.window_cache = null;\n        this.output_handler = null;\n        this.all_loaded = false;\n        var this_obj = this;\n        this.message_events = [];\n        this.dispatched_messages = [];\n\n        this.message_functions = {\n            start: [add_start_callback, remove_start_callback,\n                    function (properties) {\n                        this_obj._dispatch(\"start_callback\", [properties],\n                                           {type: \"start\", properties: properties});\n                    }],\n\n            test_state: [add_test_state_callback, remove_test_state_callback,\n                         function(test) {\n                             this_obj._dispatch(\"test_state_callback\", [test],\n                                                {type: \"test_state\",\n                                                 test: test.structured_clone()});\n                         }],\n            result: [add_result_callback, remove_result_callback,\n                     function (test) {\n                         this_obj.output_handler.show_status();\n                         this_obj._dispatch(\"result_callback\", [test],\n                                            {type: \"result\",\n                                             test: test.structured_clone()});\n                     }],\n            completion: [add_completion_callback, remove_completion_callback,\n                         function (tests, harness_status, asserts) {\n                             var cloned_tests = map(tests, function(test) {\n                                 return test.structured_clone();\n                             });\n                             this_obj._dispatch(\"completion_callback\", [tests, harness_status],\n                                                {type: \"complete\",\n                                                 tests: cloned_tests,\n                                                 status: harness_status.structured_clone(),\n                                                 asserts: asserts.map(assert => assert.structured_clone())});\n                         }]\n        }\n\n        on_event(window, 'load', function() {\n            this_obj.all_loaded = true;\n        });\n\n        on_event(window, 'message', function(event) {\n            if (event.data && event.data.type === \"getmessages\" && event.source) {\n                // A window can post \"getmessages\" to receive a duplicate of every\n                // message posted by this environment so far. This allows subscribers\n                // from fetch_tests_from_window to 'catch up' to the current state of\n                // this environment.\n                for (var i = 0; i < this_obj.dispatched_messages.length; ++i)\n                {\n                    event.source.postMessage(this_obj.dispatched_messages[i], \"*\");\n                }\n            }\n        });\n    }\n\n    WindowTestEnvironment.prototype._dispatch = function(selector, callback_args, message_arg) {\n        this.dispatched_messages.push(message_arg);\n        this._forEach_windows(\n                function(w, same_origin) {\n                    if (same_origin) {\n                        try {\n                            var has_selector = selector in w;\n                        } catch(e) {\n                            // If document.domain was set at some point same_origin can be\n                            // wrong and the above will fail.\n                            has_selector = false;\n                        }\n                        if (has_selector) {\n                            try {\n                                w[selector].apply(undefined, callback_args);\n                            } catch (e) {}\n                        }\n                    }\n                    if (w !== self) {\n                        w.postMessage(message_arg, \"*\");\n                    }\n                });\n    };\n\n    WindowTestEnvironment.prototype._forEach_windows = function(callback) {\n        // Iterate over the windows [self ... top, opener]. The callback is passed\n        // two objects, the first one is the window object itself, the second one\n        // is a boolean indicating whether or not it's on the same origin as the\n        // current window.\n        var cache = this.window_cache;\n        if (!cache) {\n            cache = [[self, true]];\n            var w = self;\n            var i = 0;\n            var so;\n            while (w != w.parent) {\n                w = w.parent;\n                so = is_same_origin(w);\n                cache.push([w, so]);\n                i++;\n            }\n            w = window.opener;\n            if (w) {\n                cache.push([w, is_same_origin(w)]);\n            }\n            this.window_cache = cache;\n        }\n\n        forEach(cache,\n                function(a) {\n                    callback.apply(null, a);\n                });\n    };\n\n    WindowTestEnvironment.prototype.on_tests_ready = function() {\n        var output = new Output();\n        this.output_handler = output;\n\n        var this_obj = this;\n\n        add_start_callback(function (properties) {\n            this_obj.output_handler.init(properties);\n        });\n\n        add_test_state_callback(function(test) {\n            this_obj.output_handler.show_status();\n        });\n\n        add_result_callback(function (test) {\n            this_obj.output_handler.show_status();\n        });\n\n        add_completion_callback(function (tests, harness_status, asserts_run) {\n            this_obj.output_handler.show_results(tests, harness_status, asserts_run);\n        });\n        this.setup_messages(settings.message_events);\n    };\n\n    WindowTestEnvironment.prototype.setup_messages = function(new_events) {\n        var this_obj = this;\n        forEach(settings.message_events, function(x) {\n            var current_dispatch = this_obj.message_events.indexOf(x) !== -1;\n            var new_dispatch = new_events.indexOf(x) !== -1;\n            if (!current_dispatch && new_dispatch) {\n                this_obj.message_functions[x][0](this_obj.message_functions[x][2]);\n            } else if (current_dispatch && !new_dispatch) {\n                this_obj.message_functions[x][1](this_obj.message_functions[x][2]);\n            }\n        });\n        this.message_events = new_events;\n    }\n\n    WindowTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    WindowTestEnvironment.prototype.on_new_harness_properties = function(properties) {\n        this.output_handler.setup(properties);\n        if (properties.hasOwnProperty(\"message_events\")) {\n            this.setup_messages(properties.message_events);\n        }\n    };\n\n    WindowTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        on_event(window, 'load', callback);\n    };\n\n    WindowTestEnvironment.prototype.test_timeout = function() {\n        var metas = document.getElementsByTagName(\"meta\");\n        for (var i = 0; i < metas.length; i++) {\n            if (metas[i].name == \"timeout\") {\n                if (metas[i].content == \"long\") {\n                    return settings.harness_timeout.long;\n                }\n                break;\n            }\n        }\n        return settings.harness_timeout.normal;\n    };\n\n    /*\n     * Base TestEnvironment implementation for a generic web worker.\n     *\n     * Workers accumulate test results. One or more clients can connect and\n     * retrieve results from a worker at any time.\n     *\n     * WorkerTestEnvironment supports communicating with a client via a\n     * MessagePort.  The mechanism for determining the appropriate MessagePort\n     * for communicating with a client depends on the type of worker and is\n     * implemented by the various specializations of WorkerTestEnvironment\n     * below.\n     *\n     * A client document using testharness can use fetch_tests_from_worker() to\n     * retrieve results from a worker. See apisample16.html.\n     */\n    function WorkerTestEnvironment() {\n        this.name_counter = 0;\n        this.all_loaded = true;\n        this.message_list = [];\n        this.message_ports = [];\n    }\n\n    WorkerTestEnvironment.prototype._dispatch = function(message) {\n        this.message_list.push(message);\n        for (var i = 0; i < this.message_ports.length; ++i)\n        {\n            this.message_ports[i].postMessage(message);\n        }\n    };\n\n    // The only requirement is that port has a postMessage() method. It doesn't\n    // have to be an instance of a MessagePort, and often isn't.\n    WorkerTestEnvironment.prototype._add_message_port = function(port) {\n        this.message_ports.push(port);\n        for (var i = 0; i < this.message_list.length; ++i)\n        {\n            port.postMessage(this.message_list[i]);\n        }\n    };\n\n    WorkerTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    WorkerTestEnvironment.prototype.on_new_harness_properties = function() {};\n\n    WorkerTestEnvironment.prototype.on_tests_ready = function() {\n        var this_obj = this;\n        add_start_callback(\n                function(properties) {\n                    this_obj._dispatch({\n                        type: \"start\",\n                        properties: properties,\n                    });\n                });\n        add_test_state_callback(\n                function(test) {\n                    this_obj._dispatch({\n                        type: \"test_state\",\n                        test: test.structured_clone()\n                    });\n                });\n        add_result_callback(\n                function(test) {\n                    this_obj._dispatch({\n                        type: \"result\",\n                        test: test.structured_clone()\n                    });\n                });\n        add_completion_callback(\n                function(tests, harness_status, asserts) {\n                    this_obj._dispatch({\n                        type: \"complete\",\n                        tests: map(tests,\n                            function(test) {\n                                return test.structured_clone();\n                            }),\n                        status: harness_status.structured_clone(),\n                        asserts: asserts.map(assert => assert.structured_clone()),\n                    });\n                });\n    };\n\n    WorkerTestEnvironment.prototype.add_on_loaded_callback = function() {};\n\n    WorkerTestEnvironment.prototype.test_timeout = function() {\n        // Tests running in a worker don't have a default timeout. I.e. all\n        // worker tests behave as if settings.explicit_timeout is true.\n        return null;\n    };\n\n    /*\n     * Dedicated web workers.\n     * https://html.spec.whatwg.org/multipage/workers.html#dedicatedworkerglobalscope\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a dedicated worker.\n     */\n    function DedicatedWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        // self is an instance of DedicatedWorkerGlobalScope which exposes\n        // a postMessage() method for communicating via the message channel\n        // established when the worker is created.\n        this._add_message_port(self);\n    }\n    DedicatedWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    DedicatedWorkerTestEnvironment.prototype.on_tests_ready = function() {\n        WorkerTestEnvironment.prototype.on_tests_ready.call(this);\n        // In the absence of an onload notification, we a require dedicated\n        // workers to explicitly signal when the tests are done.\n        tests.wait_for_finish = true;\n    };\n\n    /*\n     * Shared web workers.\n     * https://html.spec.whatwg.org/multipage/workers.html#sharedworkerglobalscope\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a shared web worker.\n     */\n    function SharedWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        var this_obj = this;\n        // Shared workers receive message ports via the 'onconnect' event for\n        // each connection.\n        self.addEventListener(\"connect\",\n                function(message_event) {\n                    this_obj._add_message_port(message_event.source);\n                }, false);\n    }\n    SharedWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    SharedWorkerTestEnvironment.prototype.on_tests_ready = function() {\n        WorkerTestEnvironment.prototype.on_tests_ready.call(this);\n        // In the absence of an onload notification, we a require shared\n        // workers to explicitly signal when the tests are done.\n        tests.wait_for_finish = true;\n    };\n\n    /*\n     * Service workers.\n     * http://www.w3.org/TR/service-workers/\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a service worker.\n     */\n    function ServiceWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n        var this_obj = this;\n        self.addEventListener(\"message\",\n                function(event) {\n                    if (event.data && event.data.type && event.data.type === \"connect\") {\n                        this_obj._add_message_port(event.source);\n                    }\n                }, false);\n\n        // The oninstall event is received after the service worker script and\n        // all imported scripts have been fetched and executed. It's the\n        // equivalent of an onload event for a document. All tests should have\n        // been added by the time this event is received, thus it's not\n        // necessary to wait until the onactivate event. However, tests for\n        // installed service workers need another event which is equivalent to\n        // the onload event because oninstall is fired only on installation. The\n        // onmessage event is used for that purpose since tests using\n        // testharness.js should ask the result to its service worker by\n        // PostMessage. If the onmessage event is triggered on the service\n        // worker's context, that means the worker's script has been evaluated.\n        on_event(self, \"install\", on_all_loaded);\n        on_event(self, \"message\", on_all_loaded);\n        function on_all_loaded() {\n            if (this_obj.all_loaded)\n                return;\n            this_obj.all_loaded = true;\n            if (this_obj.on_loaded_callback) {\n              this_obj.on_loaded_callback();\n            }\n        }\n    }\n\n    ServiceWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    ServiceWorkerTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    /*\n     * Shadow realms.\n     * https://github.com/tc39/proposal-shadowrealm\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a shadow realm.\n     */\n    function ShadowRealmTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n    }\n\n    ShadowRealmTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    /**\n     * Signal to the test environment that the tests are ready and the on-loaded\n     * callback should be run.\n     *\n     * Shadow realms are not *really* a DOM context: they have no `onload` or similar\n     * event for us to use to set up the test environment; so, instead, this method\n     * is manually triggered from the incubating realm\n     *\n     * @param {Function} message_destination - a function that receives JSON-serializable\n     * data to send to the incubating realm, in the same format as used by RemoteContext\n     */\n    ShadowRealmTestEnvironment.prototype.begin = function(message_destination) {\n        if (this.all_loaded) {\n            throw new Error(\"Tried to start a shadow realm test environment after it has already started\");\n        }\n        var fakeMessagePort = {};\n        fakeMessagePort.postMessage = message_destination;\n        this._add_message_port(fakeMessagePort);\n        this.all_loaded = true;\n        if (this.on_loaded_callback) {\n            this.on_loaded_callback();\n        }\n    };\n\n    ShadowRealmTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    /*\n     * JavaScript shells.\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a JavaScript shell.\n     */\n    function ShellTestEnvironment() {\n        this.name_counter = 0;\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n        Promise.resolve().then(function() {\n            this.all_loaded = true\n            if (this.on_loaded_callback) {\n                this.on_loaded_callback();\n            }\n        }.bind(this));\n        this.message_list = [];\n        this.message_ports = [];\n    }\n\n    ShellTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    ShellTestEnvironment.prototype.on_new_harness_properties = function() {};\n\n    ShellTestEnvironment.prototype.on_tests_ready = function() {};\n\n    ShellTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    ShellTestEnvironment.prototype.test_timeout = function() {\n        // Tests running in a shell don't have a default timeout, so behave as\n        // if settings.explicit_timeout is true.\n        return null;\n    };\n\n    function create_test_environment() {\n        if ('document' in global_scope) {\n            return new WindowTestEnvironment();\n        }\n        if ('DedicatedWorkerGlobalScope' in global_scope &&\n            global_scope instanceof DedicatedWorkerGlobalScope) {\n            return new DedicatedWorkerTestEnvironment();\n        }\n        if ('SharedWorkerGlobalScope' in global_scope &&\n            global_scope instanceof SharedWorkerGlobalScope) {\n            return new SharedWorkerTestEnvironment();\n        }\n        if ('ServiceWorkerGlobalScope' in global_scope &&\n            global_scope instanceof ServiceWorkerGlobalScope) {\n            return new ServiceWorkerTestEnvironment();\n        }\n        if ('WorkerGlobalScope' in global_scope &&\n            global_scope instanceof WorkerGlobalScope) {\n            return new DedicatedWorkerTestEnvironment();\n        }\n        /* Shadow realm global objects are _ordinary_ objects (i.e. their prototype is\n         * Object) so we don't have a nice `instanceof` test to use; instead, we\n         * check if the there is a GLOBAL.isShadowRealm() property\n         * on the global object. that was set by the test harness when it\n         * created the ShadowRealm.\n         */\n        if (global_scope.GLOBAL && global_scope.GLOBAL.isShadowRealm()) {\n            return new ShadowRealmTestEnvironment();\n        }\n\n        return new ShellTestEnvironment();\n    }\n\n    var test_environment = create_test_environment();\n\n    function is_shared_worker(worker) {\n        return 'SharedWorker' in global_scope && worker instanceof SharedWorker;\n    }\n\n    function is_service_worker(worker) {\n        // The worker object may be from another execution context,\n        // so do not use instanceof here.\n        return 'ServiceWorker' in global_scope &&\n            Object.prototype.toString.call(worker) == '[object ServiceWorker]';\n    }\n\n    var seen_func_name = Object.create(null);\n\n    function get_test_name(func, name)\n    {\n        if (name) {\n            return name;\n        }\n\n        if (func) {\n            var func_code = func.toString();\n\n            // Try and match with brackets, but fallback to matching without\n            var arrow = func_code.match(/^\\(\\)\\s*=>\\s*(?:{(.*)}\\s*|(.*))$/);\n\n            // Check for JS line separators\n            if (arrow !== null && !/[\\u000A\\u000D\\u2028\\u2029]/.test(func_code)) {\n                var trimmed = (arrow[1] !== undefined ? arrow[1] : arrow[2]).trim();\n                // drop trailing ; if there's no earlier ones\n                trimmed = trimmed.replace(/^([^;]*)(;\\s*)+$/, \"$1\");\n\n                if (trimmed) {\n                    let name = trimmed;\n                    if (seen_func_name[trimmed]) {\n                        // This subtest name already exists, so add a suffix.\n                        name += \" \" + seen_func_name[trimmed];\n                    } else {\n                        seen_func_name[trimmed] = 0;\n                    }\n                    seen_func_name[trimmed] += 1;\n                    return name;\n                }\n            }\n        }\n\n        return test_environment.next_default_test_name();\n    }\n\n    /**\n     * @callback TestFunction\n     * @param {Test} test - The test currnetly being run.\n     * @param {Any[]} args - Additional args to pass to function.\n     *\n     */\n\n    /**\n     * Create a synchronous test\n     *\n     * @param {TestFunction} func - Test function. This is executed\n     * immediately. If it returns without error, the test status is\n     * set to ``PASS``. If it throws an :js:class:`AssertionError`, or\n     * any other exception, the test status is set to ``FAIL``\n     * (typically from an `assert` function).\n     * @param {String} name - Test name. This must be unique in a\n     * given file and must be invariant between runs.\n     */\n    function test(func, name, properties)\n    {\n        if (tests.promise_setup_called) {\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = '`test` invoked after `promise_setup`';\n            tests.complete();\n        }\n        var test_name = get_test_name(func, name);\n        var test_obj = new Test(test_name, properties);\n        var value = test_obj.step(func, test_obj, test_obj);\n\n        if (value !== undefined) {\n            var msg = 'Test named \"' + test_name +\n                '\" passed a function to `test` that returned a value.';\n\n            try {\n                if (value && typeof value.then === 'function') {\n                    msg += ' Consider using `promise_test` instead when ' +\n                        'using Promises or async/await.';\n                }\n            } catch (err) {}\n\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = msg;\n        }\n\n        if (test_obj.phase === test_obj.phases.STARTED) {\n            test_obj.done();\n        }\n    }\n\n    /**\n     * Create an asynchronous test\n     *\n     * @param {TestFunction|string} funcOrName - Initial step function\n     * to call immediately with the test name as an argument (if any),\n     * or name of the test.\n     * @param {String} name - Test name (if a test function was\n     * provided). This must be unique in a given file and must be\n     * invariant between runs.\n     * @returns {Test} An object representing the ongoing test.\n     */\n    function async_test(func, name, properties)\n    {\n        if (tests.promise_setup_called) {\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = '`async_test` invoked after `promise_setup`';\n            tests.complete();\n        }\n        if (typeof func !== \"function\") {\n            properties = name;\n            name = func;\n            func = null;\n        }\n        var test_name = get_test_name(func, name);\n        var test_obj = new Test(test_name, properties);\n        if (func) {\n            var value = test_obj.step(func, test_obj, test_obj);\n\n            // Test authors sometimes return values to async_test, expecting us\n            // to handle the value somehow. Make doing so a harness error to be\n            // clear this is invalid, and point authors to promise_test if it\n            // may be appropriate.\n            //\n            // Note that we only perform this check on the initial function\n            // passed to async_test, not on any later steps - we haven't seen a\n            // consistent problem with those (and it's harder to check).\n            if (value !== undefined) {\n                var msg = 'Test named \"' + test_name +\n                    '\" passed a function to `async_test` that returned a value.';\n\n                try {\n                    if (value && typeof value.then === 'function') {\n                        msg += ' Consider using `promise_test` instead when ' +\n                            'using Promises or async/await.';\n                    }\n                } catch (err) {}\n\n                tests.set_status(tests.status.ERROR, msg);\n                tests.complete();\n            }\n        } else {\n            // In his case, the test might not be stepped at all, and it even if it is, only the first START event counts for each test\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"START\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': test_name}, ts: Date.now()}}))\n        }\n        return test_obj;\n    }\n\n    /**\n     * Create a promise test.\n     *\n     * Promise tests are tests which are represented by a promise\n     * object. If the promise is fulfilled the test passes, if it's\n     * rejected the test fails, otherwise the test passes.\n     *\n     * @param {TestFunction} func - Test function. This must return a\n     * promise. The test is automatically marked as complete once the\n     * promise settles.\n     * @param {String} name - Test name. This must be unique in a\n     * given file and must be invariant between runs.\n     */\n    function promise_test(func, name, properties) {\n        if (typeof func !== \"function\") {\n            properties = name;\n            name = func;\n            func = null;\n        }\n        var test_name = get_test_name(func, name);\n        var test = new Test(test_name, properties);\n        test._is_promise_test = true;\n\n        // If there is no promise tests queue make one.\n        if (!tests.promise_tests) {\n            tests.promise_tests = Promise.resolve();\n        }\n        tests.promise_tests = tests.promise_tests.then(function() {\n            return new Promise(function(resolve) {\n                var promise = test.step(func, test, test);\n\n                test.step(function() {\n                    assert(!!promise, \"promise_test\", null,\n                           \"test body must return a 'thenable' object (received ${value})\",\n                           {value:promise});\n                    assert(typeof promise.then === \"function\", \"promise_test\", null,\n                           \"test body must return a 'thenable' object (received an object with no `then` method)\",\n                           null);\n                });\n\n                // Test authors may use the `step` method within a\n                // `promise_test` even though this reflects a mixture of\n                // asynchronous control flow paradigms. The \"done\" callback\n                // should be registered prior to the resolution of the\n                // user-provided Promise to avoid timeouts in cases where the\n                // Promise does not settle but a `step` function has thrown an\n                // error.\n                add_test_done_callback(test, resolve);\n\n                Promise.resolve(promise)\n                    .catch(test.step_func(\n                        function(value) {\n                            if (value instanceof AssertionError) {\n                                throw value;\n                            }\n                            assert(false, \"promise_test\", null,\n                                   \"Unhandled rejection with value: ${value}\", {value:value});\n                        }))\n                    .then(function() {\n                        test.done();\n                    });\n                });\n        });\n    }\n\n    /**\n     * Make a copy of a Promise in the current realm.\n     *\n     * @param {Promise} promise the given promise that may be from a different\n     *                          realm\n     * @returns {Promise}\n     *\n     * An arbitrary promise provided by the caller may have originated\n     * in another frame that have since navigated away, rendering the\n     * frame's document inactive. Such a promise cannot be used with\n     * `await` or Promise.resolve(), as microtasks associated with it\n     * may be prevented from being run. See `issue\n     * 5319<https://github.com/whatwg/html/issues/5319>`_ for a\n     * particular case.\n     *\n     * In functions we define here, there is an expectation from the caller\n     * that the promise is from the current realm, that can always be used with\n     * `await`, etc. We therefore create a new promise in this realm that\n     * inherit the value and status from the given promise.\n     */\n\n    function bring_promise_to_current_realm(promise) {\n        return new Promise(promise.then.bind(promise));\n    }\n\n    /**\n     * Assert that a Promise is rejected with the right ECMAScript exception.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {Function} constructor - The expected exception constructor.\n     * @param {Promise} promise - The promise that's expected to\n     * reject with the given exception.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     */\n    function promise_rejects_js(test, constructor, promise, description) {\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_js_impl(constructor, function() { throw e },\n                                      description, \"promise_rejects_js\");\n            });\n    }\n\n    /**\n     * Assert that a Promise is rejected with the right DOMException.\n     *\n     * For the remaining arguments, there are two ways of calling\n     * promise_rejects_dom:\n     *\n     * 1) If the DOMException is expected to come from the current global, the\n     * third argument should be the promise expected to reject, and a fourth,\n     * optional, argument is the assertion description.\n     *\n     * 2) If the DOMException is expected to come from some other global, the\n     * third argument should be the DOMException constructor from that global,\n     * the fourth argument the promise expected to reject, and the fifth,\n     * optional, argument the assertion description.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {number|string} type - See documentation for\n     * `assert_throws_dom <#assert_throws_dom>`_.\n     * @param {Function} promiseOrConstructor - Either the constructor\n     * for the expected exception (if the exception comes from another\n     * global), or the promise that's expected to reject (if the\n     * exception comes from the current global).\n     * @param {Function|string} descriptionOrPromise - Either the\n     * promise that's expected to reject (if the exception comes from\n     * another global), or the optional description of the condition\n     * being tested (if the exception comes from the current global).\n     * @param {string} [description] - Description of the condition\n     * being tested (if the exception comes from another global).\n     *\n     */\n    function promise_rejects_dom(test, type, promiseOrConstructor, descriptionOrPromise, maybeDescription) {\n        let constructor, promise, description;\n        if (typeof promiseOrConstructor === \"function\" &&\n            promiseOrConstructor.name === \"DOMException\") {\n            constructor = promiseOrConstructor;\n            promise = descriptionOrPromise;\n            description = maybeDescription;\n        } else {\n            constructor = self.DOMException;\n            promise = promiseOrConstructor;\n            description = descriptionOrPromise;\n            assert(maybeDescription === undefined,\n                   \"Too many args pased to no-constructor version of promise_rejects_dom\");\n        }\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_dom_impl(type, function() { throw e }, description,\n                                       \"promise_rejects_dom\", constructor);\n            });\n    }\n\n    /**\n     * Assert that a Promise is rejected with the provided value.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {Any} exception - The expected value of the rejected promise.\n     * @param {Promise} promise - The promise that's expected to\n     * reject.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     */\n    function promise_rejects_exactly(test, exception, promise, description) {\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_exactly_impl(exception, function() { throw e },\n                                           description, \"promise_rejects_exactly\");\n            });\n    }\n\n    /**\n     * Allow DOM events to be handled using Promises.\n     *\n     * This can make it a lot easier to test a very specific series of events,\n     * including ensuring that unexpected events are not fired at any point.\n     *\n     * `EventWatcher` will assert if an event occurs while there is no `wait_for`\n     * created Promise waiting to be fulfilled, or if the event is of a different type\n     * to the type currently expected. This ensures that only the events that are\n     * expected occur, in the correct order, and with the correct timing.\n     *\n     * @constructor\n     * @param {Test} test - The `Test` to use for the assertion.\n     * @param {EventTarget} watchedNode - The target expected to receive the events.\n     * @param {string[]} eventTypes - List of events to watch for.\n     * @param {Promise} timeoutPromise - Promise that will cause the\n     * test to be set to `TIMEOUT` once fulfilled.\n     *\n     */\n    function EventWatcher(test, watchedNode, eventTypes, timeoutPromise)\n    {\n        if (typeof eventTypes == 'string') {\n            eventTypes = [eventTypes];\n        }\n\n        var waitingFor = null;\n\n        // This is null unless we are recording all events, in which case it\n        // will be an Array object.\n        var recordedEvents = null;\n\n        var eventHandler = test.step_func(function(evt) {\n            assert_true(!!waitingFor,\n                        'Not expecting event, but got ' + evt.type + ' event');\n            assert_equals(evt.type, waitingFor.types[0],\n                          'Expected ' + waitingFor.types[0] + ' event, but got ' +\n                          evt.type + ' event instead');\n\n            if (Array.isArray(recordedEvents)) {\n                recordedEvents.push(evt);\n            }\n\n            if (waitingFor.types.length > 1) {\n                // Pop first event from array\n                waitingFor.types.shift();\n                return;\n            }\n            // We need to null out waitingFor before calling the resolve function\n            // since the Promise's resolve handlers may call wait_for() which will\n            // need to set waitingFor.\n            var resolveFunc = waitingFor.resolve;\n            waitingFor = null;\n            // Likewise, we should reset the state of recordedEvents.\n            var result = recordedEvents || evt;\n            recordedEvents = null;\n            resolveFunc(result);\n        });\n\n        for (var i = 0; i < eventTypes.length; i++) {\n            watchedNode.addEventListener(eventTypes[i], eventHandler, false);\n        }\n\n        /**\n         * Returns a Promise that will resolve after the specified event or\n         * series of events has occurred.\n         *\n         * @param {Object} options An optional options object. If the 'record' property\n         *                 on this object has the value 'all', when the Promise\n         *                 returned by this function is resolved,  *all* Event\n         *                 objects that were waited for will be returned as an\n         *                 array.\n         *\n         * @example\n         * const watcher = new EventWatcher(t, div, [ 'animationstart',\n         *                                            'animationiteration',\n         *                                            'animationend' ]);\n         * return watcher.wait_for([ 'animationstart', 'animationend' ],\n         *                         { record: 'all' }).then(evts => {\n         *   assert_equals(evts[0].elapsedTime, 0.0);\n         *   assert_equals(evts[1].elapsedTime, 2.0);\n         * });\n         */\n        this.wait_for = function(types, options) {\n            if (waitingFor) {\n                return Promise.reject('Already waiting for an event or events');\n            }\n            if (typeof types == 'string') {\n                types = [types];\n            }\n            if (options && options.record && options.record === 'all') {\n                recordedEvents = [];\n            }\n            return new Promise(function(resolve, reject) {\n                var timeout = test.step_func(function() {\n                    // If the timeout fires after the events have been received\n                    // or during a subsequent call to wait_for, ignore it.\n                    if (!waitingFor || waitingFor.resolve !== resolve)\n                        return;\n\n                    // This should always fail, otherwise we should have\n                    // resolved the promise.\n                    assert_true(waitingFor.types.length == 0,\n                                'Timed out waiting for ' + waitingFor.types.join(', '));\n                    var result = recordedEvents;\n                    recordedEvents = null;\n                    var resolveFunc = waitingFor.resolve;\n                    waitingFor = null;\n                    resolveFunc(result);\n                });\n\n                if (timeoutPromise) {\n                    timeoutPromise().then(timeout);\n                }\n\n                waitingFor = {\n                    types: types,\n                    resolve: resolve,\n                    reject: reject\n                };\n            });\n        };\n\n        /**\n         * Stop listening for events\n         */\n        function stop_watching() {\n            for (var i = 0; i < eventTypes.length; i++) {\n                watchedNode.removeEventListener(eventTypes[i], eventHandler, false);\n            }\n        };\n\n        test._add_cleanup(stop_watching);\n\n        return this;\n    }\n    expose(EventWatcher, 'EventWatcher');\n\n    /**\n     * @typedef {Object} SettingsObject\n     * @property {bool} single_test - Use the single-page-test\n     * mode. In this mode the Document represents a single\n     * `async_test`. Asserts may be used directly without requiring\n     * `Test.step` or similar wrappers, and any exceptions set the\n     * status of the test rather than the status of the harness.\n     * @property {bool} allow_uncaught_exception - don't treat an\n     * uncaught exception as an error; needed when e.g. testing the\n     * `window.onerror` handler.\n     * @property {boolean} explicit_done - Wait for a call to `done()`\n     * before declaring all tests complete (this is always true for\n     * single-page tests).\n     * @property hide_test_state - hide the test state output while\n     * the test is running; This is helpful when the output of the test state\n     * may interfere the test results.\n     * @property {bool} explicit_timeout - disable file timeout; only\n     * stop waiting for results when the `timeout()` function is\n     * called This should typically only be set for manual tests, or\n     * by a test runner that providees its own timeout mechanism.\n     * @property {number} timeout_multiplier - Multiplier to apply to\n     * per-test timeouts. This should only be set by a test runner.\n     * @property {Document} output_document - The document to which\n     * results should be logged. By default this is the current\n     * document but could be an ancestor document in some cases e.g. a\n     * SVG test loaded in an HTML wrapper\n     *\n     */\n\n    /**\n     * Configure the harness\n     *\n     * @param {Function|SettingsObject} funcOrProperties - Either a\n     * setup function to run, or a set of properties. If this is a\n     * function that function is run synchronously. Any exception in\n     * the function will set the overall harness status to `ERROR`.\n     * @param {SettingsObject} maybeProperties - An object containing\n     * the settings to use, if the first argument is a function.\n     *\n     */\n    function setup(func_or_properties, maybe_properties)\n    {\n        var func = null;\n        var properties = {};\n        if (arguments.length === 2) {\n            func = func_or_properties;\n            properties = maybe_properties;\n        } else if (func_or_properties instanceof Function) {\n            func = func_or_properties;\n        } else {\n            properties = func_or_properties;\n        }\n        tests.setup(func, properties);\n        test_environment.on_new_harness_properties(properties);\n    }\n\n    /**\n     * Configure the harness, waiting for a promise to resolve\n     * before running any `promise_test` tests.\n     *\n     * @param {Function} func - Function returning a promise that's\n     * run synchronously. Promise tests are not run until after this\n     * function has resolved.\n     * @param {SettingsObject} [properties] - An object containing\n     * the harness settings to use.\n     *\n     */\n    function promise_setup(func, properties={})\n    {\n        if (typeof func !== \"function\") {\n            tests.set_status(tests.status.ERROR,\n                             \"promise_test invoked without a function\");\n            tests.complete();\n            return;\n        }\n        tests.promise_setup_called = true;\n\n        if (!tests.promise_tests) {\n            tests.promise_tests = Promise.resolve();\n        }\n\n        tests.promise_tests = tests.promise_tests\n            .then(function()\n                  {\n                      var result;\n\n                      tests.setup(null, properties);\n                      result = func();\n                      test_environment.on_new_harness_properties(properties);\n\n                      if (!result || typeof result.then !== \"function\") {\n                          throw \"Non-thenable returned by function passed to `promise_setup`\";\n                      }\n                      return result;\n                  })\n            .catch(function(e)\n                   {\n                       tests.set_status(tests.status.ERROR,\n                                        String(e),\n                                        e && e.stack);\n                       tests.complete();\n                   });\n    }\n\n    /**\n     * Mark test loading as complete.\n     *\n     * Typically this function is called implicitly on page load; it's\n     * only necessary for users to call this when either the\n     * ``explicit_done`` or ``single_page`` properties have been set\n     * via the :js:func:`setup` function.\n     *\n     * For single page tests this marks the test as complete and sets its status.\n     * For other tests, this marks test loading as complete, but doesn't affect ongoing tests.\n     */\n    function done() {\n        if (tests.tests.length === 0) {\n            // `done` is invoked after handling uncaught exceptions, so if the\n            // harness status is already set, the corresponding message is more\n            // descriptive than the generic message defined here.\n            if (tests.status.status === null) {\n                tests.status.status = tests.status.ERROR;\n                tests.status.message = \"done() was called without first defining any tests\";\n            }\n\n            tests.complete();\n            return;\n        }\n        if (tests.file_is_test) {\n            // file is test files never have asynchronous cleanup logic,\n            // meaning the fully-synchronous `done` function can be used here.\n            tests.tests[0].done();\n        }\n        tests.end_wait();\n    }\n\n    /**\n     * @deprecated generate a list of tests from a function and list of arguments\n     *\n     * This is deprecated because it runs all the tests outside of the test functions\n     * and as a result any test throwing an exception will result in no tests being\n     * run. In almost all cases, you should simply call test within the loop you would\n     * use to generate the parameter list array.\n     *\n     * @param {Function} func - The function that will be called for each generated tests.\n     * @param {Any[][]} args - An array of arrays. Each nested array\n     * has the structure `[testName, ...testArgs]`. For each of these nested arrays\n     * array, a test is generated with name `testName` and test function equivalent to\n     * `func(..testArgs)`.\n     */\n    function generate_tests(func, args, properties) {\n        forEach(args, function(x, i)\n                {\n                    var name = x[0];\n                    test(function()\n                         {\n                             func.apply(this, x.slice(1));\n                         },\n                         name,\n                         Array.isArray(properties) ? properties[i] : properties);\n                });\n    }\n\n    /**\n     * @deprecated\n     *\n     * Register a function as a DOM event listener to the\n     * given object for the event bubbling phase.\n     *\n     * @param {EventTarget} object - Event target\n     * @param {string} event - Event name\n     * @param {Function} callback - Event handler.\n     */\n    function on_event(object, event, callback)\n    {\n        object.addEventListener(event, callback, false);\n    }\n\n    /**\n     * Global version of :js:func:`Test.step_timeout` for use in single page tests.\n     *\n     * @param {Function} func - Function to run after the timeout\n     * @param {number} timeout - Time in ms to wait before running the\n     * test step. The actual wait time is ``timeout`` x\n     * ``timeout_multiplier``.\n     */\n    function step_timeout(func, timeout) {\n        var outer_this = this;\n        var args = Array.prototype.slice.call(arguments, 2);\n        return setTimeout(function() {\n            func.apply(outer_this, args);\n        }, timeout * tests.timeout_multiplier);\n    }\n\n    expose(test, 'test');\n    expose(async_test, 'async_test');\n    expose(promise_test, 'promise_test');\n    expose(promise_rejects_js, 'promise_rejects_js');\n    expose(promise_rejects_dom, 'promise_rejects_dom');\n    expose(promise_rejects_exactly, 'promise_rejects_exactly');\n    expose(generate_tests, 'generate_tests');\n    expose(setup, 'setup');\n    expose(promise_setup, 'promise_setup');\n    expose(done, 'done');\n    expose(on_event, 'on_event');\n    expose(step_timeout, 'step_timeout');\n\n    /*\n     * Return a string truncated to the given length, with ... added at the end\n     * if it was longer.\n     */\n    function truncate(s, len)\n    {\n        if (s.length > len) {\n            return s.substring(0, len - 3) + \"...\";\n        }\n        return s;\n    }\n\n    /*\n     * Return true if object is probably a Node object.\n     */\n    function is_node(object)\n    {\n        // I use duck-typing instead of instanceof, because\n        // instanceof doesn't work if the node is from another window (like an\n        // iframe's contentWindow):\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=12295\n        try {\n            var has_node_properties = (\"nodeType\" in object &&\n                                       \"nodeName\" in object &&\n                                       \"nodeValue\" in object &&\n                                       \"childNodes\" in object);\n        } catch (e) {\n            // We're probably cross-origin, which means we aren't a node\n            return false;\n        }\n\n        if (has_node_properties) {\n            try {\n                object.nodeType;\n            } catch (e) {\n                // The object is probably Node.prototype or another prototype\n                // object that inherits from it, and not a Node instance.\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    var replacements = {\n        \"0\": \"0\",\n        \"1\": \"x01\",\n        \"2\": \"x02\",\n        \"3\": \"x03\",\n        \"4\": \"x04\",\n        \"5\": \"x05\",\n        \"6\": \"x06\",\n        \"7\": \"x07\",\n        \"8\": \"b\",\n        \"9\": \"t\",\n        \"10\": \"n\",\n        \"11\": \"v\",\n        \"12\": \"f\",\n        \"13\": \"r\",\n        \"14\": \"x0e\",\n        \"15\": \"x0f\",\n        \"16\": \"x10\",\n        \"17\": \"x11\",\n        \"18\": \"x12\",\n        \"19\": \"x13\",\n        \"20\": \"x14\",\n        \"21\": \"x15\",\n        \"22\": \"x16\",\n        \"23\": \"x17\",\n        \"24\": \"x18\",\n        \"25\": \"x19\",\n        \"26\": \"x1a\",\n        \"27\": \"x1b\",\n        \"28\": \"x1c\",\n        \"29\": \"x1d\",\n        \"30\": \"x1e\",\n        \"31\": \"x1f\",\n        \"0xfffd\": \"ufffd\",\n        \"0xfffe\": \"ufffe\",\n        \"0xffff\": \"uffff\",\n    };\n\n    /**\n     * Convert a value to a nice, human-readable string\n     *\n     * When many JavaScript Object values are coerced to a String, the\n     * resulting value will be ``\"[object Object]\"``. This obscures\n     * helpful information, making the coerced value unsuitable for\n     * use in assertion messages, test names, and debugging\n     * statements. `format_value` produces more distinctive string\n     * representations of many kinds of objects, including arrays and\n     * the more important DOM Node types. It also translates String\n     * values containing control characters to include human-readable\n     * representations.\n     *\n     * @example\n     * // \"Document node with 2 children\"\n     * format_value(document);\n     * @example\n     * // \"\\\"foo\\\\uffffbar\\\"\"\n     * format_value(\"foo\\uffffbar\");\n     * @example\n     * // \"[-0, Infinity]\"\n     * format_value([-0, Infinity]);\n     * @param {Any} val - The value to convert to a string.\n     * @returns {string} - A string representation of ``val``, optimised for human readability.\n     */\n    function format_value(val, seen)\n    {\n        if (!seen) {\n            seen = [];\n        }\n        if (typeof val === \"object\" && val !== null) {\n            if (seen.indexOf(val) >= 0) {\n                return \"[...]\";\n            }\n            seen.push(val);\n        }\n        if (Array.isArray(val)) {\n            let output = \"[\";\n            if (val.beginEllipsis !== undefined) {\n                output += \"â¦, \";\n            }\n            output += val.map(function(x) {return format_value(x, seen);}).join(\", \");\n            if (val.endEllipsis !== undefined) {\n                output += \", â¦\";\n            }\n            return output + \"]\";\n        }\n\n        switch (typeof val) {\n        case \"string\":\n            val = val.replace(/\\\\/g, \"\\\\\\\\\");\n            for (var p in replacements) {\n                var replace = \"\\\\\" + replacements[p];\n                val = val.replace(RegExp(String.fromCharCode(p), \"g\"), replace);\n            }\n            return '\"' + val.replace(/\"/g, '\\\\\"') + '\"';\n        case \"boolean\":\n        case \"undefined\":\n            return String(val);\n        case \"number\":\n            // In JavaScript, -0 === 0 and String(-0) == \"0\", so we have to\n            // special-case.\n            if (val === -0 && 1/val === -Infinity) {\n                return \"-0\";\n            }\n            return String(val);\n        case \"object\":\n            if (val === null) {\n                return \"null\";\n            }\n\n            // Special-case Node objects, since those come up a lot in my tests.  I\n            // ignore namespaces.\n            if (is_node(val)) {\n                switch (val.nodeType) {\n                case Node.ELEMENT_NODE:\n                    var ret = \"<\" + val.localName;\n                    for (var i = 0; i < val.attributes.length; i++) {\n                        ret += \" \" + val.attributes[i].name + '=\"' + val.attributes[i].value + '\"';\n                    }\n                    ret += \">\" + val.innerHTML + \"</\" + val.localName + \">\";\n                    return \"Element node \" + truncate(ret, 60);\n                case Node.TEXT_NODE:\n                    return 'Text node \"' + truncate(val.data, 60) + '\"';\n                case Node.PROCESSING_INSTRUCTION_NODE:\n                    return \"ProcessingInstruction node with target \" + format_value(truncate(val.target, 60)) + \" and data \" + format_value(truncate(val.data, 60));\n                case Node.COMMENT_NODE:\n                    return \"Comment node <!--\" + truncate(val.data, 60) + \"-->\";\n                case Node.DOCUMENT_NODE:\n                    return \"Document node with \" + val.childNodes.length + (val.childNodes.length == 1 ? \" child\" : \" children\");\n                case Node.DOCUMENT_TYPE_NODE:\n                    return \"DocumentType node\";\n                case Node.DOCUMENT_FRAGMENT_NODE:\n                    return \"DocumentFragment node with \" + val.childNodes.length + (val.childNodes.length == 1 ? \" child\" : \" children\");\n                default:\n                    return \"Node object of unknown type\";\n                }\n            }\n\n        /* falls through */\n        default:\n            try {\n                return typeof val + ' \"' + truncate(String(val), 1000) + '\"';\n            } catch(e) {\n                return (\"[stringifying object threw \" + String(e) +\n                        \" with type \" + String(typeof e) + \"]\");\n            }\n        }\n    }\n    expose(format_value, \"format_value\");\n\n    /*\n     * Assertions\n     */\n\n    function expose_assert(f, name) {\n        function assert_wrapper(...args) {\n            let status = Test.statuses.TIMEOUT;\n            let stack = null;\n            try {\n                if (settings.debug) {\n                    console.debug(\"ASSERT\", name, tests.current_test && tests.current_test.name, args);\n                }\n                if (tests.output) {\n                    tests.set_assert(name, args);\n                }\n                const rv = f.apply(undefined, args);\n                status = Test.statuses.PASS;\n                return rv;\n            } catch(e) {\n                status = Test.statuses.FAIL;\n                stack = e.stack ? e.stack : null;\n                throw e;\n            } finally {\n                if (tests.output && !stack) {\n                    stack = get_stack();\n                }\n                if (tests.output) {\n                    tests.set_assert_status(status, stack);\n                }\n            }\n        }\n        expose(assert_wrapper, name);\n    }\n\n    /**\n     * Assert that ``actual`` is strictly true\n     *\n     * @param {Any} actual - Value that is asserted to be true\n     * @param {string} [description] - Description of the condition being tested\n     */\n    function assert_true(actual, description)\n    {\n        assert(actual === true, \"assert_true\", description,\n                                \"expected true got ${actual}\", {actual:actual});\n    }\n    expose_assert(assert_true, \"assert_true\");\n\n    /**\n     * Assert that ``actual`` is strictly false\n     *\n     * @param {Any} actual - Value that is asserted to be false\n     * @param {string} [description] - Description of the condition being tested\n     */\n    function assert_false(actual, description)\n    {\n        assert(actual === false, \"assert_false\", description,\n                                 \"expected false got ${actual}\", {actual:actual});\n    }\n    expose_assert(assert_false, \"assert_false\");\n\n    function same_value(x, y) {\n        if (y !== y) {\n            //NaN case\n            return x !== x;\n        }\n        if (x === 0 && y === 0) {\n            //Distinguish +0 and -0\n            return 1/x === 1/y;\n        }\n        return x === y;\n    }\n\n    /**\n     * Assert that ``actual`` is the same value as ``expected``.\n     *\n     * For objects this compares by cobject identity; for primitives\n     * this distinguishes between 0 and -0, and has correct handling\n     * of NaN.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Any} expected - Expected value.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_equals(actual, expected, description)\n    {\n         /*\n          * Test if two primitives are equal or two objects\n          * are the same object\n          */\n        if (typeof actual != typeof expected) {\n            assert(false, \"assert_equals\", description,\n                          \"expected (\" + typeof expected + \") ${expected} but got (\" + typeof actual + \") ${actual}\",\n                          {expected:expected, actual:actual});\n            return;\n        }\n        assert(same_value(actual, expected), \"assert_equals\", description,\n                                             \"expected ${expected} but got ${actual}\",\n                                             {expected:expected, actual:actual});\n    }\n    expose_assert(assert_equals, \"assert_equals\");\n\n    /**\n     * Assert that ``actual`` is not the same value as ``expected``.\n     *\n     * Comparison is as for :js:func:`assert_equals`.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Any} expected - The value ``actual`` is expected to be different to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_not_equals(actual, expected, description)\n    {\n        assert(!same_value(actual, expected), \"assert_not_equals\", description,\n                                              \"got disallowed value ${actual}\",\n                                              {actual:actual});\n    }\n    expose_assert(assert_not_equals, \"assert_not_equals\");\n\n    /**\n     * Assert that ``expected`` is an array and ``actual`` is one of the members.\n     * This is implemented using ``indexOf``, so doesn't handle NaN or Â±0 correctly.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Array} expected - An array that ``actual`` is expected to\n     * be a member of.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_in_array(actual, expected, description)\n    {\n        assert(expected.indexOf(actual) != -1, \"assert_in_array\", description,\n                                               \"value ${actual} not in array ${expected}\",\n                                               {actual:actual, expected:expected});\n    }\n    expose_assert(assert_in_array, \"assert_in_array\");\n\n    // This function was deprecated in July of 2015.\n    // See https://github.com/web-platform-tests/wpt/issues/2033\n    /**\n     * @deprecated\n     * Recursively compare two objects for equality.\n     *\n     * See `Issue 2033\n     * <https://github.com/web-platform-tests/wpt/issues/2033>`_ for\n     * more information.\n     *\n     * @param {Object} actual - Test value.\n     * @param {Object} expected - Expected value.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_object_equals(actual, expected, description)\n    {\n         assert(typeof actual === \"object\" && actual !== null, \"assert_object_equals\", description,\n                                                               \"value is ${actual}, expected object\",\n                                                               {actual: actual});\n         //This needs to be improved a great deal\n         function check_equal(actual, expected, stack)\n         {\n             stack.push(actual);\n\n             var p;\n             for (p in actual) {\n                 assert(expected.hasOwnProperty(p), \"assert_object_equals\", description,\n                                                    \"unexpected property ${p}\", {p:p});\n\n                 if (typeof actual[p] === \"object\" && actual[p] !== null) {\n                     if (stack.indexOf(actual[p]) === -1) {\n                         check_equal(actual[p], expected[p], stack);\n                     }\n                 } else {\n                     assert(same_value(actual[p], expected[p]), \"assert_object_equals\", description,\n                                                       \"property ${p} expected ${expected} got ${actual}\",\n                                                       {p:p, expected:expected[p], actual:actual[p]});\n                 }\n             }\n             for (p in expected) {\n                 assert(actual.hasOwnProperty(p),\n                        \"assert_object_equals\", description,\n                        \"expected property ${p} missing\", {p:p});\n             }\n             stack.pop();\n         }\n         check_equal(actual, expected, []);\n    }\n    expose_assert(assert_object_equals, \"assert_object_equals\");\n\n    /**\n     * Assert that ``actual`` and ``expected`` are both arrays, and that the array properties of\n     * ``actual`` and ``expected`` are all the same value (as for :js:func:`assert_equals`).\n     *\n     * @param {Array} actual - Test array.\n     * @param {Array} expected - Array that is expected to contain the same values as ``actual``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_array_equals(actual, expected, description)\n    {\n        const max_array_length = 20;\n        function shorten_array(arr, offset = 0) {\n            // Make \", â¦\" only show up when it would likely reduce the length, not accounting for\n            // fonts.\n            if (arr.length < max_array_length + 2) {\n                return arr;\n            }\n            // By default we want half the elements after the offset and half before\n            // But if that takes us past the end of the array, we have more before, and\n            // if it takes us before the start we have more after.\n            const length_after_offset = Math.floor(max_array_length / 2);\n            let upper_bound = Math.min(length_after_offset + offset, arr.length);\n            const lower_bound = Math.max(upper_bound - max_array_length, 0);\n\n            if (lower_bound === 0) {\n                upper_bound = max_array_length;\n            }\n\n            const output = arr.slice(lower_bound, upper_bound);\n            if (lower_bound > 0) {\n                output.beginEllipsis = true;\n            }\n            if (upper_bound < arr.length) {\n                output.endEllipsis = true;\n            }\n            return output;\n        }\n\n        assert(typeof actual === \"object\" && actual !== null && \"length\" in actual,\n               \"assert_array_equals\", description,\n               \"value is ${actual}, expected array\",\n               {actual:actual});\n        assert(actual.length === expected.length,\n               \"assert_array_equals\", description,\n               \"lengths differ, expected array ${expected} length ${expectedLength}, got ${actual} length ${actualLength}\",\n               {expected:shorten_array(expected, expected.length - 1), expectedLength:expected.length,\n                actual:shorten_array(actual, actual.length - 1), actualLength:actual.length\n               });\n\n        for (var i = 0; i < actual.length; i++) {\n            assert(actual.hasOwnProperty(i) === expected.hasOwnProperty(i),\n                   \"assert_array_equals\", description,\n                   \"expected property ${i} to be ${expected} but was ${actual} (expected array ${arrayExpected} got ${arrayActual})\",\n                   {i:i, expected:expected.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    actual:actual.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    arrayExpected:shorten_array(expected, i), arrayActual:shorten_array(actual, i)});\n            assert(same_value(expected[i], actual[i]),\n                   \"assert_array_equals\", description,\n                   \"expected property ${i} to be ${expected} but got ${actual} (expected array ${arrayExpected} got ${arrayActual})\",\n                   {i:i, expected:expected[i], actual:actual[i],\n                    arrayExpected:shorten_array(expected, i), arrayActual:shorten_array(actual, i)});\n        }\n    }\n    expose_assert(assert_array_equals, \"assert_array_equals\");\n\n    /**\n     * Assert that each array property in ``actual`` is a number within\n     * Â± `epsilon` of the corresponding property in `expected`.\n     *\n     * @param {Array} actual - Array of test values.\n     * @param {Array} expected - Array of values expected to be close to the values in ``actual``.\n     * @param {number} epsilon - Magnitude of allowed difference\n     * between each value in ``actual`` and ``expected``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_array_approx_equals(actual, expected, epsilon, description)\n    {\n        /*\n         * Test if two primitive arrays are equal within +/- epsilon\n         */\n        assert(actual.length === expected.length,\n               \"assert_array_approx_equals\", description,\n               \"lengths differ, expected ${expected} got ${actual}\",\n               {expected:expected.length, actual:actual.length});\n\n        for (var i = 0; i < actual.length; i++) {\n            assert(actual.hasOwnProperty(i) === expected.hasOwnProperty(i),\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, property expected to be ${expected} but was ${actual}\",\n                   {i:i, expected:expected.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    actual:actual.hasOwnProperty(i) ? \"present\" : \"missing\"});\n            assert(typeof actual[i] === \"number\",\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, expected a number but got a ${type_actual}\",\n                   {i:i, type_actual:typeof actual[i]});\n            assert(Math.abs(actual[i] - expected[i]) <= epsilon,\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, expected ${expected} +/- ${epsilon}, expected ${expected} but got ${actual}\",\n                   {i:i, expected:expected[i], actual:actual[i], epsilon:epsilon});\n        }\n    }\n    expose_assert(assert_array_approx_equals, \"assert_array_approx_equals\");\n\n    /**\n     * Assert that ``actual`` is within Â± ``epsilon`` of ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Value number is expected to be close to.\n     * @param {number} epsilon - Magnitude of allowed difference between ``actual`` and ``expected``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_approx_equals(actual, expected, epsilon, description)\n    {\n        /*\n         * Test if two primitive numbers are equal within +/- epsilon\n         */\n        assert(typeof actual === \"number\",\n               \"assert_approx_equals\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        // The epsilon math below does not place nice with NaN and Infinity\n        // But in this case Infinity = Infinity and NaN = NaN\n        if (isFinite(actual) || isFinite(expected)) {\n            assert(Math.abs(actual - expected) <= epsilon,\n                   \"assert_approx_equals\", description,\n                   \"expected ${expected} +/- ${epsilon} but got ${actual}\",\n                   {expected:expected, actual:actual, epsilon:epsilon});\n        } else {\n            assert_equals(actual, expected);\n        }\n    }\n    expose_assert(assert_approx_equals, \"assert_approx_equals\");\n\n    /**\n     * Assert that ``actual`` is a number less than ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be less than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_less_than(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is less than another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_less_than\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual < expected,\n               \"assert_less_than\", description,\n               \"expected a number less than ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_less_than, \"assert_less_than\");\n\n    /**\n     * Assert that ``actual`` is a number greater than ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be greater than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_greater_than(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is greater than another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_greater_than\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual > expected,\n               \"assert_greater_than\", description,\n               \"expected a number greater than ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_greater_than, \"assert_greater_than\");\n\n    /**\n     * Assert that ``actual`` is a number greater than ``lower`` and less\n     * than ``upper`` but not equal to either.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} lower - Number that ``actual`` must be greater than.\n     * @param {number} upper - Number that ``actual`` must be less than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_between_exclusive(actual, lower, upper, description)\n    {\n        /*\n         * Test if a primitive number is between two others\n         */\n        assert(typeof actual === \"number\",\n               \"assert_between_exclusive\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual > lower && actual < upper,\n               \"assert_between_exclusive\", description,\n               \"expected a number greater than ${lower} \" +\n               \"and less than ${upper} but got ${actual}\",\n               {lower:lower, upper:upper, actual:actual});\n    }\n    expose_assert(assert_between_exclusive, \"assert_between_exclusive\");\n\n    /**\n     * Assert that ``actual`` is a number less than or equal to ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be less\n     * than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_less_than_equal(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is less than or equal to another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_less_than_equal\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual <= expected,\n               \"assert_less_than_equal\", description,\n               \"expected a number less than or equal to ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_less_than_equal, \"assert_less_than_equal\");\n\n    /**\n     * Assert that ``actual`` is a number greater than or equal to ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be greater\n     * than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_greater_than_equal(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is greater than or equal to another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_greater_than_equal\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual >= expected,\n               \"assert_greater_than_equal\", description,\n               \"expected a number greater than or equal to ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_greater_than_equal, \"assert_greater_than_equal\");\n\n    /**\n     * Assert that ``actual`` is a number greater than or equal to ``lower`` and less\n     * than or equal to ``upper``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} lower - Number that ``actual`` must be greater than or equal to.\n     * @param {number} upper - Number that ``actual`` must be less than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_between_inclusive(actual, lower, upper, description)\n    {\n        /*\n         * Test if a primitive number is between to two others or equal to either of them\n         */\n        assert(typeof actual === \"number\",\n               \"assert_between_inclusive\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual >= lower && actual <= upper,\n               \"assert_between_inclusive\", description,\n               \"expected a number greater than or equal to ${lower} \" +\n               \"and less than or equal to ${upper} but got ${actual}\",\n               {lower:lower, upper:upper, actual:actual});\n    }\n    expose_assert(assert_between_inclusive, \"assert_between_inclusive\");\n\n    /**\n     * Assert that ``actual`` matches the RegExp ``expected``.\n     *\n     * @param {String} actual - Test string.\n     * @param {RegExp} expected - RegExp ``actual`` must match.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_regexp_match(actual, expected, description) {\n        /*\n         * Test if a string (actual) matches a regexp (expected)\n         */\n        assert(expected.test(actual),\n               \"assert_regexp_match\", description,\n               \"expected ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_regexp_match, \"assert_regexp_match\");\n\n    /**\n     * Assert that the class string of ``object`` as returned in\n     * ``Object.prototype.toString`` is equal to ``class_name``.\n     *\n     * @param {Object} object - Object to stringify.\n     * @param {string} class_string - Expected class string for ``object``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_class_string(object, class_string, description) {\n        var actual = {}.toString.call(object);\n        var expected = \"[object \" + class_string + \"]\";\n        assert(same_value(actual, expected), \"assert_class_string\", description,\n                                             \"expected ${expected} but got ${actual}\",\n                                             {expected:expected, actual:actual});\n    }\n    expose_assert(assert_class_string, \"assert_class_string\");\n\n    /**\n     * Assert that ``object`` has an own property with name ``property_name``.\n     *\n     * @param {Object} object - Object that should have the given property.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_own_property(object, property_name, description) {\n        assert(object.hasOwnProperty(property_name),\n               \"assert_own_property\", description,\n               \"expected property ${p} missing\", {p:property_name});\n    }\n    expose_assert(assert_own_property, \"assert_own_property\");\n\n    /**\n     * Assert that ``object`` does not have an own property with name ``property_name``.\n     *\n     * @param {Object} object - Object that should not have the given property.\n     * @param {string} property_name - Property name to test.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_not_own_property(object, property_name, description) {\n        assert(!object.hasOwnProperty(property_name),\n               \"assert_not_own_property\", description,\n               \"unexpected property ${p} is found on object\", {p:property_name});\n    }\n    expose_assert(assert_not_own_property, \"assert_not_own_property\");\n\n    function _assert_inherits(name) {\n        return function (object, property_name, description)\n        {\n            assert((typeof object === \"object\" && object !== null) ||\n                   typeof object === \"function\" ||\n                   // Or has [[IsHTMLDDA]] slot\n                   String(object) === \"[object HTMLAllCollection]\",\n                   name, description,\n                   \"provided value is not an object\");\n\n            assert(\"hasOwnProperty\" in object,\n                   name, description,\n                   \"provided value is an object but has no hasOwnProperty method\");\n\n            assert(!object.hasOwnProperty(property_name),\n                   name, description,\n                   \"property ${p} found on object expected in prototype chain\",\n                   {p:property_name});\n\n            assert(property_name in object,\n                   name, description,\n                   \"property ${p} not found in prototype chain\",\n                   {p:property_name});\n        };\n    }\n\n    /**\n     * Assert that ``object`` does not have an own property with name\n     * ``property_name``, but inherits one through the prototype chain.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_inherits(object, property_name, description) {\n        return _assert_inherits(\"assert_inherits\")(object, property_name, description);\n    }\n    expose_assert(assert_inherits, \"assert_inherits\");\n\n    /**\n     * Alias for :js:func:`insert_inherits`.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_idl_attribute(object, property_name, description) {\n        return _assert_inherits(\"assert_idl_attribute\")(object, property_name, description);\n    }\n    expose_assert(assert_idl_attribute, \"assert_idl_attribute\");\n\n\n    /**\n     * Assert that ``object`` has a property named ``property_name`` and that the property is readonly.\n     *\n     * Note: The implementation tries to update the named property, so\n     * any side effects of updating will be triggered. Users are\n     * encouraged to instead inspect the property descriptor of ``property_name`` on ``object``.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_readonly(object, property_name, description)\n    {\n         var initial_value = object[property_name];\n         try {\n             //Note that this can have side effects in the case where\n             //the property has PutForwards\n             object[property_name] = initial_value + \"a\"; //XXX use some other value here?\n             assert(same_value(object[property_name], initial_value),\n                    \"assert_readonly\", description,\n                    \"changing property ${p} succeeded\",\n                    {p:property_name});\n         } finally {\n             object[property_name] = initial_value;\n         }\n    }\n    expose_assert(assert_readonly, \"assert_readonly\");\n\n    /**\n     * Assert a JS Error with the expected constructor is thrown.\n     *\n     * @param {object} constructor The expected exception constructor.\n     * @param {Function} func Function which should throw.\n     * @param {string} [description] Error description for the case that the error is not thrown.\n     */\n    function assert_throws_js(constructor, func, description)\n    {\n        assert_throws_js_impl(constructor, func, description,\n                              \"assert_throws_js\");\n    }\n    expose_assert(assert_throws_js, \"assert_throws_js\");\n\n    /**\n     * Like assert_throws_js but allows specifying the assertion type\n     * (assert_throws_js or promise_rejects_js, in practice).\n     */\n    function assert_throws_js_impl(constructor, func, description,\n                                   assertion_type)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            // Basic sanity-checks on the thrown exception.\n            assert(typeof e === \"object\",\n                   assertion_type, description,\n                   \"${func} threw ${e} with type ${type}, not an object\",\n                   {func:func, e:e, type:typeof e});\n\n            assert(e !== null,\n                   assertion_type, description,\n                   \"${func} threw null, not an object\",\n                   {func:func});\n\n            // Basic sanity-check on the passed-in constructor\n            assert(typeof constructor == \"function\",\n                   assertion_type, description,\n                   \"${constructor} is not a constructor\",\n                   {constructor:constructor});\n            var obj = constructor;\n            while (obj) {\n                if (typeof obj === \"function\" &&\n                    obj.name === \"Error\") {\n                    break;\n                }\n                obj = Object.getPrototypeOf(obj);\n            }\n            assert(obj != null,\n                   assertion_type, description,\n                   \"${constructor} is not an Error subtype\",\n                   {constructor:constructor});\n\n            // And checking that our exception is reasonable\n            assert(e.constructor === constructor &&\n                   e.name === constructor.name,\n                   assertion_type, description,\n                   \"${func} threw ${actual} (${actual_name}) expected instance of ${expected} (${expected_name})\",\n                   {func:func, actual:e, actual_name:e.name,\n                    expected:constructor,\n                    expected_name:constructor.name});\n        }\n    }\n\n    // TODO: Figure out how to document the overloads better.\n    // sphinx-js doesn't seem to handle @variation correctly,\n    // and only expects a single JSDoc entry per function.\n    /**\n     * Assert a DOMException with the expected type is thrown.\n     *\n     * There are two ways of calling assert_throws_dom:\n     *\n     * 1) If the DOMException is expected to come from the current global, the\n     * second argument should be the function expected to throw and a third,\n     * optional, argument is the assertion description.\n     *\n     * 2) If the DOMException is expected to come from some other global, the\n     * second argument should be the DOMException constructor from that global,\n     * the third argument the function expected to throw, and the fourth, optional,\n     * argument the assertion description.\n     *\n     * @param {number|string} type - The expected exception name or\n     * code.  See the `table of names and codes\n     * <https://webidl.spec.whatwg.org/#dfn-error-names-table>`_. If a\n     * number is passed it should be one of the numeric code values in\n     * that table (e.g. 3, 4, etc).  If a string is passed it can\n     * either be an exception name (e.g. \"HierarchyRequestError\",\n     * \"WrongDocumentError\") or the name of the corresponding error\n     * code (e.g. \"``HIERARCHY_REQUEST_ERR``\", \"``WRONG_DOCUMENT_ERR``\").\n     * @param {Function} descriptionOrFunc - The function expected to\n     * throw (if the exception comes from another global), or the\n     * optional description of the condition being tested (if the\n     * exception comes from the current global).\n     * @param {string} [description] - Description of the condition\n     * being tested (if the exception comes from another global).\n     *\n     */\n    function assert_throws_dom(type, funcOrConstructor, descriptionOrFunc, maybeDescription)\n    {\n        let constructor, func, description;\n        if (funcOrConstructor.name === \"DOMException\") {\n            constructor = funcOrConstructor;\n            func = descriptionOrFunc;\n            description = maybeDescription;\n        } else {\n            constructor = self.DOMException;\n            func = funcOrConstructor;\n            description = descriptionOrFunc;\n            assert(maybeDescription === undefined,\n                   \"Too many args pased to no-constructor version of assert_throws_dom\");\n        }\n        assert_throws_dom_impl(type, func, description, \"assert_throws_dom\", constructor)\n    }\n    expose_assert(assert_throws_dom, \"assert_throws_dom\");\n\n    /**\n     * Similar to assert_throws_dom but allows specifying the assertion type\n     * (assert_throws_dom or promise_rejects_dom, in practice).  The\n     * \"constructor\" argument must be the DOMException constructor from the\n     * global we expect the exception to come from.\n     */\n    function assert_throws_dom_impl(type, func, description, assertion_type, constructor)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            // Basic sanity-checks on the thrown exception.\n            assert(typeof e === \"object\",\n                   assertion_type, description,\n                   \"${func} threw ${e} with type ${type}, not an object\",\n                   {func:func, e:e, type:typeof e});\n\n            assert(e !== null,\n                   assertion_type, description,\n                   \"${func} threw null, not an object\",\n                   {func:func});\n\n            // Sanity-check our type\n            assert(typeof type == \"number\" ||\n                   typeof type == \"string\",\n                   assertion_type, description,\n                   \"${type} is not a number or string\",\n                   {type:type});\n\n            var codename_name_map = {\n                INDEX_SIZE_ERR: 'IndexSizeError',\n                HIERARCHY_REQUEST_ERR: 'HierarchyRequestError',\n                WRONG_DOCUMENT_ERR: 'WrongDocumentError',\n                INVALID_CHARACTER_ERR: 'InvalidCharacterError',\n                NO_MODIFICATION_ALLOWED_ERR: 'NoModificationAllowedError',\n                NOT_FOUND_ERR: 'NotFoundError',\n                NOT_SUPPORTED_ERR: 'NotSupportedError',\n                INUSE_ATTRIBUTE_ERR: 'InUseAttributeError',\n                INVALID_STATE_ERR: 'InvalidStateError',\n                SYNTAX_ERR: 'SyntaxError',\n                INVALID_MODIFICATION_ERR: 'InvalidModificationError',\n                NAMESPACE_ERR: 'NamespaceError',\n                INVALID_ACCESS_ERR: 'InvalidAccessError',\n                TYPE_MISMATCH_ERR: 'TypeMismatchError',\n                SECURITY_ERR: 'SecurityError',\n                NETWORK_ERR: 'NetworkError',\n                ABORT_ERR: 'AbortError',\n                URL_MISMATCH_ERR: 'URLMismatchError',\n                QUOTA_EXCEEDED_ERR: 'QuotaExceededError',\n                TIMEOUT_ERR: 'TimeoutError',\n                INVALID_NODE_TYPE_ERR: 'InvalidNodeTypeError',\n                DATA_CLONE_ERR: 'DataCloneError'\n            };\n\n            var name_code_map = {\n                IndexSizeError: 1,\n                HierarchyRequestError: 3,\n                WrongDocumentError: 4,\n                InvalidCharacterError: 5,\n                NoModificationAllowedError: 7,\n                NotFoundError: 8,\n                NotSupportedError: 9,\n                InUseAttributeError: 10,\n                InvalidStateError: 11,\n                SyntaxError: 12,\n                InvalidModificationError: 13,\n                NamespaceError: 14,\n                InvalidAccessError: 15,\n                TypeMismatchError: 17,\n                SecurityError: 18,\n                NetworkError: 19,\n                AbortError: 20,\n                URLMismatchError: 21,\n                QuotaExceededError: 22,\n                TimeoutError: 23,\n                InvalidNodeTypeError: 24,\n                DataCloneError: 25,\n\n                EncodingError: 0,\n                NotReadableError: 0,\n                UnknownError: 0,\n                ConstraintError: 0,\n                DataError: 0,\n                TransactionInactiveError: 0,\n                ReadOnlyError: 0,\n                VersionError: 0,\n                OperationError: 0,\n                NotAllowedError: 0,\n                OptOutError: 0\n            };\n\n            var code_name_map = {};\n            for (var key in name_code_map) {\n                if (name_code_map[key] > 0) {\n                    code_name_map[name_code_map[key]] = key;\n                }\n            }\n\n            var required_props = {};\n            var name;\n\n            if (typeof type === \"number\") {\n                if (type === 0) {\n                    throw new AssertionError('Test bug: ambiguous DOMException code 0 passed to assert_throws_dom()');\n                } else if (!(type in code_name_map)) {\n                    throw new AssertionError('Test bug: unrecognized DOMException code \"' + type + '\" passed to assert_throws_dom()');\n                }\n                name = code_name_map[type];\n                required_props.code = type;\n            } else if (typeof type === \"string\") {\n                name = type in codename_name_map ? codename_name_map[type] : type;\n                if (!(name in name_code_map)) {\n                    throw new AssertionError('Test bug: unrecognized DOMException code name or name \"' + type + '\" passed to assert_throws_dom()');\n                }\n\n                required_props.code = name_code_map[name];\n            }\n\n            if (required_props.code === 0 ||\n               (\"name\" in e &&\n                e.name !== e.name.toUpperCase() &&\n                e.name !== \"DOMException\")) {\n                // New style exception: also test the name property.\n                required_props.name = name;\n            }\n\n            for (var prop in required_props) {\n                assert(prop in e && e[prop] == required_props[prop],\n                       assertion_type, description,\n                       \"${func} threw ${e} that is not a DOMException \" + type + \": property ${prop} is equal to ${actual}, expected ${expected}\",\n                       {func:func, e:e, prop:prop, actual:e[prop], expected:required_props[prop]});\n            }\n\n            // Check that the exception is from the right global.  This check is last\n            // so more specific, and more informative, checks on the properties can\n            // happen in case a totally incorrect exception is thrown.\n            assert(e.constructor === constructor,\n                   assertion_type, description,\n                   \"${func} threw an exception from the wrong global\",\n                   {func});\n\n        }\n    }\n\n    /**\n     * Assert the provided value is thrown.\n     *\n     * @param {value} exception The expected exception.\n     * @param {Function} func Function which should throw.\n     * @param {string} [description] Error description for the case that the error is not thrown.\n     */\n    function assert_throws_exactly(exception, func, description)\n    {\n        assert_throws_exactly_impl(exception, func, description,\n                                   \"assert_throws_exactly\");\n    }\n    expose_assert(assert_throws_exactly, \"assert_throws_exactly\");\n\n    /**\n     * Like assert_throws_exactly but allows specifying the assertion type\n     * (assert_throws_exactly or promise_rejects_exactly, in practice).\n     */\n    function assert_throws_exactly_impl(exception, func, description,\n                                        assertion_type)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            assert(same_value(e, exception), assertion_type, description,\n                   \"${func} threw ${e} but we expected it to throw ${exception}\",\n                   {func:func, e:e, exception:exception});\n        }\n    }\n\n    /**\n     * Asserts if called. Used to ensure that a specific codepath is\n     * not taken e.g. that an error event isn't fired.\n     *\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_unreached(description) {\n         assert(false, \"assert_unreached\", description,\n                \"Reached unreachable code\");\n    }\n    expose_assert(assert_unreached, \"assert_unreached\");\n\n    /**\n     * @callback AssertFunc\n     * @param {Any} actual\n     * @param {Any} expected\n     * @param {Any[]} args\n     */\n\n    /**\n     * Asserts that ``actual`` matches at least one value of ``expected``\n     * according to a comparison defined by ``assert_func``.\n     *\n     * Note that tests with multiple allowed pass conditions are bad\n     * practice unless the spec specifically allows multiple\n     * behaviours. Test authors should not use this method simply to\n     * hide UA bugs.\n     *\n     * @param {AssertFunc} assert_func - Function to compare actual\n     * and expected. It must throw when the comparison fails and\n     * return when the comparison passes.\n     * @param {Any} actual - Test value.\n     * @param {Array} expected_array - Array of possible expected values.\n     * @param {Any[]} args - Additional arguments to pass to ``assert_func``.\n     */\n    function assert_any(assert_func, actual, expected_array, ...args)\n    {\n        var errors = [];\n        var passed = false;\n        forEach(expected_array,\n                function(expected)\n                {\n                    try {\n                        assert_func.apply(this, [actual, expected].concat(args));\n                        passed = true;\n                    } catch (e) {\n                        errors.push(e.message);\n                    }\n                });\n        if (!passed) {\n            throw new AssertionError(errors.join(\"\\n\\n\"));\n        }\n    }\n    // FIXME: assert_any cannot use expose_assert, because assert_wrapper does\n    // not support nested assert calls (e.g. to assert_func). We need to\n    // support bypassing assert_wrapper for the inner asserts here.\n    expose(assert_any, \"assert_any\");\n\n    /**\n     * Assert that a feature is implemented, based on a 'truthy' condition.\n     *\n     * This function should be used to early-exit from tests in which there is\n     * no point continuing without support for a non-optional spec or spec\n     * feature. For example:\n     *\n     *     assert_implements(window.Foo, 'Foo is not supported');\n     *\n     * @param {object} condition The truthy value to test\n     * @param {string} [description] Error description for the case that the condition is not truthy.\n     */\n    function assert_implements(condition, description) {\n        assert(!!condition, \"assert_implements\", description);\n    }\n    expose_assert(assert_implements, \"assert_implements\")\n\n    /**\n     * Assert that an optional feature is implemented, based on a 'truthy' condition.\n     *\n     * This function should be used to early-exit from tests in which there is\n     * no point continuing without support for an explicitly optional spec or\n     * spec feature. For example:\n     *\n     *     assert_implements_optional(video.canPlayType(\"video/webm\"),\n     *                                \"webm video playback not supported\");\n     *\n     * @param {object} condition The truthy value to test\n     * @param {string} [description] Error description for the case that the condition is not truthy.\n     */\n    function assert_implements_optional(condition, description) {\n        if (!condition) {\n            throw new OptionalFeatureUnsupportedError(description);\n        }\n    }\n    expose_assert(assert_implements_optional, \"assert_implements_optional\");\n\n    /**\n     * @class\n     *\n     * A single subtest. A Test is not constructed directly but via the\n     * :js:func:`test`, :js:func:`async_test` or :js:func:`promise_test` functions.\n     *\n     * @param {string} name - This must be unique in a given file and must be\n     * invariant between runs.\n     *\n     */\n    function Test(name, properties)\n    {\n        if (tests.file_is_test && tests.tests.length) {\n            throw new Error(\"Tried to create a test with file_is_test\");\n        }\n        /** The test name. */\n        this.name = name;\n\n        this.phase = (tests.is_aborted || tests.phase === tests.phases.COMPLETE) ?\n            this.phases.COMPLETE : this.phases.INITIAL;\n\n        /** The test status code.*/\n        this.status = this.NOTRUN;\n        this.timeout_id = null;\n        this.index = null;\n\n        this.properties = properties || {};\n        this.timeout_length = settings.test_timeout;\n        if (this.timeout_length !== null) {\n            this.timeout_length *= tests.timeout_multiplier;\n        }\n\n        /** A message indicating the reason for test failure. */\n        this.message = null;\n        /** Stack trace in case of failure. */\n        this.stack = null;\n\n        this.steps = [];\n        this._is_promise_test = false;\n\n        this.cleanup_callbacks = [];\n        this._user_defined_cleanup_count = 0;\n        this._done_callbacks = [];\n\n        if (typeof AbortController === \"function\") {\n            this._abortController = new AbortController();\n        }\n\n        // Tests declared following harness completion are likely an indication\n        // of a programming error, but they cannot be reported\n        // deterministically.\n        if (tests.phase === tests.phases.COMPLETE) {\n            return;\n        }\n\n        tests.push(this);\n    }\n\n    /**\n     * Enum of possible test statuses.\n     *\n     * :values:\n     *   - ``PASS``\n     *   - ``FAIL``\n     *   - ``TIMEOUT``\n     *   - ``NOTRUN``\n     *   - ``PRECONDITION_FAILED``\n     */\n    Test.statuses = {\n        PASS:0,\n        FAIL:1,\n        TIMEOUT:2,\n        NOTRUN:3,\n        PRECONDITION_FAILED:4\n    };\n\n    Test.prototype = merge({}, Test.statuses);\n\n    Test.prototype.phases = {\n        INITIAL:0,\n        STARTED:1,\n        HAS_RESULT:2,\n        CLEANING:3,\n        COMPLETE:4\n    };\n\n    Test.prototype.status_formats = {\n        0: \"Pass\",\n        1: \"Fail\",\n        2: \"Timeout\",\n        3: \"Not Run\",\n        4: \"Optional Feature Unsupported\",\n    }\n\n    Test.prototype.format_status = function() {\n        return this.status_formats[this.status];\n    }\n\n    Test.prototype.structured_clone = function()\n    {\n        if (!this._structured_clone) {\n            var msg = this.message;\n            msg = msg ? String(msg) : msg;\n            this._structured_clone = merge({\n                name:String(this.name),\n                properties:merge({}, this.properties),\n                phases:merge({}, this.phases)\n            }, Test.statuses);\n        }\n        this._structured_clone.status = this.status;\n        this._structured_clone.message = this.message;\n        this._structured_clone.stack = this.stack;\n        this._structured_clone.index = this.index;\n        this._structured_clone.phase = this.phase;\n        return this._structured_clone;\n    };\n\n    /**\n     * Run a single step of an ongoing test.\n     *\n     * @param {string} func - Callback function to run as a step. If\n     * this throws an :js:func:`AssertionError`, or any other\n     * exception, the :js:class:`Test` status is set to ``FAIL``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling ``func``. Defaults to the  :js:class:`Test` object.\n     */\n    Test.prototype.step = function(func, this_obj)\n    {\n        if (this.phase > this.phases.STARTED) {\n            return;\n        }\n\n        if (this.phase !== this.phases.STARTED) {\n            console.log(`[${Date.now()}] prototype.step START`)\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"START\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': this.name}, ts: Date.now()}}))\n            console.log(\"LOG\", window)\n        }\n\n        if (settings.debug && this.phase !== this.phases.STARTED) {\n            console.log(\"TEST START\", this.name);\n        }\n        this.phase = this.phases.STARTED;\n        //If we don't get a result before the harness times out that will be a test timeout\n        this.set_status(this.TIMEOUT, \"Test timed out\");\n\n        tests.started = true;\n        tests.current_test = this;\n        tests.notify_test_state(this);\n\n        if (this.timeout_id === null) {\n            this.set_timeout();\n        }\n\n        this.steps.push(func);\n\n        if (arguments.length === 1) {\n            this_obj = this;\n        }\n\n        if (settings.debug) {\n            console.debug(\"TEST STEP\", this.name);\n        }\n\n        try {\n            return func.apply(this_obj, Array.prototype.slice.call(arguments, 2));\n        } catch (e) {\n            if (this.phase >= this.phases.HAS_RESULT) {\n                return;\n            }\n            var status = e instanceof OptionalFeatureUnsupportedError ? this.PRECONDITION_FAILED : this.FAIL;\n            var message = String((typeof e === \"object\" && e !== null) ? e.message : e);\n            var stack = e.stack ? e.stack : null;\n\n            this.set_status(status, message, stack);\n            this.phase = this.phases.HAS_RESULT;\n            this.done();\n        } finally {\n            this.current_test = null;\n        }\n    };\n\n    /**\n     * Wrap a function so that it runs as a step of the current test.\n     *\n     * This allows creating a callback function that will run as a\n     * test step.\n     *\n     * @example\n     * let t = async_test(\"Example\");\n     * onload = t.step_func(e => {\n     *   assert_equals(e.name, \"load\");\n     *   // Mark the test as complete.\n     *   t.done();\n     * })\n     *\n     * @param {string} func - Function to run as a step. If this\n     * throws an :js:func:`AssertionError`, or any other exception,\n     * the :js:class:`Test` status is set to ``FAIL``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling ``func``. Defaults to the :js:class:`Test` object.\n     */\n    Test.prototype.step_func = function(func, this_obj)\n    {\n        var test_this = this;\n\n        if (arguments.length === 1) {\n            this_obj = test_this;\n        }\n\n        return function()\n        {\n            // console.log(\"ARGS\", arguments[0])Vjj\n            // console.log(\"ARGS2\", arguments)\n            // console.log(\"ARGS\", func.toString())\n            \n            var msg = {'isSecure': window.isSecureContext ,'orig': document.url, 'frame': frameElement, 'type': `Step`, 'args': [func.toString(), \"RESPONSE PLACEHOLDER\"]}\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"EVENT\", content: msg, ts: Date.now()}}))\n\n            return test_this.step.apply(test_this, [func, this_obj].concat(\n                Array.prototype.slice.call(arguments)));\n        };\n    };\n\n    /**\n     * Wrap a function so that it runs as a step of the current test,\n     * and automatically marks the test as complete if the function\n     * returns without error.\n     *\n     * @param {string} func - Function to run as a step. If this\n     * throws an :js:func:`AssertionError`, or any other exception,\n     * the :js:class:`Test` status is set to ``FAIL``. If it returns\n     * without error the status is set to ``PASS``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling `func`. Defaults to the :js:class:`Test` object.\n     */\n    Test.prototype.step_func_done = function(func, this_obj)\n    {\n        var test_this = this;\n\n        if (arguments.length === 1) {\n            this_obj = test_this;\n        }\n\n        return function()\n        {\n            if (func) {\n                test_this.step.apply(test_this, [func, this_obj].concat(\n                    Array.prototype.slice.call(arguments)));\n            }\n            test_this.done();\n        };\n    };\n\n    /**\n     * Return a function that automatically sets the current test to\n     * ``FAIL`` if it's called.\n     *\n     * @param {string} [description] - Error message to add to assert\n     * in case of failure.\n     *\n     */\n    Test.prototype.unreached_func = function(description)\n    {\n        return this.step_func(function() {\n            assert_unreached(description);\n        });\n    };\n\n    /**\n     * Run a function as a step of the test after a given timeout.\n     *\n     * This multiplies the timeout by the global timeout multiplier to\n     * account for the expected execution speed of the current test\n     * environment. For example ``test.step_timeout(f, 2000)`` with a\n     * timeout multiplier of 2 will wait for 4000ms before calling ``f``.\n     *\n     * In general it's encouraged to use :js:func:`Test.step_wait` or\n     * :js:func:`step_wait_func` in preference to this function where possible,\n     * as they provide better test performance.\n     *\n     * @param {Function} func - Function to run as a test\n     * step.\n     * @param {number} timeout - Time in ms to wait before running the\n     * test step. The actual wait time is ``timeout`` x\n     * ``timeout_multiplier``.\n     *\n     */\n    Test.prototype.step_timeout = function(func, timeout) {\n        var test_this = this;\n        var args = Array.prototype.slice.call(arguments, 2);\n        return setTimeout(this.step_func(function() {\n            return func.apply(test_this, args);\n        }), timeout * tests.timeout_multiplier);\n    };\n\n    /**\n     * Poll for a function to return true, and call a callback\n     * function once it does, or assert if a timeout is\n     * reached. This is preferred over a simple step_timeout\n     * whenever possible since it allows the timeout to be longer\n     * to reduce intermittents without compromising test execution\n     * speed when the condition is quickly met.\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean. The callback is called\n     *                        when this function returns true.\n     * @param {Function} func A function taking no arguments to call once\n     *                        the condition is met.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     *\n     */\n    Test.prototype.step_wait_func = function(cond, func, description,\n                                             timeout=3000, interval=100) {\n        var timeout_full = timeout * tests.timeout_multiplier;\n        var remaining = Math.ceil(timeout_full / interval);\n        var test_this = this;\n\n        var wait_for_inner = test_this.step_func(() => {\n            if (cond()) {\n                func();\n            } else {\n                if(remaining === 0) {\n                    assert(false, \"step_wait_func\", description,\n                           \"Timed out waiting on condition\");\n                }\n                remaining--;\n                setTimeout(wait_for_inner, interval);\n            }\n        });\n\n        wait_for_inner();\n    };\n\n    /**\n     * Poll for a function to return true, and invoke a callback\n     * followed by this.done() once it does, or assert if a timeout\n     * is reached. This is preferred over a simple step_timeout\n     * whenever possible since it allows the timeout to be longer\n     * to reduce intermittents without compromising test execution speed\n     * when the condition is quickly met.\n     *\n     * @example\n     * async_test(t => {\n     *  const popup = window.open(\"resources/coop-coep.py?coop=same-origin&coep=&navigate=about:blank\");\n     *  t.add_cleanup(() => popup.close());\n     *  assert_equals(window, popup.opener);\n     *\n     *  popup.onload = t.step_func(() => {\n     *    assert_true(popup.location.href.endsWith(\"&navigate=about:blank\"));\n     *    // Use step_wait_func_done as about:blank cannot message back.\n     *    t.step_wait_func_done(() => popup.location.href === \"about:blank\");\n     *  });\n     * }, \"Navigating a popup to about:blank\");\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean. The callback is called\n     *                        when this function returns true.\n     * @param {Function} func A function taking no arguments to call once\n     *                        the condition is met.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     *\n     */\n    Test.prototype.step_wait_func_done = function(cond, func, description,\n                                                  timeout=3000, interval=100) {\n         this.step_wait_func(cond, () => {\n            if (func) {\n                func();\n            }\n            this.done();\n         }, description, timeout, interval);\n    };\n\n    /**\n     * Poll for a function to return true, and resolve a promise\n     * once it does, or assert if a timeout is reached. This is\n     * preferred over a simple step_timeout whenever possible\n     * since it allows the timeout to be longer to reduce\n     * intermittents without compromising test execution speed\n     * when the condition is quickly met.\n     *\n     * @example\n     * promise_test(async t => {\n     *  // â¦\n     * await t.step_wait(() => frame.contentDocument === null, \"Frame navigated to a cross-origin document\");\n     * // â¦\n     * }, \"\");\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean.\n     * @param {string} [description] Error message to add to assert in case of\n     *                              failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     * @returns {Promise} Promise resolved once cond is met.\n     *\n     */\n    Test.prototype.step_wait = function(cond, description, timeout=3000, interval=100) {\n        return new Promise(resolve => {\n            this.step_wait_func(cond, resolve, description, timeout, interval);\n        });\n    }\n\n    /*\n     * Private method for registering cleanup functions. `testharness.js`\n     * internals should use this method instead of the public `add_cleanup`\n     * method in order to hide implementation details from the harness status\n     * message in the case errors.\n     */\n    Test.prototype._add_cleanup = function(callback) {\n        this.cleanup_callbacks.push(callback);\n    };\n\n    /**\n     * Schedule a function to be run after the test result is known, regardless\n     * of passing or failing state.\n     *\n     * The behavior of this function will not\n     * influence the result of the test, but if an exception is thrown, the\n     * test harness will report an error.\n     *\n     * @param {Function} callback - The cleanup function to run. This\n     * is called with no arguments.\n     */\n    Test.prototype.add_cleanup = function(callback) {\n        this._user_defined_cleanup_count += 1;\n        this._add_cleanup(callback);\n    };\n\n    Test.prototype.set_timeout = function()\n    {\n        if (this.timeout_length !== null) {\n            var this_obj = this;\n            this.timeout_id = setTimeout(function()\n                                         {\n                                             this_obj.timeout();\n                                         }, this.timeout_length);\n        }\n    };\n\n    Test.prototype.set_status = function(status, message, stack)\n    {\n        this.status = status;\n        this.message = message;\n        this.stack = stack ? stack : null;\n    };\n\n    /**\n     * Manually set the test status to ``TIMEOUT``.\n     */\n    Test.prototype.timeout = function()\n    {\n        this.timeout_id = null;\n        this.set_status(this.TIMEOUT, \"Test timed out\");\n        this.phase = this.phases.HAS_RESULT;\n        this.done();\n    };\n\n    /**\n     * Manually set the test status to ``TIMEOUT``.\n     *\n     * Alias for `Test.timeout <#Test.timeout>`_.\n     */\n    Test.prototype.force_timeout = function() {\n        return this.timeout();\n    };\n\n    /**\n     * Mark the test as complete.\n     *\n     * This sets the test status to ``PASS`` if no other status was\n     * already recorded. Any subsequent attempts to run additional\n     * test steps will be ignored.\n     *\n     * After setting the test status any test cleanup functions will\n     * be run.\n     */\n    Test.prototype.done = function()\n    {\n        if (this.phase >= this.phases.CLEANING) {\n            return;\n        }\n\n        if (this.phase <= this.phases.STARTED) {\n            this.set_status(this.PASS, null);\n        }\n\n        if (global_scope.clearTimeout) {\n            clearTimeout(this.timeout_id);\n        }\n\n        if (settings.debug) {\n            console.log(\"TEST DONE\",\n                        this.status,\n                        this.name);\n        }\n\n        this.cleanup();\n    };\n\n    function add_test_done_callback(test, callback)\n    {\n        if (test.phase === test.phases.COMPLETE) {\n            callback();\n            return;\n        }\n\n        test._done_callbacks.push(callback);\n    }\n\n    /*\n     * Invoke all specified cleanup functions. If one or more produce an error,\n     * the context is in an unpredictable state, so all further testing should\n     * be cancelled.\n     */\n    Test.prototype.cleanup = function() {\n        for(let i = 0; i < 1000000; i++);\n        window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"END\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': this.name, 'status': !this.status}, ts: Date.now()}}))\n        var errors = [];\n        var bad_value_count = 0;\n        function on_error(e) {\n            errors.push(e);\n            // Abort tests immediately so that tests declared within subsequent\n            // cleanup functions are not run.\n            tests.abort();\n        }\n        var this_obj = this;\n        var results = [];\n\n        this.phase = this.phases.CLEANING;\n\n        if (this._abortController) {\n            this._abortController.abort(\"Test cleanup\");\n        }\n\n        forEach(this.cleanup_callbacks,\n                function(cleanup_callback) {\n                    var result;\n\n                    try {\n                        result = cleanup_callback();\n                    } catch (e) {\n                        on_error(e);\n                        return;\n                    }\n\n                    if (!is_valid_cleanup_result(this_obj, result)) {\n                        bad_value_count += 1;\n                        // Abort tests immediately so that tests declared\n                        // within subsequent cleanup functions are not run.\n                        tests.abort();\n                    }\n\n                    results.push(result);\n                });\n\n        if (!this._is_promise_test) {\n            cleanup_done(this_obj, errors, bad_value_count);\n        } else {\n            all_async(results,\n                      function(result, done) {\n                          if (result && typeof result.then === \"function\") {\n                              result\n                                  .then(null, on_error)\n                                  .then(done);\n                          } else {\n                              done();\n                          }\n                      },\n                      function() {\n                          cleanup_done(this_obj, errors, bad_value_count);\n                      });\n        }\n    };\n\n    /*\n     * Determine if the return value of a cleanup function is valid for a given\n     * test. Any test may return the value `undefined`. Tests created with\n     * `promise_test` may alternatively return \"thenable\" object values.\n     */\n    function is_valid_cleanup_result(test, result) {\n        if (result === undefined) {\n            return true;\n        }\n\n        if (test._is_promise_test) {\n            return result && typeof result.then === \"function\";\n        }\n\n        return false;\n    }\n\n    function cleanup_done(test, errors, bad_value_count) {\n        if (errors.length || bad_value_count) {\n            var total = test._user_defined_cleanup_count;\n\n            tests.status.status = tests.status.ERROR;\n            tests.status.stack = null;\n            tests.status.message = \"Test named '\" + test.name +\n                \"' specified \" + total +\n                \" 'cleanup' function\" + (total > 1 ? \"s\" : \"\");\n\n            if (errors.length) {\n                tests.status.message += \", and \" + errors.length + \" failed\";\n                tests.status.stack = ((typeof errors[0] === \"object\" &&\n                                       errors[0].hasOwnProperty(\"stack\")) ?\n                                      errors[0].stack : null);\n            }\n\n            if (bad_value_count) {\n                var type = test._is_promise_test ?\n                   \"non-thenable\" : \"non-undefined\";\n                tests.status.message += \", and \" + bad_value_count +\n                    \" returned a \" + type + \" value\";\n            }\n\n            tests.status.message += \".\";\n        }\n\n        test.phase = test.phases.COMPLETE;\n        tests.result(test);\n        forEach(test._done_callbacks,\n                function(callback) {\n                    callback();\n                });\n        test._done_callbacks.length = 0;\n    }\n\n    /**\n     * Gives an AbortSignal that will be aborted when the test finishes.\n     */\n    Test.prototype.get_signal = function() {\n        if (!this._abortController) {\n            throw new Error(\"AbortController is not supported in this browser\");\n        }\n        return this._abortController.signal;\n    }\n\n    /**\n     * A RemoteTest object mirrors a Test object on a remote worker. The\n     * associated RemoteWorker updates the RemoteTest object in response to\n     * received events. In turn, the RemoteTest object replicates these events\n     * on the local document. This allows listeners (test result reporting\n     * etc..) to transparently handle local and remote events.\n     */\n    function RemoteTest(clone) {\n        var this_obj = this;\n        Object.keys(clone).forEach(\n                function(key) {\n                    this_obj[key] = clone[key];\n                });\n        this.index = null;\n        this.phase = this.phases.INITIAL;\n        this.update_state_from(clone);\n        this._done_callbacks = [];\n        tests.push(this);\n    }\n\n    RemoteTest.prototype.structured_clone = function() {\n        var clone = {};\n        Object.keys(this).forEach(\n                (function(key) {\n                    var value = this[key];\n                    // `RemoteTest` instances are responsible for managing\n                    // their own \"done\" callback functions, so those functions\n                    // are not relevant in other execution contexts. Because of\n                    // this (and because Function values cannot be serialized\n                    // for cross-realm transmittance), the property should not\n                    // be considered when cloning instances.\n                    if (key === '_done_callbacks' ) {\n                        return;\n                    }\n\n                    if (typeof value === \"object\" && value !== null) {\n                        clone[key] = merge({}, value);\n                    } else {\n                        clone[key] = value;\n                    }\n                }).bind(this));\n        clone.phases = merge({}, this.phases);\n        return clone;\n    };\n\n    /**\n     * `RemoteTest` instances are objects which represent tests running in\n     * another realm. They do not define \"cleanup\" functions (if necessary,\n     * such functions are defined on the associated `Test` instance within the\n     * external realm). However, `RemoteTests` may have \"done\" callbacks (e.g.\n     * as attached by the `Tests` instance responsible for tracking the overall\n     * test status in the parent realm). The `cleanup` method delegates to\n     * `done` in order to ensure that such callbacks are invoked following the\n     * completion of the `RemoteTest`.\n     */\n    RemoteTest.prototype.cleanup = function() {\n        this.done();\n    };\n    RemoteTest.prototype.phases = Test.prototype.phases;\n    RemoteTest.prototype.update_state_from = function(clone) {\n        this.status = clone.status;\n        this.message = clone.message;\n        this.stack = clone.stack;\n        if (this.phase === this.phases.INITIAL) {\n            this.phase = this.phases.STARTED;\n        }\n    };\n    RemoteTest.prototype.done = function() {\n        this.phase = this.phases.COMPLETE;\n\n        forEach(this._done_callbacks,\n                function(callback) {\n                    callback();\n                });\n    }\n\n    RemoteTest.prototype.format_status = function() {\n        return Test.prototype.status_formats[this.status];\n    }\n\n    /*\n     * A RemoteContext listens for test events from a remote test context, such\n     * as another window or a worker. These events are then used to construct\n     * and maintain RemoteTest objects that mirror the tests running in the\n     * remote context.\n     *\n     * An optional third parameter can be used as a predicate to filter incoming\n     * MessageEvents.\n     */\n    function RemoteContext(remote, message_target, message_filter) {\n        this.running = true;\n        this.started = false;\n        this.tests = new Array();\n        this.early_exception = null;\n\n        var this_obj = this;\n        // If remote context is cross origin assigning to onerror is not\n        // possible, so silently catch those errors.\n        try {\n          remote.onerror = function(error) { this_obj.remote_error(error); };\n        } catch (e) {\n          // Ignore.\n        }\n\n        // Keeping a reference to the remote object and the message handler until\n        // remote_done() is seen prevents the remote object and its message channel\n        // from going away before all the messages are dispatched.\n        this.remote = remote;\n        this.message_target = message_target;\n        this.message_handler = function(message) {\n            var passesFilter = !message_filter || message_filter(message);\n            // The reference to the `running` property in the following\n            // condition is unnecessary because that value is only set to\n            // `false` after the `message_handler` function has been\n            // unsubscribed.\n            // TODO: Simplify the condition by removing the reference.\n            if (this_obj.running && message.data && passesFilter &&\n                (message.data.type in this_obj.message_handlers)) {\n                this_obj.message_handlers[message.data.type].call(this_obj, message.data);\n            }\n        };\n\n        if (self.Promise) {\n            this.done = new Promise(function(resolve) {\n                this_obj.doneResolve = resolve;\n            });\n        }\n\n        this.message_target.addEventListener(\"message\", this.message_handler);\n    }\n\n    RemoteContext.prototype.remote_error = function(error) {\n        if (error.preventDefault) {\n            error.preventDefault();\n        }\n\n        // Defer interpretation of errors until the testing protocol has\n        // started and the remote test's `allow_uncaught_exception` property\n        // is available.\n        if (!this.started) {\n            this.early_exception = error;\n        } else if (!this.allow_uncaught_exception) {\n            this.report_uncaught(error);\n        }\n    };\n\n    RemoteContext.prototype.report_uncaught = function(error) {\n        var message = error.message || String(error);\n        var filename = (error.filename ? \" \" + error.filename: \"\");\n        // FIXME: Display remote error states separately from main document\n        // error state.\n        tests.set_status(tests.status.ERROR,\n                         \"Error in remote\" + filename + \": \" + message,\n                         error.stack);\n    };\n\n    RemoteContext.prototype.start = function(data) {\n        this.started = true;\n        this.allow_uncaught_exception = data.properties.allow_uncaught_exception;\n\n        if (this.early_exception && !this.allow_uncaught_exception) {\n            this.report_uncaught(this.early_exception);\n        }\n    };\n\n    RemoteContext.prototype.test_state = function(data) {\n        var remote_test = this.tests[data.test.index];\n        if (!remote_test) {\n            remote_test = new RemoteTest(data.test);\n            this.tests[data.test.index] = remote_test;\n        }\n        remote_test.update_state_from(data.test);\n        tests.notify_test_state(remote_test);\n    };\n\n    RemoteContext.prototype.test_done = function(data) {\n        var remote_test = this.tests[data.test.index];\n        remote_test.update_state_from(data.test);\n        remote_test.done();\n        tests.result(remote_test);\n    };\n\n    RemoteContext.prototype.remote_done = function(data) {\n        if (tests.status.status === null &&\n            data.status.status !== data.status.OK) {\n            tests.set_status(data.status.status, data.status.message, data.status.stack);\n        }\n\n        for (let assert of data.asserts) {\n            var record = new AssertRecord();\n            record.assert_name = assert.assert_name;\n            record.args = assert.args;\n            record.test = assert.test != null ? this.tests[assert.test.index] : null;\n            record.status = assert.status;\n            record.stack = assert.stack;\n            tests.asserts_run.push(record);\n        }\n\n        this.message_target.removeEventListener(\"message\", this.message_handler);\n        this.running = false;\n\n        // If remote context is cross origin assigning to onerror is not\n        // possible, so silently catch those errors.\n        try {\n          this.remote.onerror = null;\n        } catch (e) {\n          // Ignore.\n        }\n\n        this.remote = null;\n        this.message_target = null;\n        if (this.doneResolve) {\n            this.doneResolve();\n        }\n\n        if (tests.all_done()) {\n            tests.complete();\n        }\n    };\n\n    RemoteContext.prototype.message_handlers = {\n        start: RemoteContext.prototype.start,\n        test_state: RemoteContext.prototype.test_state,\n        result: RemoteContext.prototype.test_done,\n        complete: RemoteContext.prototype.remote_done\n    };\n\n    /**\n     * @class\n     * Status of the overall harness\n     */\n    function TestsStatus()\n    {\n        /** The status code */\n        this.status = null;\n        /** Message in case of failure */\n        this.message = null;\n        /** Stack trace in case of an exception. */\n        this.stack = null;\n    }\n\n    /**\n     * Enum of possible harness statuses.\n     *\n     * :values:\n     *   - ``OK``\n     *   - ``ERROR``\n     *   - ``TIMEOUT``\n     *   - ``PRECONDITION_FAILED``\n     */\n    TestsStatus.statuses = {\n        OK:0,\n        ERROR:1,\n        TIMEOUT:2,\n        PRECONDITION_FAILED:3\n    };\n\n    TestsStatus.prototype = merge({}, TestsStatus.statuses);\n\n    TestsStatus.prototype.formats = {\n        0: \"OK\",\n        1: \"Error\",\n        2: \"Timeout\",\n        3: \"Optional Feature Unsupported\"\n    };\n\n    TestsStatus.prototype.structured_clone = function()\n    {\n        if (!this._structured_clone) {\n            var msg = this.message;\n            msg = msg ? String(msg) : msg;\n            this._structured_clone = merge({\n                status:this.status,\n                message:msg,\n                stack:this.stack\n            }, TestsStatus.statuses);\n        }\n        return this._structured_clone;\n    };\n\n    TestsStatus.prototype.format_status = function() {\n        return this.formats[this.status];\n    };\n\n    /**\n     * @class\n     * Record of an assert that ran.\n     *\n     * @param {Test} test - The test which ran the assert.\n     * @param {string} assert_name - The function name of the assert.\n     * @param {Any} args - The arguments passed to the assert function.\n     */\n    function AssertRecord(test, assert_name, args = []) {\n        /** Name of the assert that ran */\n        this.assert_name = assert_name;\n        /** Test that ran the assert */\n        this.test = test;\n        // Avoid keeping complex objects alive\n        /** Stringification of the arguments that were passed to the assert function */\n        this.args = args.map(x => format_value(x).replace(/\\n/g, \" \"));\n        /** Status of the assert */\n        this.status = null;\n    }\n\n    AssertRecord.prototype.structured_clone = function() {\n        return {\n            assert_name: this.assert_name,\n            test: this.test ? this.test.structured_clone() : null,\n            args: this.args,\n            status: this.status,\n        };\n    };\n\n    function Tests()\n    {\n        this.tests = [];\n        this.num_pending = 0;\n\n        this.phases = {\n            INITIAL:0,\n            SETUP:1,\n            HAVE_TESTS:2,\n            HAVE_RESULTS:3,\n            COMPLETE:4\n        };\n        this.phase = this.phases.INITIAL;\n\n        this.properties = {};\n\n        this.wait_for_finish = false;\n        this.processing_callbacks = false;\n\n        this.allow_uncaught_exception = false;\n\n        this.file_is_test = false;\n        // This value is lazily initialized in order to avoid introducing a\n        // dependency on ECMAScript 2015 Promises to all tests.\n        this.promise_tests = null;\n        this.promise_setup_called = false;\n\n        this.timeout_multiplier = 1;\n        this.timeout_length = test_environment.test_timeout();\n        this.timeout_id = null;\n\n        this.start_callbacks = [];\n        this.test_state_callbacks = [];\n        this.test_done_callbacks = [];\n        this.all_done_callbacks = [];\n\n        this.hide_test_state = false;\n        this.pending_remotes = [];\n\n        this.current_test = null;\n        this.asserts_run = [];\n\n        // Track whether output is enabled, and thus whether or not we should\n        // track asserts.\n        //\n        // On workers we don't get properties set from testharnessreport.js, so\n        // we don't know whether or not to track asserts. To avoid the\n        // resulting performance hit, we assume we are not meant to. This means\n        // that assert tracking does not function on workers.\n        this.output = settings.output && 'document' in global_scope;\n\n        this.status = new TestsStatus();\n\n        var this_obj = this;\n\n        test_environment.add_on_loaded_callback(function() {\n            if (this_obj.all_done()) {\n                this_obj.complete();\n            }\n        });\n\n        this.set_timeout();\n    }\n\n    Tests.prototype.setup = function(func, properties)\n    {\n        if (this.phase >= this.phases.HAVE_RESULTS) {\n            return;\n        }\n\n        if (this.phase < this.phases.SETUP) {\n            this.phase = this.phases.SETUP;\n        }\n\n        this.properties = properties;\n\n        for (var p in properties) {\n            if (properties.hasOwnProperty(p)) {\n                var value = properties[p];\n                if (p == \"allow_uncaught_exception\") {\n                    this.allow_uncaught_exception = value;\n                } else if (p == \"explicit_done\" && value) {\n                    this.wait_for_finish = true;\n                } else if (p == \"explicit_timeout\" && value) {\n                    this.timeout_length = null;\n                    if (this.timeout_id)\n                    {\n                        clearTimeout(this.timeout_id);\n                    }\n                } else if (p == \"single_test\" && value) {\n                    this.set_file_is_test();\n                } else if (p == \"timeout_multiplier\") {\n                    this.timeout_multiplier = value;\n                    if (this.timeout_length) {\n                         this.timeout_length *= this.timeout_multiplier;\n                    }\n                } else if (p == \"hide_test_state\") {\n                    this.hide_test_state = value;\n                } else if (p == \"output\") {\n                    this.output = value;\n                } else if (p === \"debug\") {\n                    settings.debug = value;\n                }\n            }\n        }\n\n        if (func) {\n            try {\n                func();\n            } catch (e) {\n                this.status.status = e instanceof OptionalFeatureUnsupportedError ? this.status.PRECONDITION_FAILED : this.status.ERROR;\n                this.status.message = String(e);\n                this.status.stack = e.stack ? e.stack : null;\n                this.complete();\n            }\n        }\n        this.set_timeout();\n    };\n\n    Tests.prototype.set_file_is_test = function() {\n        if (this.tests.length > 0) {\n            throw new Error(\"Tried to set file as test after creating a test\");\n        }\n        this.wait_for_finish = true;\n        this.file_is_test = true;\n        // Create the test, which will add it to the list of tests\n        tests.current_test = async_test();\n    };\n\n    Tests.prototype.set_status = function(status, message, stack)\n    {\n        this.status.status = status;\n        this.status.message = message;\n        this.status.stack = stack ? stack : null;\n    };\n\n    Tests.prototype.set_timeout = function() {\n        if (global_scope.clearTimeout) {\n            var this_obj = this;\n            clearTimeout(this.timeout_id);\n            if (this.timeout_length !== null) {\n                this.timeout_id = setTimeout(function() {\n                                                 this_obj.timeout();\n                                             }, this.timeout_length);\n            }\n        }\n    };\n\n    Tests.prototype.timeout = function() {\n        var test_in_cleanup = null;\n\n        if (this.status.status === null) {\n            forEach(this.tests,\n                    function(test) {\n                        // No more than one test is expected to be in the\n                        // \"CLEANUP\" phase at any time\n                        if (test.phase === test.phases.CLEANING) {\n                            test_in_cleanup = test;\n                        }\n\n                        test.phase = test.phases.COMPLETE;\n                    });\n\n            // Timeouts that occur while a test is in the \"cleanup\" phase\n            // indicate that some global state was not properly reverted. This\n            // invalidates the overall test execution, so the timeout should be\n            // reported as an error and cancel the execution of any remaining\n            // tests.\n            if (test_in_cleanup) {\n                this.status.status = this.status.ERROR;\n                this.status.message = \"Timeout while running cleanup for \" +\n                    \"test named \\\"\" + test_in_cleanup.name + \"\\\".\";\n                tests.status.stack = null;\n            } else {\n                this.status.status = this.status.TIMEOUT;\n            }\n        }\n\n        this.complete();\n    };\n\n    Tests.prototype.end_wait = function()\n    {\n        this.wait_for_finish = false;\n        if (this.all_done()) {\n            this.complete();\n        }\n    };\n\n    Tests.prototype.push = function(test)\n    {\n        if (this.phase < this.phases.HAVE_TESTS) {\n            this.start();\n        }\n        this.num_pending++;\n        test.index = this.tests.push(test);\n        this.notify_test_state(test);\n    };\n\n    Tests.prototype.notify_test_state = function(test) {\n        var this_obj = this;\n        forEach(this.test_state_callbacks,\n                function(callback) {\n                    callback(test, this_obj);\n                });\n    };\n\n    Tests.prototype.all_done = function() {\n        return (this.tests.length > 0 || this.pending_remotes.length > 0) &&\n                test_environment.all_loaded &&\n                (this.num_pending === 0 || this.is_aborted) && !this.wait_for_finish &&\n                !this.processing_callbacks &&\n                !this.pending_remotes.some(function(w) { return w.running; });\n    };\n\n    Tests.prototype.start = function() {\n        this.phase = this.phases.HAVE_TESTS;\n        this.notify_start();\n    };\n\n    Tests.prototype.notify_start = function() {\n        var this_obj = this;\n        forEach (this.start_callbacks,\n                 function(callback)\n                 {\n                     callback(this_obj.properties);\n                 });\n    };\n\n    Tests.prototype.result = function(test)\n    {\n        // If the harness has already transitioned beyond the `HAVE_RESULTS`\n        // phase, subsequent tests should not cause it to revert.\n        if (this.phase <= this.phases.HAVE_RESULTS) {\n            this.phase = this.phases.HAVE_RESULTS;\n        }\n        this.num_pending--;\n        this.notify_result(test);\n    };\n\n    Tests.prototype.notify_result = function(test) {\n        var this_obj = this;\n        this.processing_callbacks = true;\n        forEach(this.test_done_callbacks,\n                function(callback)\n                {\n                    callback(test, this_obj);\n                });\n        this.processing_callbacks = false;\n        if (this_obj.all_done()) {\n            this_obj.complete();\n        }\n    };\n\n    Tests.prototype.complete = function() {\n        if (this.phase === this.phases.COMPLETE) {\n            return;\n        }\n        var this_obj = this;\n        var all_complete = function() {\n            this_obj.phase = this_obj.phases.COMPLETE;\n            this_obj.notify_complete();\n        };\n        var incomplete = filter(this.tests,\n                                function(test) {\n                                    return test.phase < test.phases.COMPLETE;\n                                });\n\n        /**\n         * To preserve legacy behavior, overall test completion must be\n         * signaled synchronously.\n         */\n        if (incomplete.length === 0) {\n            all_complete();\n            return;\n        }\n\n        all_async(incomplete,\n                  function(test, testDone)\n                  {\n                      if (test.phase === test.phases.INITIAL) {\n                          test.phase = test.phases.COMPLETE;\n                          testDone();\n                      } else {\n                          add_test_done_callback(test, testDone);\n                          test.cleanup();\n                      }\n                  },\n                  all_complete);\n    };\n\n    Tests.prototype.set_assert = function(assert_name, args) {\n        this.asserts_run.push(new AssertRecord(this.current_test, assert_name, args))\n    }\n\n    Tests.prototype.set_assert_status = function(status, stack) {\n        let assert_record = this.asserts_run[this.asserts_run.length - 1];\n        assert_record.status = status;\n        assert_record.stack = stack;\n    }\n\n    /**\n     * Update the harness status to reflect an unrecoverable harness error that\n     * should cancel all further testing. Update all previously-defined tests\n     * which have not yet started to indicate that they will not be executed.\n     */\n    Tests.prototype.abort = function() {\n        this.status.status = this.status.ERROR;\n        this.is_aborted = true;\n\n        forEach(this.tests,\n                function(test) {\n                    if (test.phase === test.phases.INITIAL) {\n                        test.phase = test.phases.COMPLETE;\n                    }\n                });\n    };\n\n    /*\n     * Determine if any tests share the same `name` property. Return an array\n     * containing the names of any such duplicates.\n     */\n    Tests.prototype.find_duplicates = function() {\n        var names = Object.create(null);\n        var duplicates = [];\n\n        forEach (this.tests,\n                 function(test)\n                 {\n                     if (test.name in names && duplicates.indexOf(test.name) === -1) {\n                        duplicates.push(test.name);\n                     }\n                     names[test.name] = true;\n                 });\n\n        return duplicates;\n    };\n\n    function code_unit_str(char) {\n        return 'U+' + char.charCodeAt(0).toString(16);\n    }\n\n    function sanitize_unpaired_surrogates(str) {\n        return str.replace(\n            /([\\ud800-\\udbff]+)(?![\\udc00-\\udfff])|(^|[^\\ud800-\\udbff])([\\udc00-\\udfff]+)/g,\n            function(_, low, prefix, high) {\n                var output = prefix || \"\";  // prefix may be undefined\n                var string = low || high;  // only one of these alternates can match\n                for (var i = 0; i < string.length; i++) {\n                    output += code_unit_str(string[i]);\n                }\n                return output;\n            });\n    }\n\n    function sanitize_all_unpaired_surrogates(tests) {\n        forEach (tests,\n                 function (test)\n                 {\n                     var sanitized = sanitize_unpaired_surrogates(test.name);\n\n                     if (test.name !== sanitized) {\n                         test.name = sanitized;\n                         delete test._structured_clone;\n                     }\n                 });\n    }\n\n    Tests.prototype.notify_complete = function() {\n        var this_obj = this;\n        var duplicates;\n\n        if (this.status.status === null) {\n            duplicates = this.find_duplicates();\n\n            // Some transports adhere to UTF-8's restriction on unpaired\n            // surrogates. Sanitize the titles so that the results can be\n            // consistently sent via all transports.\n            sanitize_all_unpaired_surrogates(this.tests);\n\n            // Test names are presumed to be unique within test files--this\n            // allows consumers to use them for identification purposes.\n            // Duplicated names violate this expectation and should therefore\n            // be reported as an error.\n            if (duplicates.length) {\n                this.status.status = this.status.ERROR;\n                this.status.message =\n                   duplicates.length + ' duplicate test name' +\n                   (duplicates.length > 1 ? 's' : '') + ': \"' +\n                   duplicates.join('\", \"') + '\"';\n            } else {\n                this.status.status = this.status.OK;\n            }\n        }\n\n        forEach (this.all_done_callbacks,\n                 function(callback)\n                 {\n                     callback(this_obj.tests, this_obj.status, this_obj.asserts_run);\n                 });\n    };\n\n    /*\n     * Constructs a RemoteContext that tracks tests from a specific worker.\n     */\n    Tests.prototype.create_remote_worker = function(worker) {\n        var message_port;\n\n        if (is_service_worker(worker)) {\n            message_port = navigator.serviceWorker;\n            worker.postMessage({type: \"connect\"});\n        } else if (is_shared_worker(worker)) {\n            message_port = worker.port;\n            message_port.start();\n        } else {\n            message_port = worker;\n        }\n\n        return new RemoteContext(worker, message_port);\n    };\n\n    /*\n     * Constructs a RemoteContext that tracks tests from a specific window.\n     */\n    Tests.prototype.create_remote_window = function(remote) {\n        remote.postMessage({type: \"getmessages\"}, \"*\");\n        return new RemoteContext(\n            remote,\n            window,\n            function(msg) {\n                return msg.source === remote;\n            }\n        );\n    };\n\n    Tests.prototype.fetch_tests_from_worker = function(worker) {\n        if (this.phase >= this.phases.COMPLETE) {\n            return;\n        }\n\n        var remoteContext = this.create_remote_worker(worker);\n        this.pending_remotes.push(remoteContext);\n        return remoteContext.done;\n    };\n\n    /**\n     * Get test results from a worker and include them in the current test.\n     *\n     * @param {Worker|SharedWorker|ServiceWorker|MessagePort} port -\n     * Either a worker object or a port connected to a worker which is\n     * running tests..\n     * @returns {Promise} - A promise that's resolved once all the remote tests are complete.\n     */\n    function fetch_tests_from_worker(port) {\n        return tests.fetch_tests_from_worker(port);\n    }\n    expose(fetch_tests_from_worker, 'fetch_tests_from_worker');\n\n    Tests.prototype.fetch_tests_from_window = function(remote) {\n        if (this.phase >= this.phases.COMPLETE) {\n            return;\n        }\n\n        var remoteContext = this.create_remote_window(remote);\n        this.pending_remotes.push(remoteContext);\n        return remoteContext.done;\n    };\n\n    /**\n     * Aggregate tests from separate windows or iframes\n     * into the current document as if they were all part of the same test file.\n     *\n     * The document of the second window (or iframe) should include\n     * ``testharness.js``, but not ``testharnessreport.js``, and use\n     * :js:func:`test`, :js:func:`async_test`, and :js:func:`promise_test` in\n     * the usual manner.\n     *\n     * @param {Window} window - The window to fetch tests from.\n     */\n    function fetch_tests_from_window(window) {\n        return tests.fetch_tests_from_window(window);\n    }\n    expose(fetch_tests_from_window, 'fetch_tests_from_window');\n\n    /**\n     * Get test results from a shadow realm and include them in the current test.\n     *\n     * @param {ShadowRealm} realm - A shadow realm also running the test harness\n     * @returns {Promise} - A promise that's resolved once all the remote tests are complete.\n     */\n    function fetch_tests_from_shadow_realm(realm) {\n        var chan = new MessageChannel();\n        function receiveMessage(msg_json) {\n            chan.port1.postMessage(JSON.parse(msg_json));\n        }\n        var done = tests.fetch_tests_from_worker(chan.port2);\n        realm.evaluate(\"begin_shadow_realm_tests\")(receiveMessage);\n        chan.port2.start();\n        return done;\n    }\n    expose(fetch_tests_from_shadow_realm, 'fetch_tests_from_shadow_realm');\n\n    /**\n     * Begin running tests in this shadow realm test harness.\n     *\n     * To be called after all tests have been loaded; it is an error to call\n     * this more than once or in a non-Shadow Realm environment\n     *\n     * @param {Function} postMessage - A function to send test updates to the\n     * incubating realm-- accepts JSON-encoded messages in the format used by\n     * RemoteContext\n     */\n    function begin_shadow_realm_tests(postMessage) {\n        if (!(test_environment instanceof ShadowRealmTestEnvironment)) {\n            throw new Error(\"begin_shadow_realm_tests called in non-Shadow Realm environment\");\n        }\n\n        test_environment.begin(function (msg) {\n            postMessage(JSON.stringify(msg));\n        });\n    }\n    expose(begin_shadow_realm_tests, 'begin_shadow_realm_tests');\n\n    /**\n     * Timeout the tests.\n     *\n     * This only has an effect when ``explicit_timeout`` has been set\n     * in :js:func:`setup`. In other cases any call is a no-op.\n     *\n     */\n    function timeout() {\n        if (tests.timeout_length === null) {\n            tests.timeout();\n        }\n    }\n    expose(timeout, 'timeout');\n\n    /**\n     * Add a callback that's triggered when the first :js:class:`Test` is created.\n     *\n     * @param {Function} callback - Callback function. This is called\n     * without arguments.\n     */\n    function add_start_callback(callback) {\n        tests.start_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when a test state changes.\n     *\n     * @param {Function} callback - Callback function, called with the\n     * :js:class:`Test` as the only argument.\n     */\n    function add_test_state_callback(callback) {\n        tests.test_state_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when a test result is received.\n     *\n     * @param {Function} callback - Callback function, called with the\n     * :js:class:`Test` as the only argument.\n     */\n    function add_result_callback(callback) {\n        tests.test_done_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when all tests are complete.\n     *\n     * @param {Function} callback - Callback function, called with an\n     * array of :js:class:`Test` objects, a :js:class:`TestsStatus`\n     * object and an array of :js:class:`AssertRecord` objects. If the\n     * debug setting is ``false`` the final argument will be an empty\n     * array.\n     *\n     * For performance reasons asserts are only tracked when the debug\n     * setting is ``true``. In other cases the array of asserts will be\n     * empty.\n     */\n    function add_completion_callback(callback) {\n        tests.all_done_callbacks.push(callback);\n    }\n\n    expose(add_start_callback, 'add_start_callback');\n    expose(add_test_state_callback, 'add_test_state_callback');\n    expose(add_result_callback, 'add_result_callback');\n    expose(add_completion_callback, 'add_completion_callback');\n\n    function remove(array, item) {\n        var index = array.indexOf(item);\n        if (index > -1) {\n            array.splice(index, 1);\n        }\n    }\n\n    function remove_start_callback(callback) {\n        remove(tests.start_callbacks, callback);\n    }\n\n    function remove_test_state_callback(callback) {\n        remove(tests.test_state_callbacks, callback);\n    }\n\n    function remove_result_callback(callback) {\n        remove(tests.test_done_callbacks, callback);\n    }\n\n    function remove_completion_callback(callback) {\n       remove(tests.all_done_callbacks, callback);\n    }\n\n    /*\n     * Output listener\n    */\n\n    function Output() {\n        this.output_document = document;\n        this.output_node = null;\n        this.enabled = settings.output;\n        this.phase = this.INITIAL;\n    }\n\n    Output.prototype.INITIAL = 0;\n    Output.prototype.STARTED = 1;\n    Output.prototype.HAVE_RESULTS = 2;\n    Output.prototype.COMPLETE = 3;\n\n    Output.prototype.setup = function(properties) {\n        if (this.phase > this.INITIAL) {\n            return;\n        }\n\n        //If output is disabled in testharnessreport.js the test shouldn't be\n        //able to override that\n        this.enabled = this.enabled && (properties.hasOwnProperty(\"output\") ?\n                                        properties.output : settings.output);\n    };\n\n    Output.prototype.init = function(properties) {\n        if (this.phase >= this.STARTED) {\n            return;\n        }\n        if (properties.output_document) {\n            this.output_document = properties.output_document;\n        } else {\n            this.output_document = document;\n        }\n        this.phase = this.STARTED;\n    };\n\n    Output.prototype.resolve_log = function() {\n        var output_document;\n        if (this.output_node) {\n            return;\n        }\n        if (typeof this.output_document === \"function\") {\n            output_document = this.output_document.apply(undefined);\n        } else {\n            output_document = this.output_document;\n        }\n        if (!output_document) {\n            return;\n        }\n        var node = output_document.getElementById(\"log\");\n        if (!node) {\n            if (output_document.readyState === \"loading\") {\n                return;\n            }\n            node = output_document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"div\");\n            node.id = \"log\";\n            if (output_document.body) {\n                output_document.body.appendChild(node);\n            } else {\n                var root = output_document.documentElement;\n                var is_html = (root &&\n                               root.namespaceURI == \"http://www.w3.org/1999/xhtml\" &&\n                               root.localName == \"html\");\n                var is_svg = (output_document.defaultView &&\n                              \"SVGSVGElement\" in output_document.defaultView &&\n                              root instanceof output_document.defaultView.SVGSVGElement);\n                if (is_svg) {\n                    var foreignObject = output_document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\");\n                    foreignObject.setAttribute(\"width\", \"100%\");\n                    foreignObject.setAttribute(\"height\", \"100%\");\n                    root.appendChild(foreignObject);\n                    foreignObject.appendChild(node);\n                } else if (is_html) {\n                    root.appendChild(output_document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"body\"))\n                        .appendChild(node);\n                } else {\n                    root.appendChild(node);\n                }\n            }\n        }\n        this.output_document = output_document;\n        this.output_node = node;\n    };\n\n    Output.prototype.show_status = function() {\n        if (this.phase < this.STARTED) {\n            this.init({});\n        }\n        if (!this.enabled || this.phase === this.COMPLETE) {\n            return;\n        }\n        this.resolve_log();\n        if (this.phase < this.HAVE_RESULTS) {\n            this.phase = this.HAVE_RESULTS;\n        }\n        var done_count = tests.tests.length - tests.num_pending;\n        if (this.output_node && !tests.hide_test_state) {\n            if (done_count < 100 ||\n                (done_count < 1000 && done_count % 100 === 0) ||\n                done_count % 1000 === 0) {\n                this.output_node.textContent = \"Running, \" +\n                    done_count + \" complete, \" +\n                    tests.num_pending + \" remain\";\n            }\n        }\n    };\n\n    Output.prototype.show_results = function (tests, harness_status, asserts_run) {\n        if (this.phase >= this.COMPLETE) {\n            return;\n        }\n        if (!this.enabled) {\n            return;\n        }\n        if (!this.output_node) {\n            this.resolve_log();\n        }\n        this.phase = this.COMPLETE;\n\n        var log = this.output_node;\n        if (!log) {\n            return;\n        }\n        var output_document = this.output_document;\n\n        while (log.lastChild) {\n            log.removeChild(log.lastChild);\n        }\n\n        var stylesheet = output_document.createElementNS(xhtml_ns, \"style\");\n        stylesheet.textContent = stylesheetContent;\n        var heads = output_document.getElementsByTagName(\"head\");\n        if (heads.length) {\n            heads[0].appendChild(stylesheet);\n        }\n\n        var status_number = {};\n        forEach(tests,\n                function(test) {\n                    var status = test.format_status();\n                    if (status_number.hasOwnProperty(status)) {\n                        status_number[status] += 1;\n                    } else {\n                        status_number[status] = 1;\n                    }\n                });\n\n        function status_class(status)\n        {\n            return status.replace(/\\s/g, '').toLowerCase();\n        }\n\n        var summary_template = [\"section\", {\"id\":\"summary\"},\n                                [\"h2\", {}, \"Summary\"],\n                                function()\n                                {\n                                    var status = harness_status.format_status();\n                                    var rv = [[\"section\", {},\n                                               [\"p\", {},\n                                                \"Harness status: \",\n                                                [\"span\", {\"class\":status_class(status)},\n                                                 status\n                                                ],\n                                               ],\n                                               [\"button\",\n                                                {\"onclick\": \"let evt = new Event('__test_restart'); \" +\n                                                 \"let canceled = !window.dispatchEvent(evt);\" +\n                                                 \"if (!canceled) { location.reload() }\"},\n                                                \"Rerun\"]\n                                              ]];\n\n                                    if (harness_status.status === harness_status.ERROR) {\n                                        rv[0].push([\"pre\", {}, harness_status.message]);\n                                        if (harness_status.stack) {\n                                            rv[0].push([\"pre\", {}, harness_status.stack]);\n                                        }\n                                    }\n                                    return rv;\n                                },\n                                [\"p\", {}, \"Found ${num_tests} tests\"],\n                                function() {\n                                    var rv = [[\"div\", {}]];\n                                    var i = 0;\n                                    while (Test.prototype.status_formats.hasOwnProperty(i)) {\n                                        if (status_number.hasOwnProperty(Test.prototype.status_formats[i])) {\n                                            var status = Test.prototype.status_formats[i];\n                                            rv[0].push([\"div\", {},\n                                                        [\"label\", {},\n                                                         [\"input\", {type:\"checkbox\", checked:\"checked\"}],\n                                                         status_number[status] + \" \",\n                                                         [\"span\", {\"class\":status_class(status)}, status]]]);\n                                        }\n                                        i++;\n                                    }\n                                    return rv;\n                                },\n                               ];\n\n        log.appendChild(render(summary_template, {num_tests:tests.length}, output_document));\n\n        forEach(output_document.querySelectorAll(\"section#summary label\"),\n                function(element)\n                {\n                    on_event(element, \"click\",\n                             function(e)\n                             {\n                                 if (output_document.getElementById(\"results\") === null) {\n                                     e.preventDefault();\n                                     return;\n                                 }\n                                 var result_class = element.querySelector(\"span[class]\").getAttribute(\"class\");\n                                 var style_element = output_document.querySelector(\"style#hide-\" + result_class);\n                                 var input_element = element.querySelector(\"input\");\n                                 if (!style_element && !input_element.checked) {\n                                     style_element = output_document.createElementNS(xhtml_ns, \"style\");\n                                     style_element.id = \"hide-\" + result_class;\n                                     style_element.textContent = \"table#results > tbody > tr.overall-\"+result_class+\"{display:none}\";\n                                     output_document.body.appendChild(style_element);\n                                 } else if (style_element && input_element.checked) {\n                                     style_element.parentNode.removeChild(style_element);\n                                 }\n                             });\n                });\n\n        // This use of innerHTML plus manual escaping is not recommended in\n        // general, but is necessary here for performance.  Using textContent\n        // on each individual <td> adds tens of seconds of execution time for\n        // large test suites (tens of thousands of tests).\n        function escape_html(s)\n        {\n            return s.replace(/\\&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#39;\");\n        }\n\n        function has_assertions()\n        {\n            for (var i = 0; i < tests.length; i++) {\n                if (tests[i].properties.hasOwnProperty(\"assert\")) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function get_assertion(test)\n        {\n            if (test.properties.hasOwnProperty(\"assert\")) {\n                if (Array.isArray(test.properties.assert)) {\n                    return test.properties.assert.join(' ');\n                }\n                return test.properties.assert;\n            }\n            return '';\n        }\n\n        var asserts_run_by_test = new Map();\n        asserts_run.forEach(assert => {\n            if (!asserts_run_by_test.has(assert.test)) {\n                asserts_run_by_test.set(assert.test, []);\n            }\n            asserts_run_by_test.get(assert.test).push(assert);\n        });\n\n        function get_asserts_output(test) {\n            var asserts = asserts_run_by_test.get(test);\n            if (!asserts) {\n                return \"No asserts ran\";\n            }\n            rv = \"<table>\";\n            rv += asserts.map(assert => {\n                var output_fn = \"<strong>\" + escape_html(assert.assert_name) + \"</strong>(\";\n                var prefix_len = output_fn.length;\n                var output_args = assert.args;\n                var output_len = output_args.reduce((prev, current) => prev+current, prefix_len);\n                if (output_len[output_len.length - 1] > 50) {\n                    output_args = output_args.map((x, i) =>\n                    (i > 0 ? \"  \".repeat(prefix_len) : \"\" )+ x + (i < output_args.length - 1 ? \",\\n\" : \"\"));\n                } else {\n                    output_args = output_args.map((x, i) => x + (i < output_args.length - 1 ? \", \" : \"\"));\n                }\n                output_fn += escape_html(output_args.join(\"\"));\n                output_fn += ')';\n                var output_location;\n                if (assert.stack) {\n                    output_location = assert.stack.split(\"\\n\", 1)[0].replace(/@?\\w+:\\/\\/[^ \"\\/]+(?::\\d+)?/g, \" \");\n                }\n                return \"<tr class='overall-\" +\n                    status_class(Test.prototype.status_formats[assert.status]) + \"'>\" +\n                    \"<td class='\" +\n                    status_class(Test.prototype.status_formats[assert.status]) + \"'>\" +\n                    Test.prototype.status_formats[assert.status] + \"</td>\" +\n                    \"<td><pre>\" +\n                    output_fn +\n                    (output_location ? \"\\n\" + escape_html(output_location) : \"\") +\n                    \"</pre></td></tr>\";\n            }\n            ).join(\"\\n\");\n            rv += \"</table>\";\n            return rv;\n        }\n\n        log.appendChild(document.createElementNS(xhtml_ns, \"section\"));\n        var assertions = has_assertions();\n        var html = \"<h2>Details</h2><table id='results' \" + (assertions ? \"class='assertions'\" : \"\" ) + \">\" +\n            \"<thead><tr><th>Result</th><th>Test Name</th>\" +\n            (assertions ? \"<th>Assertion</th>\" : \"\") +\n            \"<th>Message</th></tr></thead>\" +\n            \"<tbody>\";\n        for (var i = 0; i < tests.length; i++) {\n            var test = tests[i];\n            html += '<tr class=\"overall-' +\n                status_class(test.format_status()) +\n                '\">' +\n                '<td class=\"' +\n                status_class(test.format_status()) +\n                '\">' +\n                test.format_status() +\n                \"</td><td>\" +\n                escape_html(test.name) +\n                \"</td><td>\" +\n                (assertions ? escape_html(get_assertion(test)) + \"</td><td>\" : \"\") +\n                escape_html(test.message ? tests[i].message : \" \") +\n                (tests[i].stack ? \"<pre>\" +\n                 escape_html(tests[i].stack) +\n                 \"</pre>\": \"\");\n            if (!(test instanceof RemoteTest)) {\n                 html += \"<details><summary>Asserts run</summary>\" + get_asserts_output(test) + \"</details>\"\n            }\n            html += \"</td></tr>\";\n        }\n        html += \"</tbody></table>\";\n        try {\n            log.lastChild.innerHTML = html;\n        } catch (e) {\n            log.appendChild(document.createElementNS(xhtml_ns, \"p\"))\n               .textContent = \"Setting innerHTML for the log threw an exception.\";\n            log.appendChild(document.createElementNS(xhtml_ns, \"pre\"))\n               .textContent = html;\n        }\n\n        window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"DOWNLOAD\", content: \"\", ts: Date.now()}}))\n    };\n\n    /*\n     * Template code\n     *\n     * A template is just a JavaScript structure. An element is represented as:\n     *\n     * [tag_name, {attr_name:attr_value}, child1, child2]\n     *\n     * the children can either be strings (which act like text nodes), other templates or\n     * functions (see below)\n     *\n     * A text node is represented as\n     *\n     * [\"{text}\", value]\n     *\n     * String values have a simple substitution syntax; ${foo} represents a variable foo.\n     *\n     * It is possible to embed logic in templates by using a function in a place where a\n     * node would usually go. The function must either return part of a template or null.\n     *\n     * In cases where a set of nodes are required as output rather than a single node\n     * with children it is possible to just use a list\n     * [node1, node2, node3]\n     *\n     * Usage:\n     *\n     * render(template, substitutions) - take a template and an object mapping\n     * variable names to parameters and return either a DOM node or a list of DOM nodes\n     *\n     * substitute(template, substitutions) - take a template and variable mapping object,\n     * make the variable substitutions and return the substituted template\n     *\n     */\n\n    function is_single_node(template)\n    {\n        return typeof template[0] === \"string\";\n    }\n\n    function substitute(template, substitutions)\n    {\n        if (typeof template === \"function\") {\n            var replacement = template(substitutions);\n            if (!replacement) {\n                return null;\n            }\n\n            return substitute(replacement, substitutions);\n        }\n\n        if (is_single_node(template)) {\n            return substitute_single(template, substitutions);\n        }\n\n        return filter(map(template, function(x) {\n                              return substitute(x, substitutions);\n                          }), function(x) {return x !== null;});\n    }\n\n    function substitute_single(template, substitutions)\n    {\n        var substitution_re = /\\$\\{([^ }]*)\\}/g;\n\n        function do_substitution(input) {\n            var components = input.split(substitution_re);\n            var rv = [];\n            for (var i = 0; i < components.length; i += 2) {\n                rv.push(components[i]);\n                if (components[i + 1]) {\n                    rv.push(String(substitutions[components[i + 1]]));\n                }\n            }\n            return rv;\n        }\n\n        function substitute_attrs(attrs, rv)\n        {\n            rv[1] = {};\n            for (var name in template[1]) {\n                if (attrs.hasOwnProperty(name)) {\n                    var new_name = do_substitution(name).join(\"\");\n                    var new_value = do_substitution(attrs[name]).join(\"\");\n                    rv[1][new_name] = new_value;\n                }\n            }\n        }\n\n        function substitute_children(children, rv)\n        {\n            for (var i = 0; i < children.length; i++) {\n                if (children[i] instanceof Object) {\n                    var replacement = substitute(children[i], substitutions);\n                    if (replacement !== null) {\n                        if (is_single_node(replacement)) {\n                            rv.push(replacement);\n                        } else {\n                            extend(rv, replacement);\n                        }\n                    }\n                } else {\n                    extend(rv, do_substitution(String(children[i])));\n                }\n            }\n            return rv;\n        }\n\n        var rv = [];\n        rv.push(do_substitution(String(template[0])).join(\"\"));\n\n        if (template[0] === \"{text}\") {\n            substitute_children(template.slice(1), rv);\n        } else {\n            substitute_attrs(template[1], rv);\n            substitute_children(template.slice(2), rv);\n        }\n\n        return rv;\n    }\n\n    function make_dom_single(template, doc)\n    {\n        var output_document = doc || document;\n        var element;\n        if (template[0] === \"{text}\") {\n            element = output_document.createTextNode(\"\");\n            for (var i = 1; i < template.length; i++) {\n                element.data += template[i];\n            }\n        } else {\n            element = output_document.createElementNS(xhtml_ns, template[0]);\n            for (var name in template[1]) {\n                if (template[1].hasOwnProperty(name)) {\n                    element.setAttribute(name, template[1][name]);\n                }\n            }\n            for (var i = 2; i < template.length; i++) {\n                if (template[i] instanceof Object) {\n                    var sub_element = make_dom(template[i]);\n                    element.appendChild(sub_element);\n                } else {\n                    var text_node = output_document.createTextNode(template[i]);\n                    element.appendChild(text_node);\n                }\n            }\n        }\n\n        return element;\n    }\n\n    function make_dom(template, substitutions, output_document)\n    {\n        if (is_single_node(template)) {\n            return make_dom_single(template, output_document);\n        }\n\n        return map(template, function(x) {\n                       return make_dom_single(x, output_document);\n                   });\n    }\n\n    function render(template, substitutions, output_document)\n    {\n        return make_dom(substitute(template, substitutions), output_document);\n    }\n\n    /*\n     * Utility functions\n     */\n    function assert(expected_true, function_name, description, error, substitutions)\n    {\n        if (expected_true !== true && false) {\n            var msg = make_message(function_name, description,\n                                   error, substitutions);\n            throw new AssertionError(msg);\n        }\n    }\n\n    /**\n     * @class\n     * Exception type that represents a failing assert.\n     *\n     * @param {string} message - Error message.\n     */\n    function AssertionError(message)\n    {\n        if (typeof message == \"string\") {\n            message = sanitize_unpaired_surrogates(message);\n        }\n        this.message = message;\n        this.stack = get_stack();\n    }\n    expose(AssertionError, \"AssertionError\");\n\n    AssertionError.prototype = Object.create(Error.prototype);\n\n    const get_stack = function() {\n        var stack = new Error().stack;\n\n        // 'Error.stack' is not supported in all browsers/versions\n        if (!stack) {\n            return \"(Stack trace unavailable)\";\n        }\n\n        var lines = stack.split(\"\\n\");\n\n        // Create a pattern to match stack frames originating within testharness.js.  These include the\n        // script URL, followed by the line/col (e.g., '/resources/testharness.js:120:21').\n        // Escape the URL per http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n        // in case it contains RegExp characters.\n        var script_url = get_script_url();\n        var re_text = script_url ? script_url.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') : \"\\\\btestharness.js\";\n        var re = new RegExp(re_text + \":\\\\d+:\\\\d+\");\n\n        // Some browsers include a preamble that specifies the type of the error object.  Skip this by\n        // advancing until we find the first stack frame originating from testharness.js.\n        var i = 0;\n        while (!re.test(lines[i]) && i < lines.length) {\n            i++;\n        }\n\n        // Then skip the top frames originating from testharness.js to begin the stack at the test code.\n        while (re.test(lines[i]) && i < lines.length) {\n            i++;\n        }\n\n        // Paranoid check that we didn't skip all frames.  If so, return the original stack unmodified.\n        if (i >= lines.length) {\n            return stack;\n        }\n\n        return lines.slice(i).join(\"\\n\");\n    }\n\n    function OptionalFeatureUnsupportedError(message)\n    {\n        AssertionError.call(this, message);\n    }\n    OptionalFeatureUnsupportedError.prototype = Object.create(AssertionError.prototype);\n    expose(OptionalFeatureUnsupportedError, \"OptionalFeatureUnsupportedError\");\n\n    function make_message(function_name, description, error, substitutions)\n    {\n        for (var p in substitutions) {\n            if (substitutions.hasOwnProperty(p)) {\n                substitutions[p] = format_value(substitutions[p]);\n            }\n        }\n        var node_form = substitute([\"{text}\", \"${function_name}: ${description}\" + error],\n                                   merge({function_name:function_name,\n                                          description:(description?description + \" \":\"\")},\n                                          substitutions));\n        return node_form.slice(1).join(\"\");\n    }\n\n    function filter(array, callable, thisObj) {\n        var rv = [];\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                var pass = callable.call(thisObj, array[i], i, array);\n                if (pass) {\n                    rv.push(array[i]);\n                }\n            }\n        }\n        return rv;\n    }\n\n    function map(array, callable, thisObj)\n    {\n        var rv = [];\n        rv.length = array.length;\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                rv[i] = callable.call(thisObj, array[i], i, array);\n            }\n        }\n        return rv;\n    }\n\n    function extend(array, items)\n    {\n        Array.prototype.push.apply(array, items);\n    }\n\n    function forEach(array, callback, thisObj)\n    {\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                callback.call(thisObj, array[i], i, array);\n            }\n        }\n    }\n\n    /**\n     * Immediately invoke a \"iteratee\" function with a series of values in\n     * parallel and invoke a final \"done\" function when all of the \"iteratee\"\n     * invocations have signaled completion.\n     *\n     * If all callbacks complete synchronously (or if no callbacks are\n     * specified), the ``done_callback`` will be invoked synchronously. It is the\n     * responsibility of the caller to ensure asynchronicity in cases where\n     * that is desired.\n     *\n     * @param {array} value Zero or more values to use in the invocation of\n     *                      ``iter_callback``\n     * @param {function} iter_callback A function that will be invoked\n     *                                 once for each of the values min\n     *                                 ``value``. Two arguments will\n     *                                 be available in each\n     *                                 invocation: the value from\n     *                                 ``value`` and a function that\n     *                                 must be invoked to signal\n     *                                 completion\n     * @param {function} done_callback A function that will be invoked after\n     *                                 all operations initiated by the\n     *                                 ``iter_callback`` function have signaled\n     *                                 completion\n     */\n    function all_async(values, iter_callback, done_callback)\n    {\n        var remaining = values.length;\n\n        if (remaining === 0) {\n            done_callback();\n        }\n\n        forEach(values,\n                function(element) {\n                    var invoked = false;\n                    var elDone = function() {\n                        if (invoked) {\n                            return;\n                        }\n\n                        invoked = true;\n                        remaining -= 1;\n\n                        if (remaining === 0) {\n                            done_callback();\n                        }\n                    };\n\n                    iter_callback(element, elDone);\n                });\n    }\n\n    function merge(a,b)\n    {\n        var rv = {};\n        var p;\n        for (p in a) {\n            rv[p] = a[p];\n        }\n        for (p in b) {\n            rv[p] = b[p];\n        }\n        return rv;\n    }\n\n    function expose(object, name)\n    {\n        var components = name.split(\".\");\n        var target = global_scope;\n        for (var i = 0; i < components.length - 1; i++) {\n            if (!(components[i] in target)) {\n                target[components[i]] = {};\n            }\n            target = target[components[i]];\n        }\n        target[components[components.length - 1]] = object;\n    }\n\n    function is_same_origin(w) {\n        try {\n            'random_prop' in w;\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /** Returns the 'src' URL of the first <script> tag in the page to include the file 'testharness.js'. */\n    function get_script_url()\n    {\n        if (!('document' in global_scope)) {\n            return undefined;\n        }\n\n        var scripts = document.getElementsByTagName(\"script\");\n        for (var i = 0; i < scripts.length; i++) {\n            var src;\n            if (scripts[i].src) {\n                src = scripts[i].src;\n            } else if (scripts[i].href) {\n                //SVG case\n                src = scripts[i].href.baseVal;\n            }\n\n            var matches = src && src.match(/^(.*\\/|)testharness\\.js$/);\n            if (matches) {\n                return src;\n            }\n        }\n        return undefined;\n    }\n\n    /** Returns the <title> or filename or \"Untitled\" */\n    function get_title()\n    {\n        if ('document' in global_scope) {\n            //Don't use document.title to work around an Opera/Presto bug in XHTML documents\n            var title = document.getElementsByTagName(\"title\")[0];\n            if (title && title.firstChild && title.firstChild.data) {\n                return title.firstChild.data;\n            }\n        }\n        if ('META_TITLE' in global_scope && META_TITLE) {\n            return META_TITLE;\n        }\n        if ('location' in global_scope && 'pathname' in location) {\n            return location.pathname.substring(location.pathname.lastIndexOf('/') + 1, location.pathname.indexOf('.'));\n        }\n        return \"Untitled\";\n    }\n\n    /**\n     * Setup globals\n     */\n\n    var tests = new Tests();\n\n    if (global_scope.addEventListener) {\n        var error_handler = function(error, message, stack) {\n            var optional_unsupported = error instanceof OptionalFeatureUnsupportedError;\n            if (tests.file_is_test) {\n                var test = tests.tests[0];\n                if (test.phase >= test.phases.HAS_RESULT) {\n                    return;\n                }\n                var status = optional_unsupported ? test.PRECONDITION_FAILED : test.FAIL;\n                test.set_status(status, message, stack);\n                test.phase = test.phases.HAS_RESULT;\n            } else if (!tests.allow_uncaught_exception) {\n                var status = optional_unsupported ? tests.status.PRECONDITION_FAILED : tests.status.ERROR;\n                tests.status.status = status;\n                tests.status.message = message;\n                tests.status.stack = stack;\n            }\n\n            // Do not transition to the \"complete\" phase if the test has been\n            // configured to allow uncaught exceptions. This gives the test an\n            // opportunity to define subtests based on the exception reporting\n            // behavior.\n            if (!tests.allow_uncaught_exception) {\n                done();\n            }\n        };\n\n        addEventListener(\"error\", function(e) {\n            var message = e.message;\n            var stack;\n            if (e.error && e.error.stack) {\n                stack = e.error.stack;\n            } else {\n                stack = e.filename + \":\" + e.lineno + \":\" + e.colno;\n            }\n            error_handler(e.error, message, stack);\n        }, false);\n\n        addEventListener(\"unhandledrejection\", function(e) {\n            var message;\n            if (e.reason && e.reason.message) {\n                message = \"Unhandled rejection: \" + e.reason.message;\n            } else {\n                message = \"Unhandled rejection\";\n            }\n            var stack;\n            if (e.reason && e.reason.stack) {\n                stack = e.reason.stack;\n            }\n            error_handler(e.reason, message, stack);\n        }, false);\n    }\n\n    test_environment.on_tests_ready();\n\n    /**\n     * Stylesheet\n     */\n     var stylesheetContent = \"\\\nhtml {\\\n    font-family:DejaVu Sans, Bitstream Vera Sans, Arial, Sans;\\\n}\\\n\\\n#log .warning,\\\n#log .warning a {\\\n  color: black;\\\n  background: yellow;\\\n}\\\n\\\n#log .error,\\\n#log .error a {\\\n  color: white;\\\n  background: red;\\\n}\\\n\\\nsection#summary {\\\n    margin-bottom:1em;\\\n}\\\n\\\ntable#results {\\\n    border-collapse:collapse;\\\n    table-layout:fixed;\\\n    width:100%;\\\n}\\\n\\\ntable#results > thead > tr > th:first-child,\\\ntable#results > tbody > tr > td:first-child {\\\n    width:8em;\\\n}\\\n\\\ntable#results > thead > tr > th:last-child,\\\ntable#results > thead > tr > td:last-child {\\\n    width:50%;\\\n}\\\n\\\ntable#results.assertions > thead > tr > th:last-child,\\\ntable#results.assertions > tbody > tr > td:last-child {\\\n    width:35%;\\\n}\\\n\\\ntable#results > thead > > tr > th {\\\n    padding:0;\\\n    padding-bottom:0.5em;\\\n    border-bottom:medium solid black;\\\n}\\\n\\\ntable#results > tbody > tr> td {\\\n    padding:1em;\\\n    padding-bottom:0.5em;\\\n    border-bottom:thin solid black;\\\n}\\\n\\\n.pass {\\\n    color:green;\\\n}\\\n\\\n.fail {\\\n    color:red;\\\n}\\\n\\\ntr.timeout {\\\n    color:red;\\\n}\\\n\\\ntr.notrun {\\\n    color:blue;\\\n}\\\n\\\ntr.optionalunsupported {\\\n    color:blue;\\\n}\\\n\\\n.ok {\\\n    color:green;\\\n}\\\n\\\n.error {\\\n    color:red;\\\n}\\\n\\\n.pass, .fail, .timeout, .notrun, .optionalunsupported .ok, .timeout, .error {\\\n    font-variant:small-caps;\\\n}\\\n\\\ntable#results span {\\\n    display:block;\\\n}\\\n\\\ntable#results span.expected {\\\n    font-family:DejaVu Sans Mono, Bitstream Vera Sans Mono, Monospace;\\\n    white-space:pre;\\\n}\\\n\\\ntable#results span.actual {\\\n    font-family:DejaVu Sans Mono, Bitstream Vera Sans Mono, Monospace;\\\n    white-space:pre;\\\n}\\\n\";\n\n})(self);\n// vim: set expandtab shiftwidth=4 tabstop=4:\n"},{"url":"http://web-platform.test:8000/img/lion.svg","request_start":1696814057.6076303,"response_start":1696814057.6514304,"request_end":1696814057.6087005,"response_end":1696814057.6521137,"ts":1696814057.6522808,"body":"{\"error\": {\"code\": 404, \"message\": \"404\"}}"},{"url":"http://web-platform.test:8000/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%91%E3%82%B9/lion.svg","request_start":1696814058.5851817,"response_start":1696814058.5884383,"request_end":1696814058.5861745,"response_end":1696814058.5891023,"ts":1696814058.5894005,"body":"{\"error\": {\"code\": 404, \"message\": \"404\"}}"}]}}
