{"network":{"requests":{"2":{"requestId":"2","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696742319742,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"3":{"requestId":"3","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/testharness_runner.html","origin":"https://web-platform.test:8443","pathname":"/testharness_runner.html","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696742320340,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Sec-Fetch-Dest","value":"document"},{"name":"Sec-Fetch-Mode","value":"navigate"},{"name":"Sec-Fetch-Site","value":"none"},{"name":"Sec-Fetch-User","value":"?1"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"4":{"requestId":"4","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"","hostname":"","href":"about:blank","origin":"null","pathname":"blank","port":"","protocol":"about:","site":""},"documentUrl":{"host":"","hostname":"","href":"about:blank","origin":"null","pathname":"blank","port":"","protocol":"about:","site":""},"method":"GET","type":"main_frame","timeStamp":1696742320602,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Sec-Fetch-Dest","value":"document"},{"name":"Sec-Fetch-Mode","value":"navigate"},{"name":"Sec-Fetch-Site","value":"none"},{"name":"Sec-Fetch-User","value":"?1"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"5":{"requestId":"5","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/resources/testharness.js","origin":"https://web-platform.test:8443","pathname":"/resources/testharness.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320631,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"script"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"6":{"requestId":"6","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/resources/testharnessreport.js","origin":"https://web-platform.test:8443","pathname":"/resources/testharnessreport.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320631,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"script"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"7":{"requestId":"7","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/resources/common.sub.js","origin":"https://web-platform.test:8443","pathname":"/common/security-features/resources/common.sub.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320632,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"script"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"8":{"requestId":"8","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/generic/test-case.sub.js","origin":"https://web-platform.test:8443","pathname":"/mixed-content/generic/test-case.sub.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320632,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"script"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"9":{"requestId":"9","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=put&value=52b61006-143c-4179-ac9a-f34f01167662","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742320770,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"10":{"requestId":"10","url":{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321038,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"www1.web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0,"redir":[{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"}]},"11":{"requestId":"11","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321229,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"12":{"requestId":"12","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=put&value=5769c96a-9980-4319-8585-6d2d89fb066d","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321245,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"13":{"requestId":"13","url":{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321256,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"www1.web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"14":{"requestId":"14","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321279,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"15":{"requestId":"15","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=put&value=4f2d36bf-89d4-4e0c-ba05-fa1968755251","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321313,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"16":{"requestId":"16","url":{"host":"www1.web-platform.test:8443","hostname":"www1.web-platform.test","href":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","origin":"https://www1.web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321405,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"www1.web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"},{"name":"Sec-Fetch-Dest","value":"video"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"cross-site"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0,"redir":[{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"}]},"17":{"requestId":"17","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321502,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"18":{"requestId":"18","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=put&value=89748437-26e9-4ae9-a435-23c29a0c8714","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321537,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"19":{"requestId":"19","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321582,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0,"redir":[{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"}]},"20":{"requestId":"20","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321619,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"21":{"requestId":"21","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=put&value=aa27c451-1454-42f6-a22c-cb5ecf2b23ca","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321651,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"22":{"requestId":"22","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321683,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8000"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"23":{"requestId":"23","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321723,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"24":{"requestId":"24","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=put&value=4ce00bb6-3f21-4cfd-be4f-e3f43a4589e1","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321758,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"25":{"requestId":"25","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321807,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"},{"name":"Sec-Fetch-Dest","value":"video"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"cross-site"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0,"redir":[{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"}]},"26":{"requestId":"26","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321866,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"27":{"requestId":"27","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=put&value=e9fd5625-a4b2-4456-b928-ec1244884eca","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321901,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"28":{"requestId":"28","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321964,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Range","value":"bytes=0-"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Connection","value":"keep-alive"},{"name":"Sec-Fetch-Dest","value":"video"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0,"redir":[{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"}]},"29":{"requestId":"29","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322040,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"30":{"requestId":"30","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=put&value=10ec93b3-05e7-4504-9710-f4d33d99840e","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322083,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"31":{"requestId":"31","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742322118,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Range","value":"bytes=0-"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"video"},{"name":"Sec-Fetch-Mode","value":"no-cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"32":{"requestId":"32","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322162,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"web-platform.test:8443"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-origin"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0},"33":{"requestId":"33","url":{"host":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","hostname":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","href":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it/download-trace","origin":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","pathname":"/download-trace","port":"","protocol":"http:","site":"mitm.it"},"originUrl":{"host":"06d09f79-cb75-469c-994e-c6eb436d975a","hostname":"06d09f79-cb75-469c-994e-c6eb436d975a","href":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a/_generated_background_page.html","origin":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"06d09f79-cb75-469c-994e-c6eb436d975a"},"documentUrl":{"host":"06d09f79-cb75-469c-994e-c6eb436d975a","hostname":"06d09f79-cb75-469c-994e-c6eb436d975a","href":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a/_generated_background_page.html","origin":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"06d09f79-cb75-469c-994e-c6eb436d975a"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742323209,"tabId":-1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","requestHeaders":[{"name":"Host","value":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it"},{"name":"User-Agent","value":"Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"}],"proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":null,"frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}},"responses":{"2":{"requestId":"2","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/testharness_runner.html","origin":"http://web-platform.test:8000","pathname":"/testharness_runner.html","port":"8000","protocol":"http:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696742319782,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/html"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:39 GMT"},{"name":"Content-Length","value":"95"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":398,"responseSize":261},"3":{"requestId":"3","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/testharness_runner.html","origin":"https://web-platform.test:8443","pathname":"/testharness_runner.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696742320478,"tabId":1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/html"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"},{"name":"Content-Length","value":"95"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":467,"responseSize":300},"4":{"requestId":"4","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"main_frame","timeStamp":1696742320619,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/html"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":497,"responseSize":4377},"5":{"requestId":"5","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/resources/testharness.js","origin":"https://web-platform.test:8443","pathname":"/resources/testharness.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320692,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript; charset=utf-8"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":435,"responseSize":186949},"6":{"requestId":"6","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/resources/testharnessreport.js","origin":"https://web-platform.test:8443","pathname":"/resources/testharnessreport.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320724,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript;charset=utf8"},{"name":"Cache-Control","value":"max-age=3600"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"},{"name":"Content-Length","value":"2385"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":441,"responseSize":2611},"7":{"requestId":"7","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/resources/common.sub.js","origin":"https://web-platform.test:8443","pathname":"/common/security-features/resources/common.sub.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320694,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Access-Control-Allow-Origin","value":"*"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"},{"name":"Content-Length","value":"46465"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":459,"responseSize":46682},"8":{"requestId":"8","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/generic/test-case.sub.js","origin":"https://web-platform.test:8443","pathname":"/mixed-content/generic/test-case.sub.js","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"script","timeStamp":1696742320739,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"text/javascript"},{"name":"Server","value":"BaseHTTP/0.6 Python/3.8.10"},{"name":"Date","value":"Sun, 08 Oct 2023 05:18:40 GMT"},{"name":"Content-Length","value":"2391"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":449,"responseSize":2575},"9":{"requestId":"9","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=put&value=52b61006-143c-4179-ac9a-f34f01167662","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742320796,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":163},"10":{"requestId":"10","url":{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321065,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":498,"responseSize":18763},"11":{"requestId":"11","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321237,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":129},"12":{"requestId":"12","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=put&value=5769c96a-9980-4319-8585-6d2d89fb066d","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321253,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":163},"13":{"requestId":"13","url":{"host":"www1.web-platform.test:8000","hostname":"www1.web-platform.test","href":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content","origin":"http://www1.web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321268,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":507,"responseSize":18763},"14":{"requestId":"14","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321308,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"15":{"requestId":"15","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=put&value=4f2d36bf-89d4-4e0c-ba05-fa1968755251","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321346,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"16":{"requestId":"16","url":{"host":"www1.web-platform.test:8443","hostname":"www1.web-platform.test","href":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","origin":"https://www1.web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321461,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":544,"responseSize":18802},"17":{"requestId":"17","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321533,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"18":{"requestId":"18","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=put&value=89748437-26e9-4ae9-a435-23c29a0c8714","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321562,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"19":{"requestId":"19","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321591,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":488,"responseSize":18763},"20":{"requestId":"20","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321643,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"21":{"requestId":"21","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=put&value=aa27c451-1454-42f6-a22c-cb5ecf2b23ca","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321676,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"22":{"requestId":"22","url":{"host":"web-platform.test:8000","hostname":"web-platform.test","href":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content","origin":"http://web-platform.test:8000","pathname":"/common/security-features/subresource/video.py","port":"8000","protocol":"http:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321711,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":497,"responseSize":18763},"23":{"requestId":"23","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321754,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"24":{"requestId":"24","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=put&value=4ce00bb6-3f21-4cfd-be4f-e3f43a4589e1","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321789,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"25":{"requestId":"25","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321838,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":539,"responseSize":18802},"26":{"requestId":"26","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321898,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"27":{"requestId":"27","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=put&value=e9fd5625-a4b2-4456-b928-ec1244884eca","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742321926,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"28":{"requestId":"28","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742321986,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":635,"responseSize":18802},"29":{"requestId":"29","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322071,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"30":{"requestId":"30","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=put&value=10ec93b3-05e7-4504-9710-f4d33d99840e","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322111,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":567,"responseSize":202},"31":{"requestId":"31","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/video.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"media","timeStamp":1696742322146,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"content-type","value":"video/ogg"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":640,"responseSize":18802},"32":{"requestId":"32","url":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=take","origin":"https://web-platform.test:8443","pathname":"/common/security-features/subresource/xhr.py","port":"8443","protocol":"https:","site":"web-platform.test"},"originUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"documentUrl":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742322192,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"content-type","value":"text/javascript"},{"name":"cache-control","value":"no-cache; must-revalidate"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":525,"responseSize":168},"33":{"requestId":"33","url":{"host":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","hostname":"b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","href":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it/download-trace","origin":"http://b1v253vpqwutupjwntfmpc9a4m94s5zm.mitm.it","pathname":"/download-trace","port":"","protocol":"http:","site":"mitm.it"},"originUrl":{"host":"06d09f79-cb75-469c-994e-c6eb436d975a","hostname":"06d09f79-cb75-469c-994e-c6eb436d975a","href":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a/_generated_background_page.html","origin":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"06d09f79-cb75-469c-994e-c6eb436d975a"},"documentUrl":{"host":"06d09f79-cb75-469c-994e-c6eb436d975a","hostname":"06d09f79-cb75-469c-994e-c6eb436d975a","href":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a/_generated_background_page.html","origin":"moz-extension://06d09f79-cb75-469c-994e-c6eb436d975a","pathname":"/_generated_background_page.html","port":"","protocol":"moz-extension:","site":"06d09f79-cb75-469c-994e-c6eb436d975a"},"method":"GET","type":"xmlhttprequest","timeStamp":1696742323217,"tabId":-1,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"Content-Type","value":"application/json"},{"name":"Access-Control-Allow-Origin","value":"*"},{"name":"content-length","value":"545514"}],"statusCode":200,"statusLine":"HTTP/1.1 200 OK","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":313,"responseSize":545621}},"redirects":{"10":[{"requestId":"10","url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","originUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","documentUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","method":"GET","type":"media","timeStamp":1696742321029,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"location","value":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content"}],"statusCode":301,"statusLine":"HTTP/1.1 301 Moved Permanently","redirectUrl":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}],"16":[{"requestId":"16","url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","originUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","documentUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","method":"GET","type":"media","timeStamp":1696742321376,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"location","value":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content"}],"statusCode":301,"statusLine":"HTTP/1.1 301 Moved Permanently","redirectUrl":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}],"19":[{"requestId":"19","url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","originUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","documentUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","method":"GET","type":"media","timeStamp":1696742321581,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"location","value":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content"}],"statusCode":301,"statusLine":"HTTP/1.1 301 Moved Permanently","redirectUrl":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}],"25":[{"requestId":"25","url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","originUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","documentUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","method":"GET","type":"media","timeStamp":1696742321802,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"location","value":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content"}],"statusCode":301,"statusLine":"HTTP/1.1 301 Moved Permanently","redirectUrl":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}],"28":[{"requestId":"28","url":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","originUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","documentUrl":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","method":"GET","type":"media","timeStamp":1696742321962,"tabId":2,"frameId":0,"parentFrameId":-1,"incognito":false,"thirdParty":false,"cookieStoreId":"firefox-default","fromCache":false,"responseHeaders":[{"name":"access-control-allow-origin","value":"*"},{"name":"location","value":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content"}],"statusCode":301,"statusLine":"HTTP/1.1 301 Moved Permanently","redirectUrl":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","proxyInfo":{"connectionIsolationKey":"","failoverTimeout":1800,"host":"127.0.0.1","port":65480,"proxyAuthorizationHeader":"","proxyDNS":false,"type":"http","username":""},"ip":"127.0.0.1","frameAncestors":[],"urlClassification":{"firstParty":[],"thirdParty":[]},"requestSize":0,"responseSize":0}]}},"events":[{"isSecure":true,"wid":"21db79ee-0776-4a19-83a2-0b2e035e5b06","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/testharness_runner.html","origin":"https://web-platform.test:8443","pathname":"/testharness_runner.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"WindowOpen","args":["about:blank","b188dcee-17cd-4701-9e12-c67b0ec4618a","noopener"],"ret":null,"timeStamp":1696742320562},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=put&value=52b61006-143c-4179-ac9a-f34f01167662"],"ret":null,"timeStamp":1696742320742},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321226},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=put&value=5769c96a-9980-4319-8585-6d2d89fb066d"],"ret":null,"timeStamp":1696742321242},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321277},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=put&value=4f2d36bf-89d4-4e0c-ba05-fa1968755251"],"ret":null,"timeStamp":1696742321311},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321500},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=put&value=89748437-26e9-4ae9-a435-23c29a0c8714"],"ret":null,"timeStamp":1696742321537},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321618},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=put&value=aa27c451-1454-42f6-a22c-cb5ecf2b23ca"],"ret":null,"timeStamp":1696742321649},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321722},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=put&value=4ce00bb6-3f21-4cfd-be4f-e3f43a4589e1"],"ret":null,"timeStamp":1696742321757},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742321864},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=put&value=e9fd5625-a4b2-4456-b928-ec1244884eca"],"ret":null,"timeStamp":1696742321901},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742322038},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=put&value=10ec93b3-05e7-4504-9710-f4d33d99840e"],"ret":null,"timeStamp":1696742322080},{"isSecure":true,"wid":"9cbe29a9-b9fb-4a2d-a320-0095df46cef8","orig":{"host":"web-platform.test:8443","hostname":"web-platform.test","href":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","origin":"https://web-platform.test:8443","pathname":"/mixed-content/gen/top.meta/unset/video-tag.https.html","port":"8443","protocol":"https:","site":"web-platform.test"},"type":"XHR","args":["GET","/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=take"],"ret":null,"timeStamp":1696742322161}],"cookies":{},"tests":{"Mixed-Content: Expects allowed for video-tag to cross-http origin and keep-scheme redirection from https context.":{"start":1696742320741,"end":1696742321241},"Mixed-Content: Expects allowed for video-tag to cross-http origin and no-redirect redirection from https context.":{"start":1696742321242,"end":1696742321310},"Mixed-Content: Expects allowed for video-tag to cross-http origin and swap-scheme redirection from https context.":{"start":1696742321310,"end":1696742321535},"Mixed-Content: Expects allowed for video-tag to same-http origin and keep-scheme redirection from https context.":{"start":1696742321537,"end":1696742321649},"Mixed-Content: Expects allowed for video-tag to same-http origin and no-redirect redirection from https context.":{"start":1696742321649,"end":1696742321756},"Mixed-Content: Expects allowed for video-tag to same-http origin and swap-scheme redirection from https context.":{"start":1696742321757,"end":1696742321900},"Mixed-Content: Expects allowed for video-tag to same-https origin and keep-scheme redirection from https context.":{"start":1696742321900,"end":1696742322079},"Mixed-Content: Expects allowed for video-tag to same-https origin and no-redirect redirection from https context.":{"start":1696742322080,"end":1696742322197}},"proxy":{"requests":[{"url":"http://web-platform.test:8000/testharness_runner.html","request_start":1696742319.751941,"request_end":1696742319.7528346,"ts":1696742319.7531722,"body":""},{"url":"https://web-platform.test:8443/testharness_runner.html","request_start":1696742320.4120967,"request_end":1696742320.4130225,"ts":1696742320.4134002,"body":""},{"url":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","request_start":1696742320.6047256,"request_end":1696742320.6058047,"ts":1696742320.6063106,"body":""},{"url":"https://web-platform.test:8443/resources/testharness.js","request_start":1696742320.6731074,"request_end":1696742320.6738627,"ts":1696742320.6744092,"body":""},{"url":"https://web-platform.test:8443/resources/testharnessreport.js","request_start":1696742320.6751544,"request_end":1696742320.6762974,"ts":1696742320.676824,"body":""},{"url":"https://web-platform.test:8443/common/security-features/resources/common.sub.js","request_start":1696742320.6837335,"request_end":1696742320.684742,"ts":1696742320.6854024,"body":""},{"url":"https://web-platform.test:8443/mixed-content/generic/test-case.sub.js","request_start":1696742320.688708,"request_end":1696742320.6893594,"ts":1696742320.6901789,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=put&value=52b61006-143c-4179-ac9a-f34f01167662","request_start":1696742320.7736986,"request_end":1696742320.7745354,"ts":1696742320.774847,"body":""},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","request_start":1696742320.997527,"request_end":1696742320.9986107,"ts":1696742320.9988542,"body":""},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","request_start":1696742321.0487115,"request_end":1696742321.049654,"ts":1696742321.0500047,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=take","request_start":1696742321.230314,"request_end":1696742321.2311401,"ts":1696742321.2314231,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=put&value=5769c96a-9980-4319-8585-6d2d89fb066d","request_start":1696742321.246735,"request_end":1696742321.2474945,"ts":1696742321.2477548,"body":""},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content","request_start":1696742321.2607882,"request_end":1696742321.2615836,"ts":1696742321.2618852,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=take","request_start":1696742321.3001425,"request_end":1696742321.3011708,"ts":1696742321.3014922,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=put&value=4f2d36bf-89d4-4e0c-ba05-fa1968755251","request_start":1696742321.3384054,"request_end":1696742321.339243,"ts":1696742321.3396156,"body":""},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","request_start":1696742321.3613424,"request_end":1696742321.3620784,"ts":1696742321.362364,"body":""},{"url":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","request_start":1696742321.452069,"request_end":1696742321.4529803,"ts":1696742321.4533453,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=take","request_start":1696742321.525737,"request_end":1696742321.5264232,"ts":1696742321.526713,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=put&value=89748437-26e9-4ae9-a435-23c29a0c8714","request_start":1696742321.5567372,"request_end":1696742321.557289,"ts":1696742321.5575154,"body":""},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","request_start":1696742321.5715048,"request_end":1696742321.572361,"ts":1696742321.5725718,"body":""},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","request_start":1696742321.5846207,"request_end":1696742321.5851393,"ts":1696742321.5853431,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=take","request_start":1696742321.637276,"request_end":1696742321.6377935,"ts":1696742321.6380243,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=put&value=aa27c451-1454-42f6-a22c-cb5ecf2b23ca","request_start":1696742321.669583,"request_end":1696742321.6700912,"ts":1696742321.670322,"body":""},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content","request_start":1696742321.7029676,"request_end":1696742321.7037833,"ts":1696742321.7040167,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=take","request_start":1696742321.7395704,"request_end":1696742321.7400799,"ts":1696742321.7403133,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=put&value=4ce00bb6-3f21-4cfd-be4f-e3f43a4589e1","request_start":1696742321.7826638,"request_end":1696742321.7832077,"ts":1696742321.7834454,"body":""},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","request_start":1696742321.7965949,"request_end":1696742321.797139,"ts":1696742321.7973113,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","request_start":1696742321.8302698,"request_end":1696742321.8307967,"ts":1696742321.831031,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=take","request_start":1696742321.8851018,"request_end":1696742321.8856833,"ts":1696742321.8859403,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=put&value=e9fd5625-a4b2-4456-b928-ec1244884eca","request_start":1696742321.919776,"request_end":1696742321.9202988,"ts":1696742321.9205256,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","request_start":1696742321.956693,"request_end":1696742321.957264,"ts":1696742321.9575012,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","request_start":1696742321.9787097,"request_end":1696742321.9792879,"ts":1696742321.9795322,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=take","request_start":1696742322.0649476,"request_end":1696742322.0655942,"ts":1696742322.0658476,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=put&value=10ec93b3-05e7-4504-9710-f4d33d99840e","request_start":1696742322.101451,"request_end":1696742322.1020446,"ts":1696742322.102303,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content","request_start":1696742322.1392508,"request_end":1696742322.1398778,"ts":1696742322.1401284,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=take","request_start":1696742322.1810985,"request_end":1696742322.181667,"ts":1696742322.1819134,"body":""}],"responses":[{"url":"http://web-platform.test:8000/testharness_runner.html","request_start":1696742319.751941,"response_start":1696742319.7568934,"request_end":1696742319.7528346,"response_end":1696742319.7575614,"ts":1696742319.7577457,"body":"<!doctype html>\n<title></title>\n<script>\nvar timeout_multiplier = 1;\nvar win = null;\n</script>\n"},{"url":"https://web-platform.test:8443/testharness_runner.html","request_start":1696742320.4120967,"response_start":1696742320.4559135,"request_end":1696742320.4130225,"response_end":1696742320.4567585,"ts":1696742320.4569745,"body":"<!doctype html>\n<title></title>\n<script>\nvar timeout_multiplier = 1;\nvar win = null;\n</script>\n"},{"url":"https://web-platform.test:8443/mixed-content/gen/top.meta/unset/video-tag.https.html","request_start":1696742320.6047256,"response_start":1696742320.6082067,"request_end":1696742320.6058047,"response_end":1696742320.6092691,"ts":1696742320.6095934,"body":"<!DOCTYPE html>\n<!-- DO NOT EDIT! Generated by `common/security-features/tools/generate.py --spec mixed-content/` -->\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"timeout\" content=\"long\">\n    <script src=\"/resources/testharness.js\"></script>\n    <script src=\"/resources/testharnessreport.js\"></script>\n    <script src=\"/common/security-features/resources/common.sub.js\"></script>\n    <script src=\"../../../generic/test-case.sub.js\"></script>\n  </head>\n  <body>\n    <script>\n      TestCase(\n        [\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"cross-http\",\n            \"redirection\": \"keep-scheme\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to cross-http origin and keep-scheme redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"cross-http\",\n            \"redirection\": \"no-redirect\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to cross-http origin and no-redirect redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"cross-http\",\n            \"redirection\": \"swap-scheme\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to cross-http origin and swap-scheme redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"same-http\",\n            \"redirection\": \"keep-scheme\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to same-http origin and keep-scheme redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"same-http\",\n            \"redirection\": \"no-redirect\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to same-http origin and no-redirect redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"same-http\",\n            \"redirection\": \"swap-scheme\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to same-http origin and swap-scheme redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"same-https\",\n            \"redirection\": \"keep-scheme\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to same-https origin and keep-scheme redirection from https context.\"\n          },\n          {\n            \"expectation\": \"allowed\",\n            \"origin\": \"same-https\",\n            \"redirection\": \"no-redirect\",\n            \"source_context_list\": [],\n            \"source_scheme\": \"https\",\n            \"subresource\": \"video-tag\",\n            \"subresource_policy_deliveries\": [],\n            \"test_description\": \"Mixed-Content: Expects allowed for video-tag to same-https origin and no-redirect redirection from https context.\"\n          }\n        ],\n        new SanityChecker()\n      ).start();\n    </script>\n    <div id=\"log\"></div>\n  </body>\n</html>\n"},{"url":"https://web-platform.test:8443/resources/testharness.js","request_start":1696742320.6731074,"response_start":1696742320.6817513,"request_end":1696742320.6738627,"response_end":1696742320.6848483,"ts":1696742320.6859865,"body":"/*global self*/\n/*jshint latedef: nofunc*/\n\n/* Documentation: https://web-platform-tests.org/writing-tests/testharness-api.html\n * (../docs/_writing-tests/testharness-api.md) */\n\n(function (global_scope)\n{\n    // default timeout is 10 seconds, test can override if needed\n    var settings = {\n        output:true,\n        harness_timeout:{\n            \"normal\":10000,\n            \"long\":60000\n        },\n        test_timeout:null,\n        message_events: [\"start\", \"test_state\", \"result\", \"completion\"],\n        debug: false,\n    };\n\n    var xhtml_ns = \"http://www.w3.org/1999/xhtml\";\n\n    /*\n     * TestEnvironment is an abstraction for the environment in which the test\n     * harness is used. Each implementation of a test environment has to provide\n     * the following interface:\n     *\n     * interface TestEnvironment {\n     *   // Invoked after the global 'tests' object has been created and it's\n     *   // safe to call add_*_callback() to register event handlers.\n     *   void on_tests_ready();\n     *\n     *   // Invoked after setup() has been called to notify the test environment\n     *   // of changes to the test harness properties.\n     *   void on_new_harness_properties(object properties);\n     *\n     *   // Should return a new unique default test name.\n     *   DOMString next_default_test_name();\n     *\n     *   // Should return the test harness timeout duration in milliseconds.\n     *   float test_timeout();\n     * };\n     */\n\n    /*\n     * A test environment with a DOM. The global object is 'window'. By default\n     * test results are displayed in a table. Any parent windows receive\n     * callbacks or messages via postMessage() when test events occur. See\n     * apisample11.html and apisample12.html.\n     */\n    function WindowTestEnvironment() {\n        this.name_counter = 0;\n        this.window_cache = null;\n        this.output_handler = null;\n        this.all_loaded = false;\n        var this_obj = this;\n        this.message_events = [];\n        this.dispatched_messages = [];\n\n        this.message_functions = {\n            start: [add_start_callback, remove_start_callback,\n                    function (properties) {\n                        this_obj._dispatch(\"start_callback\", [properties],\n                                           {type: \"start\", properties: properties});\n                    }],\n\n            test_state: [add_test_state_callback, remove_test_state_callback,\n                         function(test) {\n                             this_obj._dispatch(\"test_state_callback\", [test],\n                                                {type: \"test_state\",\n                                                 test: test.structured_clone()});\n                         }],\n            result: [add_result_callback, remove_result_callback,\n                     function (test) {\n                         this_obj.output_handler.show_status();\n                         this_obj._dispatch(\"result_callback\", [test],\n                                            {type: \"result\",\n                                             test: test.structured_clone()});\n                     }],\n            completion: [add_completion_callback, remove_completion_callback,\n                         function (tests, harness_status, asserts) {\n                             var cloned_tests = map(tests, function(test) {\n                                 return test.structured_clone();\n                             });\n                             this_obj._dispatch(\"completion_callback\", [tests, harness_status],\n                                                {type: \"complete\",\n                                                 tests: cloned_tests,\n                                                 status: harness_status.structured_clone(),\n                                                 asserts: asserts.map(assert => assert.structured_clone())});\n                         }]\n        }\n\n        on_event(window, 'load', function() {\n            this_obj.all_loaded = true;\n        });\n\n        on_event(window, 'message', function(event) {\n            if (event.data && event.data.type === \"getmessages\" && event.source) {\n                // A window can post \"getmessages\" to receive a duplicate of every\n                // message posted by this environment so far. This allows subscribers\n                // from fetch_tests_from_window to 'catch up' to the current state of\n                // this environment.\n                for (var i = 0; i < this_obj.dispatched_messages.length; ++i)\n                {\n                    event.source.postMessage(this_obj.dispatched_messages[i], \"*\");\n                }\n            }\n        });\n    }\n\n    WindowTestEnvironment.prototype._dispatch = function(selector, callback_args, message_arg) {\n        this.dispatched_messages.push(message_arg);\n        this._forEach_windows(\n                function(w, same_origin) {\n                    if (same_origin) {\n                        try {\n                            var has_selector = selector in w;\n                        } catch(e) {\n                            // If document.domain was set at some point same_origin can be\n                            // wrong and the above will fail.\n                            has_selector = false;\n                        }\n                        if (has_selector) {\n                            try {\n                                w[selector].apply(undefined, callback_args);\n                            } catch (e) {}\n                        }\n                    }\n                    if (w !== self) {\n                        w.postMessage(message_arg, \"*\");\n                    }\n                });\n    };\n\n    WindowTestEnvironment.prototype._forEach_windows = function(callback) {\n        // Iterate over the windows [self ... top, opener]. The callback is passed\n        // two objects, the first one is the window object itself, the second one\n        // is a boolean indicating whether or not it's on the same origin as the\n        // current window.\n        var cache = this.window_cache;\n        if (!cache) {\n            cache = [[self, true]];\n            var w = self;\n            var i = 0;\n            var so;\n            while (w != w.parent) {\n                w = w.parent;\n                so = is_same_origin(w);\n                cache.push([w, so]);\n                i++;\n            }\n            w = window.opener;\n            if (w) {\n                cache.push([w, is_same_origin(w)]);\n            }\n            this.window_cache = cache;\n        }\n\n        forEach(cache,\n                function(a) {\n                    callback.apply(null, a);\n                });\n    };\n\n    WindowTestEnvironment.prototype.on_tests_ready = function() {\n        var output = new Output();\n        this.output_handler = output;\n\n        var this_obj = this;\n\n        add_start_callback(function (properties) {\n            this_obj.output_handler.init(properties);\n        });\n\n        add_test_state_callback(function(test) {\n            this_obj.output_handler.show_status();\n        });\n\n        add_result_callback(function (test) {\n            this_obj.output_handler.show_status();\n        });\n\n        add_completion_callback(function (tests, harness_status, asserts_run) {\n            this_obj.output_handler.show_results(tests, harness_status, asserts_run);\n        });\n        this.setup_messages(settings.message_events);\n    };\n\n    WindowTestEnvironment.prototype.setup_messages = function(new_events) {\n        var this_obj = this;\n        forEach(settings.message_events, function(x) {\n            var current_dispatch = this_obj.message_events.indexOf(x) !== -1;\n            var new_dispatch = new_events.indexOf(x) !== -1;\n            if (!current_dispatch && new_dispatch) {\n                this_obj.message_functions[x][0](this_obj.message_functions[x][2]);\n            } else if (current_dispatch && !new_dispatch) {\n                this_obj.message_functions[x][1](this_obj.message_functions[x][2]);\n            }\n        });\n        this.message_events = new_events;\n    }\n\n    WindowTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    WindowTestEnvironment.prototype.on_new_harness_properties = function(properties) {\n        this.output_handler.setup(properties);\n        if (properties.hasOwnProperty(\"message_events\")) {\n            this.setup_messages(properties.message_events);\n        }\n    };\n\n    WindowTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        on_event(window, 'load', callback);\n    };\n\n    WindowTestEnvironment.prototype.test_timeout = function() {\n        var metas = document.getElementsByTagName(\"meta\");\n        for (var i = 0; i < metas.length; i++) {\n            if (metas[i].name == \"timeout\") {\n                if (metas[i].content == \"long\") {\n                    return settings.harness_timeout.long;\n                }\n                break;\n            }\n        }\n        return settings.harness_timeout.normal;\n    };\n\n    /*\n     * Base TestEnvironment implementation for a generic web worker.\n     *\n     * Workers accumulate test results. One or more clients can connect and\n     * retrieve results from a worker at any time.\n     *\n     * WorkerTestEnvironment supports communicating with a client via a\n     * MessagePort.  The mechanism for determining the appropriate MessagePort\n     * for communicating with a client depends on the type of worker and is\n     * implemented by the various specializations of WorkerTestEnvironment\n     * below.\n     *\n     * A client document using testharness can use fetch_tests_from_worker() to\n     * retrieve results from a worker. See apisample16.html.\n     */\n    function WorkerTestEnvironment() {\n        this.name_counter = 0;\n        this.all_loaded = true;\n        this.message_list = [];\n        this.message_ports = [];\n    }\n\n    WorkerTestEnvironment.prototype._dispatch = function(message) {\n        this.message_list.push(message);\n        for (var i = 0; i < this.message_ports.length; ++i)\n        {\n            this.message_ports[i].postMessage(message);\n        }\n    };\n\n    // The only requirement is that port has a postMessage() method. It doesn't\n    // have to be an instance of a MessagePort, and often isn't.\n    WorkerTestEnvironment.prototype._add_message_port = function(port) {\n        this.message_ports.push(port);\n        for (var i = 0; i < this.message_list.length; ++i)\n        {\n            port.postMessage(this.message_list[i]);\n        }\n    };\n\n    WorkerTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    WorkerTestEnvironment.prototype.on_new_harness_properties = function() {};\n\n    WorkerTestEnvironment.prototype.on_tests_ready = function() {\n        var this_obj = this;\n        add_start_callback(\n                function(properties) {\n                    this_obj._dispatch({\n                        type: \"start\",\n                        properties: properties,\n                    });\n                });\n        add_test_state_callback(\n                function(test) {\n                    this_obj._dispatch({\n                        type: \"test_state\",\n                        test: test.structured_clone()\n                    });\n                });\n        add_result_callback(\n                function(test) {\n                    this_obj._dispatch({\n                        type: \"result\",\n                        test: test.structured_clone()\n                    });\n                });\n        add_completion_callback(\n                function(tests, harness_status, asserts) {\n                    this_obj._dispatch({\n                        type: \"complete\",\n                        tests: map(tests,\n                            function(test) {\n                                return test.structured_clone();\n                            }),\n                        status: harness_status.structured_clone(),\n                        asserts: asserts.map(assert => assert.structured_clone()),\n                    });\n                });\n    };\n\n    WorkerTestEnvironment.prototype.add_on_loaded_callback = function() {};\n\n    WorkerTestEnvironment.prototype.test_timeout = function() {\n        // Tests running in a worker don't have a default timeout. I.e. all\n        // worker tests behave as if settings.explicit_timeout is true.\n        return null;\n    };\n\n    /*\n     * Dedicated web workers.\n     * https://html.spec.whatwg.org/multipage/workers.html#dedicatedworkerglobalscope\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a dedicated worker.\n     */\n    function DedicatedWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        // self is an instance of DedicatedWorkerGlobalScope which exposes\n        // a postMessage() method for communicating via the message channel\n        // established when the worker is created.\n        this._add_message_port(self);\n    }\n    DedicatedWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    DedicatedWorkerTestEnvironment.prototype.on_tests_ready = function() {\n        WorkerTestEnvironment.prototype.on_tests_ready.call(this);\n        // In the absence of an onload notification, we a require dedicated\n        // workers to explicitly signal when the tests are done.\n        tests.wait_for_finish = true;\n    };\n\n    /*\n     * Shared web workers.\n     * https://html.spec.whatwg.org/multipage/workers.html#sharedworkerglobalscope\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a shared web worker.\n     */\n    function SharedWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        var this_obj = this;\n        // Shared workers receive message ports via the 'onconnect' event for\n        // each connection.\n        self.addEventListener(\"connect\",\n                function(message_event) {\n                    this_obj._add_message_port(message_event.source);\n                }, false);\n    }\n    SharedWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    SharedWorkerTestEnvironment.prototype.on_tests_ready = function() {\n        WorkerTestEnvironment.prototype.on_tests_ready.call(this);\n        // In the absence of an onload notification, we a require shared\n        // workers to explicitly signal when the tests are done.\n        tests.wait_for_finish = true;\n    };\n\n    /*\n     * Service workers.\n     * http://www.w3.org/TR/service-workers/\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a service worker.\n     */\n    function ServiceWorkerTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n        var this_obj = this;\n        self.addEventListener(\"message\",\n                function(event) {\n                    if (event.data && event.data.type && event.data.type === \"connect\") {\n                        this_obj._add_message_port(event.source);\n                    }\n                }, false);\n\n        // The oninstall event is received after the service worker script and\n        // all imported scripts have been fetched and executed. It's the\n        // equivalent of an onload event for a document. All tests should have\n        // been added by the time this event is received, thus it's not\n        // necessary to wait until the onactivate event. However, tests for\n        // installed service workers need another event which is equivalent to\n        // the onload event because oninstall is fired only on installation. The\n        // onmessage event is used for that purpose since tests using\n        // testharness.js should ask the result to its service worker by\n        // PostMessage. If the onmessage event is triggered on the service\n        // worker's context, that means the worker's script has been evaluated.\n        on_event(self, \"install\", on_all_loaded);\n        on_event(self, \"message\", on_all_loaded);\n        function on_all_loaded() {\n            if (this_obj.all_loaded)\n                return;\n            this_obj.all_loaded = true;\n            if (this_obj.on_loaded_callback) {\n              this_obj.on_loaded_callback();\n            }\n        }\n    }\n\n    ServiceWorkerTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    ServiceWorkerTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    /*\n     * Shadow realms.\n     * https://github.com/tc39/proposal-shadowrealm\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a shadow realm.\n     */\n    function ShadowRealmTestEnvironment() {\n        WorkerTestEnvironment.call(this);\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n    }\n\n    ShadowRealmTestEnvironment.prototype = Object.create(WorkerTestEnvironment.prototype);\n\n    /**\n     * Signal to the test environment that the tests are ready and the on-loaded\n     * callback should be run.\n     *\n     * Shadow realms are not *really* a DOM context: they have no `onload` or similar\n     * event for us to use to set up the test environment; so, instead, this method\n     * is manually triggered from the incubating realm\n     *\n     * @param {Function} message_destination - a function that receives JSON-serializable\n     * data to send to the incubating realm, in the same format as used by RemoteContext\n     */\n    ShadowRealmTestEnvironment.prototype.begin = function(message_destination) {\n        if (this.all_loaded) {\n            throw new Error(\"Tried to start a shadow realm test environment after it has already started\");\n        }\n        var fakeMessagePort = {};\n        fakeMessagePort.postMessage = message_destination;\n        this._add_message_port(fakeMessagePort);\n        this.all_loaded = true;\n        if (this.on_loaded_callback) {\n            this.on_loaded_callback();\n        }\n    };\n\n    ShadowRealmTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    /*\n     * JavaScript shells.\n     *\n     * This class is used as the test_environment when testharness is running\n     * inside a JavaScript shell.\n     */\n    function ShellTestEnvironment() {\n        this.name_counter = 0;\n        this.all_loaded = false;\n        this.on_loaded_callback = null;\n        Promise.resolve().then(function() {\n            this.all_loaded = true\n            if (this.on_loaded_callback) {\n                this.on_loaded_callback();\n            }\n        }.bind(this));\n        this.message_list = [];\n        this.message_ports = [];\n    }\n\n    ShellTestEnvironment.prototype.next_default_test_name = function() {\n        var suffix = this.name_counter > 0 ? \" \" + this.name_counter : \"\";\n        this.name_counter++;\n        return get_title() + suffix;\n    };\n\n    ShellTestEnvironment.prototype.on_new_harness_properties = function() {};\n\n    ShellTestEnvironment.prototype.on_tests_ready = function() {};\n\n    ShellTestEnvironment.prototype.add_on_loaded_callback = function(callback) {\n        if (this.all_loaded) {\n            callback();\n        } else {\n            this.on_loaded_callback = callback;\n        }\n    };\n\n    ShellTestEnvironment.prototype.test_timeout = function() {\n        // Tests running in a shell don't have a default timeout, so behave as\n        // if settings.explicit_timeout is true.\n        return null;\n    };\n\n    function create_test_environment() {\n        if ('document' in global_scope) {\n            return new WindowTestEnvironment();\n        }\n        if ('DedicatedWorkerGlobalScope' in global_scope &&\n            global_scope instanceof DedicatedWorkerGlobalScope) {\n            return new DedicatedWorkerTestEnvironment();\n        }\n        if ('SharedWorkerGlobalScope' in global_scope &&\n            global_scope instanceof SharedWorkerGlobalScope) {\n            return new SharedWorkerTestEnvironment();\n        }\n        if ('ServiceWorkerGlobalScope' in global_scope &&\n            global_scope instanceof ServiceWorkerGlobalScope) {\n            return new ServiceWorkerTestEnvironment();\n        }\n        if ('WorkerGlobalScope' in global_scope &&\n            global_scope instanceof WorkerGlobalScope) {\n            return new DedicatedWorkerTestEnvironment();\n        }\n        /* Shadow realm global objects are _ordinary_ objects (i.e. their prototype is\n         * Object) so we don't have a nice `instanceof` test to use; instead, we\n         * check if the there is a GLOBAL.isShadowRealm() property\n         * on the global object. that was set by the test harness when it\n         * created the ShadowRealm.\n         */\n        if (global_scope.GLOBAL && global_scope.GLOBAL.isShadowRealm()) {\n            return new ShadowRealmTestEnvironment();\n        }\n\n        return new ShellTestEnvironment();\n    }\n\n    var test_environment = create_test_environment();\n\n    function is_shared_worker(worker) {\n        return 'SharedWorker' in global_scope && worker instanceof SharedWorker;\n    }\n\n    function is_service_worker(worker) {\n        // The worker object may be from another execution context,\n        // so do not use instanceof here.\n        return 'ServiceWorker' in global_scope &&\n            Object.prototype.toString.call(worker) == '[object ServiceWorker]';\n    }\n\n    var seen_func_name = Object.create(null);\n\n    function get_test_name(func, name)\n    {\n        if (name) {\n            return name;\n        }\n\n        if (func) {\n            var func_code = func.toString();\n\n            // Try and match with brackets, but fallback to matching without\n            var arrow = func_code.match(/^\\(\\)\\s*=>\\s*(?:{(.*)}\\s*|(.*))$/);\n\n            // Check for JS line separators\n            if (arrow !== null && !/[\\u000A\\u000D\\u2028\\u2029]/.test(func_code)) {\n                var trimmed = (arrow[1] !== undefined ? arrow[1] : arrow[2]).trim();\n                // drop trailing ; if there's no earlier ones\n                trimmed = trimmed.replace(/^([^;]*)(;\\s*)+$/, \"$1\");\n\n                if (trimmed) {\n                    let name = trimmed;\n                    if (seen_func_name[trimmed]) {\n                        // This subtest name already exists, so add a suffix.\n                        name += \" \" + seen_func_name[trimmed];\n                    } else {\n                        seen_func_name[trimmed] = 0;\n                    }\n                    seen_func_name[trimmed] += 1;\n                    return name;\n                }\n            }\n        }\n\n        return test_environment.next_default_test_name();\n    }\n\n    /**\n     * @callback TestFunction\n     * @param {Test} test - The test currnetly being run.\n     * @param {Any[]} args - Additional args to pass to function.\n     *\n     */\n\n    /**\n     * Create a synchronous test\n     *\n     * @param {TestFunction} func - Test function. This is executed\n     * immediately. If it returns without error, the test status is\n     * set to ``PASS``. If it throws an :js:class:`AssertionError`, or\n     * any other exception, the test status is set to ``FAIL``\n     * (typically from an `assert` function).\n     * @param {String} name - Test name. This must be unique in a\n     * given file and must be invariant between runs.\n     */\n    function test(func, name, properties)\n    {\n        if (tests.promise_setup_called) {\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = '`test` invoked after `promise_setup`';\n            tests.complete();\n        }\n        var test_name = get_test_name(func, name);\n        var test_obj = new Test(test_name, properties);\n        var value = test_obj.step(func, test_obj, test_obj);\n\n        if (value !== undefined) {\n            var msg = 'Test named \"' + test_name +\n                '\" passed a function to `test` that returned a value.';\n\n            try {\n                if (value && typeof value.then === 'function') {\n                    msg += ' Consider using `promise_test` instead when ' +\n                        'using Promises or async/await.';\n                }\n            } catch (err) {}\n\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = msg;\n        }\n\n        if (test_obj.phase === test_obj.phases.STARTED) {\n            test_obj.done();\n        }\n    }\n\n    /**\n     * Create an asynchronous test\n     *\n     * @param {TestFunction|string} funcOrName - Initial step function\n     * to call immediately with the test name as an argument (if any),\n     * or name of the test.\n     * @param {String} name - Test name (if a test function was\n     * provided). This must be unique in a given file and must be\n     * invariant between runs.\n     * @returns {Test} An object representing the ongoing test.\n     */\n    function async_test(func, name, properties)\n    {\n        if (tests.promise_setup_called) {\n            tests.status.status = tests.status.ERROR;\n            tests.status.message = '`async_test` invoked after `promise_setup`';\n            tests.complete();\n        }\n        if (typeof func !== \"function\") {\n            properties = name;\n            name = func;\n            func = null;\n        }\n        var test_name = get_test_name(func, name);\n        var test_obj = new Test(test_name, properties);\n        if (func) {\n            var value = test_obj.step(func, test_obj, test_obj);\n\n            // Test authors sometimes return values to async_test, expecting us\n            // to handle the value somehow. Make doing so a harness error to be\n            // clear this is invalid, and point authors to promise_test if it\n            // may be appropriate.\n            //\n            // Note that we only perform this check on the initial function\n            // passed to async_test, not on any later steps - we haven't seen a\n            // consistent problem with those (and it's harder to check).\n            if (value !== undefined) {\n                var msg = 'Test named \"' + test_name +\n                    '\" passed a function to `async_test` that returned a value.';\n\n                try {\n                    if (value && typeof value.then === 'function') {\n                        msg += ' Consider using `promise_test` instead when ' +\n                            'using Promises or async/await.';\n                    }\n                } catch (err) {}\n\n                tests.set_status(tests.status.ERROR, msg);\n                tests.complete();\n            }\n        } else {\n            // In his case, the test might not be stepped at all, and it even if it is, only the first START event counts for each test\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"START\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': test_name}, ts: Date.now()}}))\n        }\n        return test_obj;\n    }\n\n    /**\n     * Create a promise test.\n     *\n     * Promise tests are tests which are represented by a promise\n     * object. If the promise is fulfilled the test passes, if it's\n     * rejected the test fails, otherwise the test passes.\n     *\n     * @param {TestFunction} func - Test function. This must return a\n     * promise. The test is automatically marked as complete once the\n     * promise settles.\n     * @param {String} name - Test name. This must be unique in a\n     * given file and must be invariant between runs.\n     */\n    function promise_test(func, name, properties) {\n        if (typeof func !== \"function\") {\n            properties = name;\n            name = func;\n            func = null;\n        }\n        var test_name = get_test_name(func, name);\n        var test = new Test(test_name, properties);\n        test._is_promise_test = true;\n\n        // If there is no promise tests queue make one.\n        if (!tests.promise_tests) {\n            tests.promise_tests = Promise.resolve();\n        }\n        tests.promise_tests = tests.promise_tests.then(function() {\n            return new Promise(function(resolve) {\n                var promise = test.step(func, test, test);\n\n                test.step(function() {\n                    assert(!!promise, \"promise_test\", null,\n                           \"test body must return a 'thenable' object (received ${value})\",\n                           {value:promise});\n                    assert(typeof promise.then === \"function\", \"promise_test\", null,\n                           \"test body must return a 'thenable' object (received an object with no `then` method)\",\n                           null);\n                });\n\n                // Test authors may use the `step` method within a\n                // `promise_test` even though this reflects a mixture of\n                // asynchronous control flow paradigms. The \"done\" callback\n                // should be registered prior to the resolution of the\n                // user-provided Promise to avoid timeouts in cases where the\n                // Promise does not settle but a `step` function has thrown an\n                // error.\n                add_test_done_callback(test, resolve);\n\n                Promise.resolve(promise)\n                    .catch(test.step_func(\n                        function(value) {\n                            if (value instanceof AssertionError) {\n                                throw value;\n                            }\n                            assert(false, \"promise_test\", null,\n                                   \"Unhandled rejection with value: ${value}\", {value:value});\n                        }))\n                    .then(function() {\n                        test.done();\n                    });\n                });\n        });\n    }\n\n    /**\n     * Make a copy of a Promise in the current realm.\n     *\n     * @param {Promise} promise the given promise that may be from a different\n     *                          realm\n     * @returns {Promise}\n     *\n     * An arbitrary promise provided by the caller may have originated\n     * in another frame that have since navigated away, rendering the\n     * frame's document inactive. Such a promise cannot be used with\n     * `await` or Promise.resolve(), as microtasks associated with it\n     * may be prevented from being run. See `issue\n     * 5319<https://github.com/whatwg/html/issues/5319>`_ for a\n     * particular case.\n     *\n     * In functions we define here, there is an expectation from the caller\n     * that the promise is from the current realm, that can always be used with\n     * `await`, etc. We therefore create a new promise in this realm that\n     * inherit the value and status from the given promise.\n     */\n\n    function bring_promise_to_current_realm(promise) {\n        return new Promise(promise.then.bind(promise));\n    }\n\n    /**\n     * Assert that a Promise is rejected with the right ECMAScript exception.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {Function} constructor - The expected exception constructor.\n     * @param {Promise} promise - The promise that's expected to\n     * reject with the given exception.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     */\n    function promise_rejects_js(test, constructor, promise, description) {\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_js_impl(constructor, function() { throw e },\n                                      description, \"promise_rejects_js\");\n            });\n    }\n\n    /**\n     * Assert that a Promise is rejected with the right DOMException.\n     *\n     * For the remaining arguments, there are two ways of calling\n     * promise_rejects_dom:\n     *\n     * 1) If the DOMException is expected to come from the current global, the\n     * third argument should be the promise expected to reject, and a fourth,\n     * optional, argument is the assertion description.\n     *\n     * 2) If the DOMException is expected to come from some other global, the\n     * third argument should be the DOMException constructor from that global,\n     * the fourth argument the promise expected to reject, and the fifth,\n     * optional, argument the assertion description.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {number|string} type - See documentation for\n     * `assert_throws_dom <#assert_throws_dom>`_.\n     * @param {Function} promiseOrConstructor - Either the constructor\n     * for the expected exception (if the exception comes from another\n     * global), or the promise that's expected to reject (if the\n     * exception comes from the current global).\n     * @param {Function|string} descriptionOrPromise - Either the\n     * promise that's expected to reject (if the exception comes from\n     * another global), or the optional description of the condition\n     * being tested (if the exception comes from the current global).\n     * @param {string} [description] - Description of the condition\n     * being tested (if the exception comes from another global).\n     *\n     */\n    function promise_rejects_dom(test, type, promiseOrConstructor, descriptionOrPromise, maybeDescription) {\n        let constructor, promise, description;\n        if (typeof promiseOrConstructor === \"function\" &&\n            promiseOrConstructor.name === \"DOMException\") {\n            constructor = promiseOrConstructor;\n            promise = descriptionOrPromise;\n            description = maybeDescription;\n        } else {\n            constructor = self.DOMException;\n            promise = promiseOrConstructor;\n            description = descriptionOrPromise;\n            assert(maybeDescription === undefined,\n                   \"Too many args pased to no-constructor version of promise_rejects_dom\");\n        }\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_dom_impl(type, function() { throw e }, description,\n                                       \"promise_rejects_dom\", constructor);\n            });\n    }\n\n    /**\n     * Assert that a Promise is rejected with the provided value.\n     *\n     * @param {Test} test - the `Test` to use for the assertion.\n     * @param {Any} exception - The expected value of the rejected promise.\n     * @param {Promise} promise - The promise that's expected to\n     * reject.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     */\n    function promise_rejects_exactly(test, exception, promise, description) {\n        return bring_promise_to_current_realm(promise)\n            .then(test.unreached_func(\"Should have rejected: \" + description))\n            .catch(function(e) {\n                assert_throws_exactly_impl(exception, function() { throw e },\n                                           description, \"promise_rejects_exactly\");\n            });\n    }\n\n    /**\n     * Allow DOM events to be handled using Promises.\n     *\n     * This can make it a lot easier to test a very specific series of events,\n     * including ensuring that unexpected events are not fired at any point.\n     *\n     * `EventWatcher` will assert if an event occurs while there is no `wait_for`\n     * created Promise waiting to be fulfilled, or if the event is of a different type\n     * to the type currently expected. This ensures that only the events that are\n     * expected occur, in the correct order, and with the correct timing.\n     *\n     * @constructor\n     * @param {Test} test - The `Test` to use for the assertion.\n     * @param {EventTarget} watchedNode - The target expected to receive the events.\n     * @param {string[]} eventTypes - List of events to watch for.\n     * @param {Promise} timeoutPromise - Promise that will cause the\n     * test to be set to `TIMEOUT` once fulfilled.\n     *\n     */\n    function EventWatcher(test, watchedNode, eventTypes, timeoutPromise)\n    {\n        if (typeof eventTypes == 'string') {\n            eventTypes = [eventTypes];\n        }\n\n        var waitingFor = null;\n\n        // This is null unless we are recording all events, in which case it\n        // will be an Array object.\n        var recordedEvents = null;\n\n        var eventHandler = test.step_func(function(evt) {\n            assert_true(!!waitingFor,\n                        'Not expecting event, but got ' + evt.type + ' event');\n            assert_equals(evt.type, waitingFor.types[0],\n                          'Expected ' + waitingFor.types[0] + ' event, but got ' +\n                          evt.type + ' event instead');\n\n            if (Array.isArray(recordedEvents)) {\n                recordedEvents.push(evt);\n            }\n\n            if (waitingFor.types.length > 1) {\n                // Pop first event from array\n                waitingFor.types.shift();\n                return;\n            }\n            // We need to null out waitingFor before calling the resolve function\n            // since the Promise's resolve handlers may call wait_for() which will\n            // need to set waitingFor.\n            var resolveFunc = waitingFor.resolve;\n            waitingFor = null;\n            // Likewise, we should reset the state of recordedEvents.\n            var result = recordedEvents || evt;\n            recordedEvents = null;\n            resolveFunc(result);\n        });\n\n        for (var i = 0; i < eventTypes.length; i++) {\n            watchedNode.addEventListener(eventTypes[i], eventHandler, false);\n        }\n\n        /**\n         * Returns a Promise that will resolve after the specified event or\n         * series of events has occurred.\n         *\n         * @param {Object} options An optional options object. If the 'record' property\n         *                 on this object has the value 'all', when the Promise\n         *                 returned by this function is resolved,  *all* Event\n         *                 objects that were waited for will be returned as an\n         *                 array.\n         *\n         * @example\n         * const watcher = new EventWatcher(t, div, [ 'animationstart',\n         *                                            'animationiteration',\n         *                                            'animationend' ]);\n         * return watcher.wait_for([ 'animationstart', 'animationend' ],\n         *                         { record: 'all' }).then(evts => {\n         *   assert_equals(evts[0].elapsedTime, 0.0);\n         *   assert_equals(evts[1].elapsedTime, 2.0);\n         * });\n         */\n        this.wait_for = function(types, options) {\n            if (waitingFor) {\n                return Promise.reject('Already waiting for an event or events');\n            }\n            if (typeof types == 'string') {\n                types = [types];\n            }\n            if (options && options.record && options.record === 'all') {\n                recordedEvents = [];\n            }\n            return new Promise(function(resolve, reject) {\n                var timeout = test.step_func(function() {\n                    // If the timeout fires after the events have been received\n                    // or during a subsequent call to wait_for, ignore it.\n                    if (!waitingFor || waitingFor.resolve !== resolve)\n                        return;\n\n                    // This should always fail, otherwise we should have\n                    // resolved the promise.\n                    assert_true(waitingFor.types.length == 0,\n                                'Timed out waiting for ' + waitingFor.types.join(', '));\n                    var result = recordedEvents;\n                    recordedEvents = null;\n                    var resolveFunc = waitingFor.resolve;\n                    waitingFor = null;\n                    resolveFunc(result);\n                });\n\n                if (timeoutPromise) {\n                    timeoutPromise().then(timeout);\n                }\n\n                waitingFor = {\n                    types: types,\n                    resolve: resolve,\n                    reject: reject\n                };\n            });\n        };\n\n        /**\n         * Stop listening for events\n         */\n        function stop_watching() {\n            for (var i = 0; i < eventTypes.length; i++) {\n                watchedNode.removeEventListener(eventTypes[i], eventHandler, false);\n            }\n        };\n\n        test._add_cleanup(stop_watching);\n\n        return this;\n    }\n    expose(EventWatcher, 'EventWatcher');\n\n    /**\n     * @typedef {Object} SettingsObject\n     * @property {bool} single_test - Use the single-page-test\n     * mode. In this mode the Document represents a single\n     * `async_test`. Asserts may be used directly without requiring\n     * `Test.step` or similar wrappers, and any exceptions set the\n     * status of the test rather than the status of the harness.\n     * @property {bool} allow_uncaught_exception - don't treat an\n     * uncaught exception as an error; needed when e.g. testing the\n     * `window.onerror` handler.\n     * @property {boolean} explicit_done - Wait for a call to `done()`\n     * before declaring all tests complete (this is always true for\n     * single-page tests).\n     * @property hide_test_state - hide the test state output while\n     * the test is running; This is helpful when the output of the test state\n     * may interfere the test results.\n     * @property {bool} explicit_timeout - disable file timeout; only\n     * stop waiting for results when the `timeout()` function is\n     * called This should typically only be set for manual tests, or\n     * by a test runner that providees its own timeout mechanism.\n     * @property {number} timeout_multiplier - Multiplier to apply to\n     * per-test timeouts. This should only be set by a test runner.\n     * @property {Document} output_document - The document to which\n     * results should be logged. By default this is the current\n     * document but could be an ancestor document in some cases e.g. a\n     * SVG test loaded in an HTML wrapper\n     *\n     */\n\n    /**\n     * Configure the harness\n     *\n     * @param {Function|SettingsObject} funcOrProperties - Either a\n     * setup function to run, or a set of properties. If this is a\n     * function that function is run synchronously. Any exception in\n     * the function will set the overall harness status to `ERROR`.\n     * @param {SettingsObject} maybeProperties - An object containing\n     * the settings to use, if the first argument is a function.\n     *\n     */\n    function setup(func_or_properties, maybe_properties)\n    {\n        var func = null;\n        var properties = {};\n        if (arguments.length === 2) {\n            func = func_or_properties;\n            properties = maybe_properties;\n        } else if (func_or_properties instanceof Function) {\n            func = func_or_properties;\n        } else {\n            properties = func_or_properties;\n        }\n        tests.setup(func, properties);\n        test_environment.on_new_harness_properties(properties);\n    }\n\n    /**\n     * Configure the harness, waiting for a promise to resolve\n     * before running any `promise_test` tests.\n     *\n     * @param {Function} func - Function returning a promise that's\n     * run synchronously. Promise tests are not run until after this\n     * function has resolved.\n     * @param {SettingsObject} [properties] - An object containing\n     * the harness settings to use.\n     *\n     */\n    function promise_setup(func, properties={})\n    {\n        if (typeof func !== \"function\") {\n            tests.set_status(tests.status.ERROR,\n                             \"promise_test invoked without a function\");\n            tests.complete();\n            return;\n        }\n        tests.promise_setup_called = true;\n\n        if (!tests.promise_tests) {\n            tests.promise_tests = Promise.resolve();\n        }\n\n        tests.promise_tests = tests.promise_tests\n            .then(function()\n                  {\n                      var result;\n\n                      tests.setup(null, properties);\n                      result = func();\n                      test_environment.on_new_harness_properties(properties);\n\n                      if (!result || typeof result.then !== \"function\") {\n                          throw \"Non-thenable returned by function passed to `promise_setup`\";\n                      }\n                      return result;\n                  })\n            .catch(function(e)\n                   {\n                       tests.set_status(tests.status.ERROR,\n                                        String(e),\n                                        e && e.stack);\n                       tests.complete();\n                   });\n    }\n\n    /**\n     * Mark test loading as complete.\n     *\n     * Typically this function is called implicitly on page load; it's\n     * only necessary for users to call this when either the\n     * ``explicit_done`` or ``single_page`` properties have been set\n     * via the :js:func:`setup` function.\n     *\n     * For single page tests this marks the test as complete and sets its status.\n     * For other tests, this marks test loading as complete, but doesn't affect ongoing tests.\n     */\n    function done() {\n        if (tests.tests.length === 0) {\n            // `done` is invoked after handling uncaught exceptions, so if the\n            // harness status is already set, the corresponding message is more\n            // descriptive than the generic message defined here.\n            if (tests.status.status === null) {\n                tests.status.status = tests.status.ERROR;\n                tests.status.message = \"done() was called without first defining any tests\";\n            }\n\n            tests.complete();\n            return;\n        }\n        if (tests.file_is_test) {\n            // file is test files never have asynchronous cleanup logic,\n            // meaning the fully-synchronous `done` function can be used here.\n            tests.tests[0].done();\n        }\n        tests.end_wait();\n    }\n\n    /**\n     * @deprecated generate a list of tests from a function and list of arguments\n     *\n     * This is deprecated because it runs all the tests outside of the test functions\n     * and as a result any test throwing an exception will result in no tests being\n     * run. In almost all cases, you should simply call test within the loop you would\n     * use to generate the parameter list array.\n     *\n     * @param {Function} func - The function that will be called for each generated tests.\n     * @param {Any[][]} args - An array of arrays. Each nested array\n     * has the structure `[testName, ...testArgs]`. For each of these nested arrays\n     * array, a test is generated with name `testName` and test function equivalent to\n     * `func(..testArgs)`.\n     */\n    function generate_tests(func, args, properties) {\n        forEach(args, function(x, i)\n                {\n                    var name = x[0];\n                    test(function()\n                         {\n                             func.apply(this, x.slice(1));\n                         },\n                         name,\n                         Array.isArray(properties) ? properties[i] : properties);\n                });\n    }\n\n    /**\n     * @deprecated\n     *\n     * Register a function as a DOM event listener to the\n     * given object for the event bubbling phase.\n     *\n     * @param {EventTarget} object - Event target\n     * @param {string} event - Event name\n     * @param {Function} callback - Event handler.\n     */\n    function on_event(object, event, callback)\n    {\n        object.addEventListener(event, callback, false);\n    }\n\n    /**\n     * Global version of :js:func:`Test.step_timeout` for use in single page tests.\n     *\n     * @param {Function} func - Function to run after the timeout\n     * @param {number} timeout - Time in ms to wait before running the\n     * test step. The actual wait time is ``timeout`` x\n     * ``timeout_multiplier``.\n     */\n    function step_timeout(func, timeout) {\n        var outer_this = this;\n        var args = Array.prototype.slice.call(arguments, 2);\n        return setTimeout(function() {\n            func.apply(outer_this, args);\n        }, timeout * tests.timeout_multiplier);\n    }\n\n    expose(test, 'test');\n    expose(async_test, 'async_test');\n    expose(promise_test, 'promise_test');\n    expose(promise_rejects_js, 'promise_rejects_js');\n    expose(promise_rejects_dom, 'promise_rejects_dom');\n    expose(promise_rejects_exactly, 'promise_rejects_exactly');\n    expose(generate_tests, 'generate_tests');\n    expose(setup, 'setup');\n    expose(promise_setup, 'promise_setup');\n    expose(done, 'done');\n    expose(on_event, 'on_event');\n    expose(step_timeout, 'step_timeout');\n\n    /*\n     * Return a string truncated to the given length, with ... added at the end\n     * if it was longer.\n     */\n    function truncate(s, len)\n    {\n        if (s.length > len) {\n            return s.substring(0, len - 3) + \"...\";\n        }\n        return s;\n    }\n\n    /*\n     * Return true if object is probably a Node object.\n     */\n    function is_node(object)\n    {\n        // I use duck-typing instead of instanceof, because\n        // instanceof doesn't work if the node is from another window (like an\n        // iframe's contentWindow):\n        // http://www.w3.org/Bugs/Public/show_bug.cgi?id=12295\n        try {\n            var has_node_properties = (\"nodeType\" in object &&\n                                       \"nodeName\" in object &&\n                                       \"nodeValue\" in object &&\n                                       \"childNodes\" in object);\n        } catch (e) {\n            // We're probably cross-origin, which means we aren't a node\n            return false;\n        }\n\n        if (has_node_properties) {\n            try {\n                object.nodeType;\n            } catch (e) {\n                // The object is probably Node.prototype or another prototype\n                // object that inherits from it, and not a Node instance.\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    var replacements = {\n        \"0\": \"0\",\n        \"1\": \"x01\",\n        \"2\": \"x02\",\n        \"3\": \"x03\",\n        \"4\": \"x04\",\n        \"5\": \"x05\",\n        \"6\": \"x06\",\n        \"7\": \"x07\",\n        \"8\": \"b\",\n        \"9\": \"t\",\n        \"10\": \"n\",\n        \"11\": \"v\",\n        \"12\": \"f\",\n        \"13\": \"r\",\n        \"14\": \"x0e\",\n        \"15\": \"x0f\",\n        \"16\": \"x10\",\n        \"17\": \"x11\",\n        \"18\": \"x12\",\n        \"19\": \"x13\",\n        \"20\": \"x14\",\n        \"21\": \"x15\",\n        \"22\": \"x16\",\n        \"23\": \"x17\",\n        \"24\": \"x18\",\n        \"25\": \"x19\",\n        \"26\": \"x1a\",\n        \"27\": \"x1b\",\n        \"28\": \"x1c\",\n        \"29\": \"x1d\",\n        \"30\": \"x1e\",\n        \"31\": \"x1f\",\n        \"0xfffd\": \"ufffd\",\n        \"0xfffe\": \"ufffe\",\n        \"0xffff\": \"uffff\",\n    };\n\n    /**\n     * Convert a value to a nice, human-readable string\n     *\n     * When many JavaScript Object values are coerced to a String, the\n     * resulting value will be ``\"[object Object]\"``. This obscures\n     * helpful information, making the coerced value unsuitable for\n     * use in assertion messages, test names, and debugging\n     * statements. `format_value` produces more distinctive string\n     * representations of many kinds of objects, including arrays and\n     * the more important DOM Node types. It also translates String\n     * values containing control characters to include human-readable\n     * representations.\n     *\n     * @example\n     * // \"Document node with 2 children\"\n     * format_value(document);\n     * @example\n     * // \"\\\"foo\\\\uffffbar\\\"\"\n     * format_value(\"foo\\uffffbar\");\n     * @example\n     * // \"[-0, Infinity]\"\n     * format_value([-0, Infinity]);\n     * @param {Any} val - The value to convert to a string.\n     * @returns {string} - A string representation of ``val``, optimised for human readability.\n     */\n    function format_value(val, seen)\n    {\n        if (!seen) {\n            seen = [];\n        }\n        if (typeof val === \"object\" && val !== null) {\n            if (seen.indexOf(val) >= 0) {\n                return \"[...]\";\n            }\n            seen.push(val);\n        }\n        if (Array.isArray(val)) {\n            let output = \"[\";\n            if (val.beginEllipsis !== undefined) {\n                output += \"â¦, \";\n            }\n            output += val.map(function(x) {return format_value(x, seen);}).join(\", \");\n            if (val.endEllipsis !== undefined) {\n                output += \", â¦\";\n            }\n            return output + \"]\";\n        }\n\n        switch (typeof val) {\n        case \"string\":\n            val = val.replace(/\\\\/g, \"\\\\\\\\\");\n            for (var p in replacements) {\n                var replace = \"\\\\\" + replacements[p];\n                val = val.replace(RegExp(String.fromCharCode(p), \"g\"), replace);\n            }\n            return '\"' + val.replace(/\"/g, '\\\\\"') + '\"';\n        case \"boolean\":\n        case \"undefined\":\n            return String(val);\n        case \"number\":\n            // In JavaScript, -0 === 0 and String(-0) == \"0\", so we have to\n            // special-case.\n            if (val === -0 && 1/val === -Infinity) {\n                return \"-0\";\n            }\n            return String(val);\n        case \"object\":\n            if (val === null) {\n                return \"null\";\n            }\n\n            // Special-case Node objects, since those come up a lot in my tests.  I\n            // ignore namespaces.\n            if (is_node(val)) {\n                switch (val.nodeType) {\n                case Node.ELEMENT_NODE:\n                    var ret = \"<\" + val.localName;\n                    for (var i = 0; i < val.attributes.length; i++) {\n                        ret += \" \" + val.attributes[i].name + '=\"' + val.attributes[i].value + '\"';\n                    }\n                    ret += \">\" + val.innerHTML + \"</\" + val.localName + \">\";\n                    return \"Element node \" + truncate(ret, 60);\n                case Node.TEXT_NODE:\n                    return 'Text node \"' + truncate(val.data, 60) + '\"';\n                case Node.PROCESSING_INSTRUCTION_NODE:\n                    return \"ProcessingInstruction node with target \" + format_value(truncate(val.target, 60)) + \" and data \" + format_value(truncate(val.data, 60));\n                case Node.COMMENT_NODE:\n                    return \"Comment node <!--\" + truncate(val.data, 60) + \"-->\";\n                case Node.DOCUMENT_NODE:\n                    return \"Document node with \" + val.childNodes.length + (val.childNodes.length == 1 ? \" child\" : \" children\");\n                case Node.DOCUMENT_TYPE_NODE:\n                    return \"DocumentType node\";\n                case Node.DOCUMENT_FRAGMENT_NODE:\n                    return \"DocumentFragment node with \" + val.childNodes.length + (val.childNodes.length == 1 ? \" child\" : \" children\");\n                default:\n                    return \"Node object of unknown type\";\n                }\n            }\n\n        /* falls through */\n        default:\n            try {\n                return typeof val + ' \"' + truncate(String(val), 1000) + '\"';\n            } catch(e) {\n                return (\"[stringifying object threw \" + String(e) +\n                        \" with type \" + String(typeof e) + \"]\");\n            }\n        }\n    }\n    expose(format_value, \"format_value\");\n\n    /*\n     * Assertions\n     */\n\n    function expose_assert(f, name) {\n        function assert_wrapper(...args) {\n            let status = Test.statuses.TIMEOUT;\n            let stack = null;\n            try {\n                if (settings.debug) {\n                    console.debug(\"ASSERT\", name, tests.current_test && tests.current_test.name, args);\n                }\n                if (tests.output) {\n                    tests.set_assert(name, args);\n                }\n                const rv = f.apply(undefined, args);\n                status = Test.statuses.PASS;\n                return rv;\n            } catch(e) {\n                status = Test.statuses.FAIL;\n                stack = e.stack ? e.stack : null;\n                throw e;\n            } finally {\n                if (tests.output && !stack) {\n                    stack = get_stack();\n                }\n                if (tests.output) {\n                    tests.set_assert_status(status, stack);\n                }\n            }\n        }\n        expose(assert_wrapper, name);\n    }\n\n    /**\n     * Assert that ``actual`` is strictly true\n     *\n     * @param {Any} actual - Value that is asserted to be true\n     * @param {string} [description] - Description of the condition being tested\n     */\n    function assert_true(actual, description)\n    {\n        assert(actual === true, \"assert_true\", description,\n                                \"expected true got ${actual}\", {actual:actual});\n    }\n    expose_assert(assert_true, \"assert_true\");\n\n    /**\n     * Assert that ``actual`` is strictly false\n     *\n     * @param {Any} actual - Value that is asserted to be false\n     * @param {string} [description] - Description of the condition being tested\n     */\n    function assert_false(actual, description)\n    {\n        assert(actual === false, \"assert_false\", description,\n                                 \"expected false got ${actual}\", {actual:actual});\n    }\n    expose_assert(assert_false, \"assert_false\");\n\n    function same_value(x, y) {\n        if (y !== y) {\n            //NaN case\n            return x !== x;\n        }\n        if (x === 0 && y === 0) {\n            //Distinguish +0 and -0\n            return 1/x === 1/y;\n        }\n        return x === y;\n    }\n\n    /**\n     * Assert that ``actual`` is the same value as ``expected``.\n     *\n     * For objects this compares by cobject identity; for primitives\n     * this distinguishes between 0 and -0, and has correct handling\n     * of NaN.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Any} expected - Expected value.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_equals(actual, expected, description)\n    {\n         /*\n          * Test if two primitives are equal or two objects\n          * are the same object\n          */\n        if (typeof actual != typeof expected) {\n            assert(false, \"assert_equals\", description,\n                          \"expected (\" + typeof expected + \") ${expected} but got (\" + typeof actual + \") ${actual}\",\n                          {expected:expected, actual:actual});\n            return;\n        }\n        assert(same_value(actual, expected), \"assert_equals\", description,\n                                             \"expected ${expected} but got ${actual}\",\n                                             {expected:expected, actual:actual});\n    }\n    expose_assert(assert_equals, \"assert_equals\");\n\n    /**\n     * Assert that ``actual`` is not the same value as ``expected``.\n     *\n     * Comparison is as for :js:func:`assert_equals`.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Any} expected - The value ``actual`` is expected to be different to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_not_equals(actual, expected, description)\n    {\n        assert(!same_value(actual, expected), \"assert_not_equals\", description,\n                                              \"got disallowed value ${actual}\",\n                                              {actual:actual});\n    }\n    expose_assert(assert_not_equals, \"assert_not_equals\");\n\n    /**\n     * Assert that ``expected`` is an array and ``actual`` is one of the members.\n     * This is implemented using ``indexOf``, so doesn't handle NaN or Â±0 correctly.\n     *\n     * @param {Any} actual - Test value.\n     * @param {Array} expected - An array that ``actual`` is expected to\n     * be a member of.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_in_array(actual, expected, description)\n    {\n        assert(expected.indexOf(actual) != -1, \"assert_in_array\", description,\n                                               \"value ${actual} not in array ${expected}\",\n                                               {actual:actual, expected:expected});\n    }\n    expose_assert(assert_in_array, \"assert_in_array\");\n\n    // This function was deprecated in July of 2015.\n    // See https://github.com/web-platform-tests/wpt/issues/2033\n    /**\n     * @deprecated\n     * Recursively compare two objects for equality.\n     *\n     * See `Issue 2033\n     * <https://github.com/web-platform-tests/wpt/issues/2033>`_ for\n     * more information.\n     *\n     * @param {Object} actual - Test value.\n     * @param {Object} expected - Expected value.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_object_equals(actual, expected, description)\n    {\n         assert(typeof actual === \"object\" && actual !== null, \"assert_object_equals\", description,\n                                                               \"value is ${actual}, expected object\",\n                                                               {actual: actual});\n         //This needs to be improved a great deal\n         function check_equal(actual, expected, stack)\n         {\n             stack.push(actual);\n\n             var p;\n             for (p in actual) {\n                 assert(expected.hasOwnProperty(p), \"assert_object_equals\", description,\n                                                    \"unexpected property ${p}\", {p:p});\n\n                 if (typeof actual[p] === \"object\" && actual[p] !== null) {\n                     if (stack.indexOf(actual[p]) === -1) {\n                         check_equal(actual[p], expected[p], stack);\n                     }\n                 } else {\n                     assert(same_value(actual[p], expected[p]), \"assert_object_equals\", description,\n                                                       \"property ${p} expected ${expected} got ${actual}\",\n                                                       {p:p, expected:expected[p], actual:actual[p]});\n                 }\n             }\n             for (p in expected) {\n                 assert(actual.hasOwnProperty(p),\n                        \"assert_object_equals\", description,\n                        \"expected property ${p} missing\", {p:p});\n             }\n             stack.pop();\n         }\n         check_equal(actual, expected, []);\n    }\n    expose_assert(assert_object_equals, \"assert_object_equals\");\n\n    /**\n     * Assert that ``actual`` and ``expected`` are both arrays, and that the array properties of\n     * ``actual`` and ``expected`` are all the same value (as for :js:func:`assert_equals`).\n     *\n     * @param {Array} actual - Test array.\n     * @param {Array} expected - Array that is expected to contain the same values as ``actual``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_array_equals(actual, expected, description)\n    {\n        const max_array_length = 20;\n        function shorten_array(arr, offset = 0) {\n            // Make \", â¦\" only show up when it would likely reduce the length, not accounting for\n            // fonts.\n            if (arr.length < max_array_length + 2) {\n                return arr;\n            }\n            // By default we want half the elements after the offset and half before\n            // But if that takes us past the end of the array, we have more before, and\n            // if it takes us before the start we have more after.\n            const length_after_offset = Math.floor(max_array_length / 2);\n            let upper_bound = Math.min(length_after_offset + offset, arr.length);\n            const lower_bound = Math.max(upper_bound - max_array_length, 0);\n\n            if (lower_bound === 0) {\n                upper_bound = max_array_length;\n            }\n\n            const output = arr.slice(lower_bound, upper_bound);\n            if (lower_bound > 0) {\n                output.beginEllipsis = true;\n            }\n            if (upper_bound < arr.length) {\n                output.endEllipsis = true;\n            }\n            return output;\n        }\n\n        assert(typeof actual === \"object\" && actual !== null && \"length\" in actual,\n               \"assert_array_equals\", description,\n               \"value is ${actual}, expected array\",\n               {actual:actual});\n        assert(actual.length === expected.length,\n               \"assert_array_equals\", description,\n               \"lengths differ, expected array ${expected} length ${expectedLength}, got ${actual} length ${actualLength}\",\n               {expected:shorten_array(expected, expected.length - 1), expectedLength:expected.length,\n                actual:shorten_array(actual, actual.length - 1), actualLength:actual.length\n               });\n\n        for (var i = 0; i < actual.length; i++) {\n            assert(actual.hasOwnProperty(i) === expected.hasOwnProperty(i),\n                   \"assert_array_equals\", description,\n                   \"expected property ${i} to be ${expected} but was ${actual} (expected array ${arrayExpected} got ${arrayActual})\",\n                   {i:i, expected:expected.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    actual:actual.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    arrayExpected:shorten_array(expected, i), arrayActual:shorten_array(actual, i)});\n            assert(same_value(expected[i], actual[i]),\n                   \"assert_array_equals\", description,\n                   \"expected property ${i} to be ${expected} but got ${actual} (expected array ${arrayExpected} got ${arrayActual})\",\n                   {i:i, expected:expected[i], actual:actual[i],\n                    arrayExpected:shorten_array(expected, i), arrayActual:shorten_array(actual, i)});\n        }\n    }\n    expose_assert(assert_array_equals, \"assert_array_equals\");\n\n    /**\n     * Assert that each array property in ``actual`` is a number within\n     * Â± `epsilon` of the corresponding property in `expected`.\n     *\n     * @param {Array} actual - Array of test values.\n     * @param {Array} expected - Array of values expected to be close to the values in ``actual``.\n     * @param {number} epsilon - Magnitude of allowed difference\n     * between each value in ``actual`` and ``expected``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_array_approx_equals(actual, expected, epsilon, description)\n    {\n        /*\n         * Test if two primitive arrays are equal within +/- epsilon\n         */\n        assert(actual.length === expected.length,\n               \"assert_array_approx_equals\", description,\n               \"lengths differ, expected ${expected} got ${actual}\",\n               {expected:expected.length, actual:actual.length});\n\n        for (var i = 0; i < actual.length; i++) {\n            assert(actual.hasOwnProperty(i) === expected.hasOwnProperty(i),\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, property expected to be ${expected} but was ${actual}\",\n                   {i:i, expected:expected.hasOwnProperty(i) ? \"present\" : \"missing\",\n                    actual:actual.hasOwnProperty(i) ? \"present\" : \"missing\"});\n            assert(typeof actual[i] === \"number\",\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, expected a number but got a ${type_actual}\",\n                   {i:i, type_actual:typeof actual[i]});\n            assert(Math.abs(actual[i] - expected[i]) <= epsilon,\n                   \"assert_array_approx_equals\", description,\n                   \"property ${i}, expected ${expected} +/- ${epsilon}, expected ${expected} but got ${actual}\",\n                   {i:i, expected:expected[i], actual:actual[i], epsilon:epsilon});\n        }\n    }\n    expose_assert(assert_array_approx_equals, \"assert_array_approx_equals\");\n\n    /**\n     * Assert that ``actual`` is within Â± ``epsilon`` of ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Value number is expected to be close to.\n     * @param {number} epsilon - Magnitude of allowed difference between ``actual`` and ``expected``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_approx_equals(actual, expected, epsilon, description)\n    {\n        /*\n         * Test if two primitive numbers are equal within +/- epsilon\n         */\n        assert(typeof actual === \"number\",\n               \"assert_approx_equals\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        // The epsilon math below does not place nice with NaN and Infinity\n        // But in this case Infinity = Infinity and NaN = NaN\n        if (isFinite(actual) || isFinite(expected)) {\n            assert(Math.abs(actual - expected) <= epsilon,\n                   \"assert_approx_equals\", description,\n                   \"expected ${expected} +/- ${epsilon} but got ${actual}\",\n                   {expected:expected, actual:actual, epsilon:epsilon});\n        } else {\n            assert_equals(actual, expected);\n        }\n    }\n    expose_assert(assert_approx_equals, \"assert_approx_equals\");\n\n    /**\n     * Assert that ``actual`` is a number less than ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be less than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_less_than(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is less than another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_less_than\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual < expected,\n               \"assert_less_than\", description,\n               \"expected a number less than ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_less_than, \"assert_less_than\");\n\n    /**\n     * Assert that ``actual`` is a number greater than ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be greater than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_greater_than(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is greater than another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_greater_than\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual > expected,\n               \"assert_greater_than\", description,\n               \"expected a number greater than ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_greater_than, \"assert_greater_than\");\n\n    /**\n     * Assert that ``actual`` is a number greater than ``lower`` and less\n     * than ``upper`` but not equal to either.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} lower - Number that ``actual`` must be greater than.\n     * @param {number} upper - Number that ``actual`` must be less than.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_between_exclusive(actual, lower, upper, description)\n    {\n        /*\n         * Test if a primitive number is between two others\n         */\n        assert(typeof actual === \"number\",\n               \"assert_between_exclusive\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual > lower && actual < upper,\n               \"assert_between_exclusive\", description,\n               \"expected a number greater than ${lower} \" +\n               \"and less than ${upper} but got ${actual}\",\n               {lower:lower, upper:upper, actual:actual});\n    }\n    expose_assert(assert_between_exclusive, \"assert_between_exclusive\");\n\n    /**\n     * Assert that ``actual`` is a number less than or equal to ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be less\n     * than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_less_than_equal(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is less than or equal to another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_less_than_equal\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual <= expected,\n               \"assert_less_than_equal\", description,\n               \"expected a number less than or equal to ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_less_than_equal, \"assert_less_than_equal\");\n\n    /**\n     * Assert that ``actual`` is a number greater than or equal to ``expected``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} expected - Number that ``actual`` must be greater\n     * than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_greater_than_equal(actual, expected, description)\n    {\n        /*\n         * Test if a primitive number is greater than or equal to another\n         */\n        assert(typeof actual === \"number\",\n               \"assert_greater_than_equal\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual >= expected,\n               \"assert_greater_than_equal\", description,\n               \"expected a number greater than or equal to ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_greater_than_equal, \"assert_greater_than_equal\");\n\n    /**\n     * Assert that ``actual`` is a number greater than or equal to ``lower`` and less\n     * than or equal to ``upper``.\n     *\n     * @param {number} actual - Test value.\n     * @param {number} lower - Number that ``actual`` must be greater than or equal to.\n     * @param {number} upper - Number that ``actual`` must be less than or equal to.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_between_inclusive(actual, lower, upper, description)\n    {\n        /*\n         * Test if a primitive number is between to two others or equal to either of them\n         */\n        assert(typeof actual === \"number\",\n               \"assert_between_inclusive\", description,\n               \"expected a number but got a ${type_actual}\",\n               {type_actual:typeof actual});\n\n        assert(actual >= lower && actual <= upper,\n               \"assert_between_inclusive\", description,\n               \"expected a number greater than or equal to ${lower} \" +\n               \"and less than or equal to ${upper} but got ${actual}\",\n               {lower:lower, upper:upper, actual:actual});\n    }\n    expose_assert(assert_between_inclusive, \"assert_between_inclusive\");\n\n    /**\n     * Assert that ``actual`` matches the RegExp ``expected``.\n     *\n     * @param {String} actual - Test string.\n     * @param {RegExp} expected - RegExp ``actual`` must match.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_regexp_match(actual, expected, description) {\n        /*\n         * Test if a string (actual) matches a regexp (expected)\n         */\n        assert(expected.test(actual),\n               \"assert_regexp_match\", description,\n               \"expected ${expected} but got ${actual}\",\n               {expected:expected, actual:actual});\n    }\n    expose_assert(assert_regexp_match, \"assert_regexp_match\");\n\n    /**\n     * Assert that the class string of ``object`` as returned in\n     * ``Object.prototype.toString`` is equal to ``class_name``.\n     *\n     * @param {Object} object - Object to stringify.\n     * @param {string} class_string - Expected class string for ``object``.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_class_string(object, class_string, description) {\n        var actual = {}.toString.call(object);\n        var expected = \"[object \" + class_string + \"]\";\n        assert(same_value(actual, expected), \"assert_class_string\", description,\n                                             \"expected ${expected} but got ${actual}\",\n                                             {expected:expected, actual:actual});\n    }\n    expose_assert(assert_class_string, \"assert_class_string\");\n\n    /**\n     * Assert that ``object`` has an own property with name ``property_name``.\n     *\n     * @param {Object} object - Object that should have the given property.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_own_property(object, property_name, description) {\n        assert(object.hasOwnProperty(property_name),\n               \"assert_own_property\", description,\n               \"expected property ${p} missing\", {p:property_name});\n    }\n    expose_assert(assert_own_property, \"assert_own_property\");\n\n    /**\n     * Assert that ``object`` does not have an own property with name ``property_name``.\n     *\n     * @param {Object} object - Object that should not have the given property.\n     * @param {string} property_name - Property name to test.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_not_own_property(object, property_name, description) {\n        assert(!object.hasOwnProperty(property_name),\n               \"assert_not_own_property\", description,\n               \"unexpected property ${p} is found on object\", {p:property_name});\n    }\n    expose_assert(assert_not_own_property, \"assert_not_own_property\");\n\n    function _assert_inherits(name) {\n        return function (object, property_name, description)\n        {\n            assert((typeof object === \"object\" && object !== null) ||\n                   typeof object === \"function\" ||\n                   // Or has [[IsHTMLDDA]] slot\n                   String(object) === \"[object HTMLAllCollection]\",\n                   name, description,\n                   \"provided value is not an object\");\n\n            assert(\"hasOwnProperty\" in object,\n                   name, description,\n                   \"provided value is an object but has no hasOwnProperty method\");\n\n            assert(!object.hasOwnProperty(property_name),\n                   name, description,\n                   \"property ${p} found on object expected in prototype chain\",\n                   {p:property_name});\n\n            assert(property_name in object,\n                   name, description,\n                   \"property ${p} not found in prototype chain\",\n                   {p:property_name});\n        };\n    }\n\n    /**\n     * Assert that ``object`` does not have an own property with name\n     * ``property_name``, but inherits one through the prototype chain.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_inherits(object, property_name, description) {\n        return _assert_inherits(\"assert_inherits\")(object, property_name, description);\n    }\n    expose_assert(assert_inherits, \"assert_inherits\");\n\n    /**\n     * Alias for :js:func:`insert_inherits`.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_idl_attribute(object, property_name, description) {\n        return _assert_inherits(\"assert_idl_attribute\")(object, property_name, description);\n    }\n    expose_assert(assert_idl_attribute, \"assert_idl_attribute\");\n\n\n    /**\n     * Assert that ``object`` has a property named ``property_name`` and that the property is readonly.\n     *\n     * Note: The implementation tries to update the named property, so\n     * any side effects of updating will be triggered. Users are\n     * encouraged to instead inspect the property descriptor of ``property_name`` on ``object``.\n     *\n     * @param {Object} object - Object that should have the given property in its prototype chain.\n     * @param {string} property_name - Expected property name.\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_readonly(object, property_name, description)\n    {\n         var initial_value = object[property_name];\n         try {\n             //Note that this can have side effects in the case where\n             //the property has PutForwards\n             object[property_name] = initial_value + \"a\"; //XXX use some other value here?\n             assert(same_value(object[property_name], initial_value),\n                    \"assert_readonly\", description,\n                    \"changing property ${p} succeeded\",\n                    {p:property_name});\n         } finally {\n             object[property_name] = initial_value;\n         }\n    }\n    expose_assert(assert_readonly, \"assert_readonly\");\n\n    /**\n     * Assert a JS Error with the expected constructor is thrown.\n     *\n     * @param {object} constructor The expected exception constructor.\n     * @param {Function} func Function which should throw.\n     * @param {string} [description] Error description for the case that the error is not thrown.\n     */\n    function assert_throws_js(constructor, func, description)\n    {\n        assert_throws_js_impl(constructor, func, description,\n                              \"assert_throws_js\");\n    }\n    expose_assert(assert_throws_js, \"assert_throws_js\");\n\n    /**\n     * Like assert_throws_js but allows specifying the assertion type\n     * (assert_throws_js or promise_rejects_js, in practice).\n     */\n    function assert_throws_js_impl(constructor, func, description,\n                                   assertion_type)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            // Basic sanity-checks on the thrown exception.\n            assert(typeof e === \"object\",\n                   assertion_type, description,\n                   \"${func} threw ${e} with type ${type}, not an object\",\n                   {func:func, e:e, type:typeof e});\n\n            assert(e !== null,\n                   assertion_type, description,\n                   \"${func} threw null, not an object\",\n                   {func:func});\n\n            // Basic sanity-check on the passed-in constructor\n            assert(typeof constructor == \"function\",\n                   assertion_type, description,\n                   \"${constructor} is not a constructor\",\n                   {constructor:constructor});\n            var obj = constructor;\n            while (obj) {\n                if (typeof obj === \"function\" &&\n                    obj.name === \"Error\") {\n                    break;\n                }\n                obj = Object.getPrototypeOf(obj);\n            }\n            assert(obj != null,\n                   assertion_type, description,\n                   \"${constructor} is not an Error subtype\",\n                   {constructor:constructor});\n\n            // And checking that our exception is reasonable\n            assert(e.constructor === constructor &&\n                   e.name === constructor.name,\n                   assertion_type, description,\n                   \"${func} threw ${actual} (${actual_name}) expected instance of ${expected} (${expected_name})\",\n                   {func:func, actual:e, actual_name:e.name,\n                    expected:constructor,\n                    expected_name:constructor.name});\n        }\n    }\n\n    // TODO: Figure out how to document the overloads better.\n    // sphinx-js doesn't seem to handle @variation correctly,\n    // and only expects a single JSDoc entry per function.\n    /**\n     * Assert a DOMException with the expected type is thrown.\n     *\n     * There are two ways of calling assert_throws_dom:\n     *\n     * 1) If the DOMException is expected to come from the current global, the\n     * second argument should be the function expected to throw and a third,\n     * optional, argument is the assertion description.\n     *\n     * 2) If the DOMException is expected to come from some other global, the\n     * second argument should be the DOMException constructor from that global,\n     * the third argument the function expected to throw, and the fourth, optional,\n     * argument the assertion description.\n     *\n     * @param {number|string} type - The expected exception name or\n     * code.  See the `table of names and codes\n     * <https://webidl.spec.whatwg.org/#dfn-error-names-table>`_. If a\n     * number is passed it should be one of the numeric code values in\n     * that table (e.g. 3, 4, etc).  If a string is passed it can\n     * either be an exception name (e.g. \"HierarchyRequestError\",\n     * \"WrongDocumentError\") or the name of the corresponding error\n     * code (e.g. \"``HIERARCHY_REQUEST_ERR``\", \"``WRONG_DOCUMENT_ERR``\").\n     * @param {Function} descriptionOrFunc - The function expected to\n     * throw (if the exception comes from another global), or the\n     * optional description of the condition being tested (if the\n     * exception comes from the current global).\n     * @param {string} [description] - Description of the condition\n     * being tested (if the exception comes from another global).\n     *\n     */\n    function assert_throws_dom(type, funcOrConstructor, descriptionOrFunc, maybeDescription)\n    {\n        let constructor, func, description;\n        if (funcOrConstructor.name === \"DOMException\") {\n            constructor = funcOrConstructor;\n            func = descriptionOrFunc;\n            description = maybeDescription;\n        } else {\n            constructor = self.DOMException;\n            func = funcOrConstructor;\n            description = descriptionOrFunc;\n            assert(maybeDescription === undefined,\n                   \"Too many args pased to no-constructor version of assert_throws_dom\");\n        }\n        assert_throws_dom_impl(type, func, description, \"assert_throws_dom\", constructor)\n    }\n    expose_assert(assert_throws_dom, \"assert_throws_dom\");\n\n    /**\n     * Similar to assert_throws_dom but allows specifying the assertion type\n     * (assert_throws_dom or promise_rejects_dom, in practice).  The\n     * \"constructor\" argument must be the DOMException constructor from the\n     * global we expect the exception to come from.\n     */\n    function assert_throws_dom_impl(type, func, description, assertion_type, constructor)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            // Basic sanity-checks on the thrown exception.\n            assert(typeof e === \"object\",\n                   assertion_type, description,\n                   \"${func} threw ${e} with type ${type}, not an object\",\n                   {func:func, e:e, type:typeof e});\n\n            assert(e !== null,\n                   assertion_type, description,\n                   \"${func} threw null, not an object\",\n                   {func:func});\n\n            // Sanity-check our type\n            assert(typeof type == \"number\" ||\n                   typeof type == \"string\",\n                   assertion_type, description,\n                   \"${type} is not a number or string\",\n                   {type:type});\n\n            var codename_name_map = {\n                INDEX_SIZE_ERR: 'IndexSizeError',\n                HIERARCHY_REQUEST_ERR: 'HierarchyRequestError',\n                WRONG_DOCUMENT_ERR: 'WrongDocumentError',\n                INVALID_CHARACTER_ERR: 'InvalidCharacterError',\n                NO_MODIFICATION_ALLOWED_ERR: 'NoModificationAllowedError',\n                NOT_FOUND_ERR: 'NotFoundError',\n                NOT_SUPPORTED_ERR: 'NotSupportedError',\n                INUSE_ATTRIBUTE_ERR: 'InUseAttributeError',\n                INVALID_STATE_ERR: 'InvalidStateError',\n                SYNTAX_ERR: 'SyntaxError',\n                INVALID_MODIFICATION_ERR: 'InvalidModificationError',\n                NAMESPACE_ERR: 'NamespaceError',\n                INVALID_ACCESS_ERR: 'InvalidAccessError',\n                TYPE_MISMATCH_ERR: 'TypeMismatchError',\n                SECURITY_ERR: 'SecurityError',\n                NETWORK_ERR: 'NetworkError',\n                ABORT_ERR: 'AbortError',\n                URL_MISMATCH_ERR: 'URLMismatchError',\n                QUOTA_EXCEEDED_ERR: 'QuotaExceededError',\n                TIMEOUT_ERR: 'TimeoutError',\n                INVALID_NODE_TYPE_ERR: 'InvalidNodeTypeError',\n                DATA_CLONE_ERR: 'DataCloneError'\n            };\n\n            var name_code_map = {\n                IndexSizeError: 1,\n                HierarchyRequestError: 3,\n                WrongDocumentError: 4,\n                InvalidCharacterError: 5,\n                NoModificationAllowedError: 7,\n                NotFoundError: 8,\n                NotSupportedError: 9,\n                InUseAttributeError: 10,\n                InvalidStateError: 11,\n                SyntaxError: 12,\n                InvalidModificationError: 13,\n                NamespaceError: 14,\n                InvalidAccessError: 15,\n                TypeMismatchError: 17,\n                SecurityError: 18,\n                NetworkError: 19,\n                AbortError: 20,\n                URLMismatchError: 21,\n                QuotaExceededError: 22,\n                TimeoutError: 23,\n                InvalidNodeTypeError: 24,\n                DataCloneError: 25,\n\n                EncodingError: 0,\n                NotReadableError: 0,\n                UnknownError: 0,\n                ConstraintError: 0,\n                DataError: 0,\n                TransactionInactiveError: 0,\n                ReadOnlyError: 0,\n                VersionError: 0,\n                OperationError: 0,\n                NotAllowedError: 0,\n                OptOutError: 0\n            };\n\n            var code_name_map = {};\n            for (var key in name_code_map) {\n                if (name_code_map[key] > 0) {\n                    code_name_map[name_code_map[key]] = key;\n                }\n            }\n\n            var required_props = {};\n            var name;\n\n            if (typeof type === \"number\") {\n                if (type === 0) {\n                    throw new AssertionError('Test bug: ambiguous DOMException code 0 passed to assert_throws_dom()');\n                } else if (!(type in code_name_map)) {\n                    throw new AssertionError('Test bug: unrecognized DOMException code \"' + type + '\" passed to assert_throws_dom()');\n                }\n                name = code_name_map[type];\n                required_props.code = type;\n            } else if (typeof type === \"string\") {\n                name = type in codename_name_map ? codename_name_map[type] : type;\n                if (!(name in name_code_map)) {\n                    throw new AssertionError('Test bug: unrecognized DOMException code name or name \"' + type + '\" passed to assert_throws_dom()');\n                }\n\n                required_props.code = name_code_map[name];\n            }\n\n            if (required_props.code === 0 ||\n               (\"name\" in e &&\n                e.name !== e.name.toUpperCase() &&\n                e.name !== \"DOMException\")) {\n                // New style exception: also test the name property.\n                required_props.name = name;\n            }\n\n            for (var prop in required_props) {\n                assert(prop in e && e[prop] == required_props[prop],\n                       assertion_type, description,\n                       \"${func} threw ${e} that is not a DOMException \" + type + \": property ${prop} is equal to ${actual}, expected ${expected}\",\n                       {func:func, e:e, prop:prop, actual:e[prop], expected:required_props[prop]});\n            }\n\n            // Check that the exception is from the right global.  This check is last\n            // so more specific, and more informative, checks on the properties can\n            // happen in case a totally incorrect exception is thrown.\n            assert(e.constructor === constructor,\n                   assertion_type, description,\n                   \"${func} threw an exception from the wrong global\",\n                   {func});\n\n        }\n    }\n\n    /**\n     * Assert the provided value is thrown.\n     *\n     * @param {value} exception The expected exception.\n     * @param {Function} func Function which should throw.\n     * @param {string} [description] Error description for the case that the error is not thrown.\n     */\n    function assert_throws_exactly(exception, func, description)\n    {\n        assert_throws_exactly_impl(exception, func, description,\n                                   \"assert_throws_exactly\");\n    }\n    expose_assert(assert_throws_exactly, \"assert_throws_exactly\");\n\n    /**\n     * Like assert_throws_exactly but allows specifying the assertion type\n     * (assert_throws_exactly or promise_rejects_exactly, in practice).\n     */\n    function assert_throws_exactly_impl(exception, func, description,\n                                        assertion_type)\n    {\n        try {\n            func.call(this);\n            assert(false, assertion_type, description,\n                   \"${func} did not throw\", {func:func});\n        } catch (e) {\n            if (e instanceof AssertionError) {\n                throw e;\n            }\n\n            assert(same_value(e, exception), assertion_type, description,\n                   \"${func} threw ${e} but we expected it to throw ${exception}\",\n                   {func:func, e:e, exception:exception});\n        }\n    }\n\n    /**\n     * Asserts if called. Used to ensure that a specific codepath is\n     * not taken e.g. that an error event isn't fired.\n     *\n     * @param {string} [description] - Description of the condition being tested.\n     */\n    function assert_unreached(description) {\n         assert(false, \"assert_unreached\", description,\n                \"Reached unreachable code\");\n    }\n    expose_assert(assert_unreached, \"assert_unreached\");\n\n    /**\n     * @callback AssertFunc\n     * @param {Any} actual\n     * @param {Any} expected\n     * @param {Any[]} args\n     */\n\n    /**\n     * Asserts that ``actual`` matches at least one value of ``expected``\n     * according to a comparison defined by ``assert_func``.\n     *\n     * Note that tests with multiple allowed pass conditions are bad\n     * practice unless the spec specifically allows multiple\n     * behaviours. Test authors should not use this method simply to\n     * hide UA bugs.\n     *\n     * @param {AssertFunc} assert_func - Function to compare actual\n     * and expected. It must throw when the comparison fails and\n     * return when the comparison passes.\n     * @param {Any} actual - Test value.\n     * @param {Array} expected_array - Array of possible expected values.\n     * @param {Any[]} args - Additional arguments to pass to ``assert_func``.\n     */\n    function assert_any(assert_func, actual, expected_array, ...args)\n    {\n        var errors = [];\n        var passed = false;\n        forEach(expected_array,\n                function(expected)\n                {\n                    try {\n                        assert_func.apply(this, [actual, expected].concat(args));\n                        passed = true;\n                    } catch (e) {\n                        errors.push(e.message);\n                    }\n                });\n        if (!passed) {\n            throw new AssertionError(errors.join(\"\\n\\n\"));\n        }\n    }\n    // FIXME: assert_any cannot use expose_assert, because assert_wrapper does\n    // not support nested assert calls (e.g. to assert_func). We need to\n    // support bypassing assert_wrapper for the inner asserts here.\n    expose(assert_any, \"assert_any\");\n\n    /**\n     * Assert that a feature is implemented, based on a 'truthy' condition.\n     *\n     * This function should be used to early-exit from tests in which there is\n     * no point continuing without support for a non-optional spec or spec\n     * feature. For example:\n     *\n     *     assert_implements(window.Foo, 'Foo is not supported');\n     *\n     * @param {object} condition The truthy value to test\n     * @param {string} [description] Error description for the case that the condition is not truthy.\n     */\n    function assert_implements(condition, description) {\n        assert(!!condition, \"assert_implements\", description);\n    }\n    expose_assert(assert_implements, \"assert_implements\")\n\n    /**\n     * Assert that an optional feature is implemented, based on a 'truthy' condition.\n     *\n     * This function should be used to early-exit from tests in which there is\n     * no point continuing without support for an explicitly optional spec or\n     * spec feature. For example:\n     *\n     *     assert_implements_optional(video.canPlayType(\"video/webm\"),\n     *                                \"webm video playback not supported\");\n     *\n     * @param {object} condition The truthy value to test\n     * @param {string} [description] Error description for the case that the condition is not truthy.\n     */\n    function assert_implements_optional(condition, description) {\n        if (!condition) {\n            throw new OptionalFeatureUnsupportedError(description);\n        }\n    }\n    expose_assert(assert_implements_optional, \"assert_implements_optional\");\n\n    /**\n     * @class\n     *\n     * A single subtest. A Test is not constructed directly but via the\n     * :js:func:`test`, :js:func:`async_test` or :js:func:`promise_test` functions.\n     *\n     * @param {string} name - This must be unique in a given file and must be\n     * invariant between runs.\n     *\n     */\n    function Test(name, properties)\n    {\n        if (tests.file_is_test && tests.tests.length) {\n            throw new Error(\"Tried to create a test with file_is_test\");\n        }\n        /** The test name. */\n        this.name = name;\n\n        this.phase = (tests.is_aborted || tests.phase === tests.phases.COMPLETE) ?\n            this.phases.COMPLETE : this.phases.INITIAL;\n\n        /** The test status code.*/\n        this.status = this.NOTRUN;\n        this.timeout_id = null;\n        this.index = null;\n\n        this.properties = properties || {};\n        this.timeout_length = settings.test_timeout;\n        if (this.timeout_length !== null) {\n            this.timeout_length *= tests.timeout_multiplier;\n        }\n\n        /** A message indicating the reason for test failure. */\n        this.message = null;\n        /** Stack trace in case of failure. */\n        this.stack = null;\n\n        this.steps = [];\n        this._is_promise_test = false;\n\n        this.cleanup_callbacks = [];\n        this._user_defined_cleanup_count = 0;\n        this._done_callbacks = [];\n\n        if (typeof AbortController === \"function\") {\n            this._abortController = new AbortController();\n        }\n\n        // Tests declared following harness completion are likely an indication\n        // of a programming error, but they cannot be reported\n        // deterministically.\n        if (tests.phase === tests.phases.COMPLETE) {\n            return;\n        }\n\n        tests.push(this);\n    }\n\n    /**\n     * Enum of possible test statuses.\n     *\n     * :values:\n     *   - ``PASS``\n     *   - ``FAIL``\n     *   - ``TIMEOUT``\n     *   - ``NOTRUN``\n     *   - ``PRECONDITION_FAILED``\n     */\n    Test.statuses = {\n        PASS:0,\n        FAIL:1,\n        TIMEOUT:2,\n        NOTRUN:3,\n        PRECONDITION_FAILED:4\n    };\n\n    Test.prototype = merge({}, Test.statuses);\n\n    Test.prototype.phases = {\n        INITIAL:0,\n        STARTED:1,\n        HAS_RESULT:2,\n        CLEANING:3,\n        COMPLETE:4\n    };\n\n    Test.prototype.status_formats = {\n        0: \"Pass\",\n        1: \"Fail\",\n        2: \"Timeout\",\n        3: \"Not Run\",\n        4: \"Optional Feature Unsupported\",\n    }\n\n    Test.prototype.format_status = function() {\n        return this.status_formats[this.status];\n    }\n\n    Test.prototype.structured_clone = function()\n    {\n        if (!this._structured_clone) {\n            var msg = this.message;\n            msg = msg ? String(msg) : msg;\n            this._structured_clone = merge({\n                name:String(this.name),\n                properties:merge({}, this.properties),\n                phases:merge({}, this.phases)\n            }, Test.statuses);\n        }\n        this._structured_clone.status = this.status;\n        this._structured_clone.message = this.message;\n        this._structured_clone.stack = this.stack;\n        this._structured_clone.index = this.index;\n        this._structured_clone.phase = this.phase;\n        return this._structured_clone;\n    };\n\n    /**\n     * Run a single step of an ongoing test.\n     *\n     * @param {string} func - Callback function to run as a step. If\n     * this throws an :js:func:`AssertionError`, or any other\n     * exception, the :js:class:`Test` status is set to ``FAIL``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling ``func``. Defaults to the  :js:class:`Test` object.\n     */\n    Test.prototype.step = function(func, this_obj)\n    {\n        if (this.phase > this.phases.STARTED) {\n            return;\n        }\n\n        if (this.phase !== this.phases.STARTED) {\n            console.log(`[${Date.now()}] prototype.step START`)\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"START\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': this.name}, ts: Date.now()}}))\n            console.log(\"LOG\", window)\n        }\n\n        if (settings.debug && this.phase !== this.phases.STARTED) {\n            console.log(\"TEST START\", this.name);\n        }\n        this.phase = this.phases.STARTED;\n        //If we don't get a result before the harness times out that will be a test timeout\n        this.set_status(this.TIMEOUT, \"Test timed out\");\n\n        tests.started = true;\n        tests.current_test = this;\n        tests.notify_test_state(this);\n\n        if (this.timeout_id === null) {\n            this.set_timeout();\n        }\n\n        this.steps.push(func);\n\n        if (arguments.length === 1) {\n            this_obj = this;\n        }\n\n        if (settings.debug) {\n            console.debug(\"TEST STEP\", this.name);\n        }\n\n        try {\n            return func.apply(this_obj, Array.prototype.slice.call(arguments, 2));\n        } catch (e) {\n            if (this.phase >= this.phases.HAS_RESULT) {\n                return;\n            }\n            var status = e instanceof OptionalFeatureUnsupportedError ? this.PRECONDITION_FAILED : this.FAIL;\n            var message = String((typeof e === \"object\" && e !== null) ? e.message : e);\n            var stack = e.stack ? e.stack : null;\n\n            this.set_status(status, message, stack);\n            this.phase = this.phases.HAS_RESULT;\n            this.done();\n        } finally {\n            this.current_test = null;\n        }\n    };\n\n    /**\n     * Wrap a function so that it runs as a step of the current test.\n     *\n     * This allows creating a callback function that will run as a\n     * test step.\n     *\n     * @example\n     * let t = async_test(\"Example\");\n     * onload = t.step_func(e => {\n     *   assert_equals(e.name, \"load\");\n     *   // Mark the test as complete.\n     *   t.done();\n     * })\n     *\n     * @param {string} func - Function to run as a step. If this\n     * throws an :js:func:`AssertionError`, or any other exception,\n     * the :js:class:`Test` status is set to ``FAIL``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling ``func``. Defaults to the :js:class:`Test` object.\n     */\n    Test.prototype.step_func = function(func, this_obj)\n    {\n        var test_this = this;\n\n        if (arguments.length === 1) {\n            this_obj = test_this;\n        }\n\n        return function()\n        {\n            // console.log(\"ARGS\", arguments[0])Vjj\n            // console.log(\"ARGS2\", arguments)\n            // console.log(\"ARGS\", func.toString())\n            \n            var msg = {'isSecure': window.isSecureContext ,'orig': document.url, 'frame': frameElement, 'type': `Step`, 'args': [func.toString(), \"RESPONSE PLACEHOLDER\"]}\n            window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"EVENT\", content: msg, ts: Date.now()}}))\n\n            return test_this.step.apply(test_this, [func, this_obj].concat(\n                Array.prototype.slice.call(arguments)));\n        };\n    };\n\n    /**\n     * Wrap a function so that it runs as a step of the current test,\n     * and automatically marks the test as complete if the function\n     * returns without error.\n     *\n     * @param {string} func - Function to run as a step. If this\n     * throws an :js:func:`AssertionError`, or any other exception,\n     * the :js:class:`Test` status is set to ``FAIL``. If it returns\n     * without error the status is set to ``PASS``.\n     * @param {Object} [this_obj] - The object to use as the this\n     * value when calling `func`. Defaults to the :js:class:`Test` object.\n     */\n    Test.prototype.step_func_done = function(func, this_obj)\n    {\n        var test_this = this;\n\n        if (arguments.length === 1) {\n            this_obj = test_this;\n        }\n\n        return function()\n        {\n            if (func) {\n                test_this.step.apply(test_this, [func, this_obj].concat(\n                    Array.prototype.slice.call(arguments)));\n            }\n            test_this.done();\n        };\n    };\n\n    /**\n     * Return a function that automatically sets the current test to\n     * ``FAIL`` if it's called.\n     *\n     * @param {string} [description] - Error message to add to assert\n     * in case of failure.\n     *\n     */\n    Test.prototype.unreached_func = function(description)\n    {\n        return this.step_func(function() {\n            assert_unreached(description);\n        });\n    };\n\n    /**\n     * Run a function as a step of the test after a given timeout.\n     *\n     * This multiplies the timeout by the global timeout multiplier to\n     * account for the expected execution speed of the current test\n     * environment. For example ``test.step_timeout(f, 2000)`` with a\n     * timeout multiplier of 2 will wait for 4000ms before calling ``f``.\n     *\n     * In general it's encouraged to use :js:func:`Test.step_wait` or\n     * :js:func:`step_wait_func` in preference to this function where possible,\n     * as they provide better test performance.\n     *\n     * @param {Function} func - Function to run as a test\n     * step.\n     * @param {number} timeout - Time in ms to wait before running the\n     * test step. The actual wait time is ``timeout`` x\n     * ``timeout_multiplier``.\n     *\n     */\n    Test.prototype.step_timeout = function(func, timeout) {\n        var test_this = this;\n        var args = Array.prototype.slice.call(arguments, 2);\n        return setTimeout(this.step_func(function() {\n            return func.apply(test_this, args);\n        }), timeout * tests.timeout_multiplier);\n    };\n\n    /**\n     * Poll for a function to return true, and call a callback\n     * function once it does, or assert if a timeout is\n     * reached. This is preferred over a simple step_timeout\n     * whenever possible since it allows the timeout to be longer\n     * to reduce intermittents without compromising test execution\n     * speed when the condition is quickly met.\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean. The callback is called\n     *                        when this function returns true.\n     * @param {Function} func A function taking no arguments to call once\n     *                        the condition is met.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     *\n     */\n    Test.prototype.step_wait_func = function(cond, func, description,\n                                             timeout=3000, interval=100) {\n        var timeout_full = timeout * tests.timeout_multiplier;\n        var remaining = Math.ceil(timeout_full / interval);\n        var test_this = this;\n\n        var wait_for_inner = test_this.step_func(() => {\n            if (cond()) {\n                func();\n            } else {\n                if(remaining === 0) {\n                    assert(false, \"step_wait_func\", description,\n                           \"Timed out waiting on condition\");\n                }\n                remaining--;\n                setTimeout(wait_for_inner, interval);\n            }\n        });\n\n        wait_for_inner();\n    };\n\n    /**\n     * Poll for a function to return true, and invoke a callback\n     * followed by this.done() once it does, or assert if a timeout\n     * is reached. This is preferred over a simple step_timeout\n     * whenever possible since it allows the timeout to be longer\n     * to reduce intermittents without compromising test execution speed\n     * when the condition is quickly met.\n     *\n     * @example\n     * async_test(t => {\n     *  const popup = window.open(\"resources/coop-coep.py?coop=same-origin&coep=&navigate=about:blank\");\n     *  t.add_cleanup(() => popup.close());\n     *  assert_equals(window, popup.opener);\n     *\n     *  popup.onload = t.step_func(() => {\n     *    assert_true(popup.location.href.endsWith(\"&navigate=about:blank\"));\n     *    // Use step_wait_func_done as about:blank cannot message back.\n     *    t.step_wait_func_done(() => popup.location.href === \"about:blank\");\n     *  });\n     * }, \"Navigating a popup to about:blank\");\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean. The callback is called\n     *                        when this function returns true.\n     * @param {Function} func A function taking no arguments to call once\n     *                        the condition is met.\n     * @param {string} [description] Error message to add to assert in case of\n     *                               failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     *\n     */\n    Test.prototype.step_wait_func_done = function(cond, func, description,\n                                                  timeout=3000, interval=100) {\n         this.step_wait_func(cond, () => {\n            if (func) {\n                func();\n            }\n            this.done();\n         }, description, timeout, interval);\n    };\n\n    /**\n     * Poll for a function to return true, and resolve a promise\n     * once it does, or assert if a timeout is reached. This is\n     * preferred over a simple step_timeout whenever possible\n     * since it allows the timeout to be longer to reduce\n     * intermittents without compromising test execution speed\n     * when the condition is quickly met.\n     *\n     * @example\n     * promise_test(async t => {\n     *  // â¦\n     * await t.step_wait(() => frame.contentDocument === null, \"Frame navigated to a cross-origin document\");\n     * // â¦\n     * }, \"\");\n     *\n     * @param {Function} cond A function taking no arguments and\n     *                        returning a boolean.\n     * @param {string} [description] Error message to add to assert in case of\n     *                              failure.\n     * @param {number} timeout Timeout in ms. This is multiplied by the global\n     *                         timeout_multiplier\n     * @param {number} interval Polling interval in ms\n     * @returns {Promise} Promise resolved once cond is met.\n     *\n     */\n    Test.prototype.step_wait = function(cond, description, timeout=3000, interval=100) {\n        return new Promise(resolve => {\n            this.step_wait_func(cond, resolve, description, timeout, interval);\n        });\n    }\n\n    /*\n     * Private method for registering cleanup functions. `testharness.js`\n     * internals should use this method instead of the public `add_cleanup`\n     * method in order to hide implementation details from the harness status\n     * message in the case errors.\n     */\n    Test.prototype._add_cleanup = function(callback) {\n        this.cleanup_callbacks.push(callback);\n    };\n\n    /**\n     * Schedule a function to be run after the test result is known, regardless\n     * of passing or failing state.\n     *\n     * The behavior of this function will not\n     * influence the result of the test, but if an exception is thrown, the\n     * test harness will report an error.\n     *\n     * @param {Function} callback - The cleanup function to run. This\n     * is called with no arguments.\n     */\n    Test.prototype.add_cleanup = function(callback) {\n        this._user_defined_cleanup_count += 1;\n        this._add_cleanup(callback);\n    };\n\n    Test.prototype.set_timeout = function()\n    {\n        if (this.timeout_length !== null) {\n            var this_obj = this;\n            this.timeout_id = setTimeout(function()\n                                         {\n                                             this_obj.timeout();\n                                         }, this.timeout_length);\n        }\n    };\n\n    Test.prototype.set_status = function(status, message, stack)\n    {\n        this.status = status;\n        this.message = message;\n        this.stack = stack ? stack : null;\n    };\n\n    /**\n     * Manually set the test status to ``TIMEOUT``.\n     */\n    Test.prototype.timeout = function()\n    {\n        this.timeout_id = null;\n        this.set_status(this.TIMEOUT, \"Test timed out\");\n        this.phase = this.phases.HAS_RESULT;\n        this.done();\n    };\n\n    /**\n     * Manually set the test status to ``TIMEOUT``.\n     *\n     * Alias for `Test.timeout <#Test.timeout>`_.\n     */\n    Test.prototype.force_timeout = function() {\n        return this.timeout();\n    };\n\n    /**\n     * Mark the test as complete.\n     *\n     * This sets the test status to ``PASS`` if no other status was\n     * already recorded. Any subsequent attempts to run additional\n     * test steps will be ignored.\n     *\n     * After setting the test status any test cleanup functions will\n     * be run.\n     */\n    Test.prototype.done = function()\n    {\n        if (this.phase >= this.phases.CLEANING) {\n            return;\n        }\n\n        if (this.phase <= this.phases.STARTED) {\n            this.set_status(this.PASS, null);\n        }\n\n        if (global_scope.clearTimeout) {\n            clearTimeout(this.timeout_id);\n        }\n\n        if (settings.debug) {\n            console.log(\"TEST DONE\",\n                        this.status,\n                        this.name);\n        }\n\n        this.cleanup();\n    };\n\n    function add_test_done_callback(test, callback)\n    {\n        if (test.phase === test.phases.COMPLETE) {\n            callback();\n            return;\n        }\n\n        test._done_callbacks.push(callback);\n    }\n\n    /*\n     * Invoke all specified cleanup functions. If one or more produce an error,\n     * the context is in an unpredictable state, so all further testing should\n     * be cancelled.\n     */\n    Test.prototype.cleanup = function() {\n        for(let i = 0; i < 1000000; i++);\n        window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"END\", content: {'isSecure': window.isSecureContext, 'wid': window.__id__, 'name': this.name, 'status': !this.status}, ts: Date.now()}}))\n        var errors = [];\n        var bad_value_count = 0;\n        function on_error(e) {\n            errors.push(e);\n            // Abort tests immediately so that tests declared within subsequent\n            // cleanup functions are not run.\n            tests.abort();\n        }\n        var this_obj = this;\n        var results = [];\n\n        this.phase = this.phases.CLEANING;\n\n        if (this._abortController) {\n            this._abortController.abort(\"Test cleanup\");\n        }\n\n        forEach(this.cleanup_callbacks,\n                function(cleanup_callback) {\n                    var result;\n\n                    try {\n                        result = cleanup_callback();\n                    } catch (e) {\n                        on_error(e);\n                        return;\n                    }\n\n                    if (!is_valid_cleanup_result(this_obj, result)) {\n                        bad_value_count += 1;\n                        // Abort tests immediately so that tests declared\n                        // within subsequent cleanup functions are not run.\n                        tests.abort();\n                    }\n\n                    results.push(result);\n                });\n\n        if (!this._is_promise_test) {\n            cleanup_done(this_obj, errors, bad_value_count);\n        } else {\n            all_async(results,\n                      function(result, done) {\n                          if (result && typeof result.then === \"function\") {\n                              result\n                                  .then(null, on_error)\n                                  .then(done);\n                          } else {\n                              done();\n                          }\n                      },\n                      function() {\n                          cleanup_done(this_obj, errors, bad_value_count);\n                      });\n        }\n    };\n\n    /*\n     * Determine if the return value of a cleanup function is valid for a given\n     * test. Any test may return the value `undefined`. Tests created with\n     * `promise_test` may alternatively return \"thenable\" object values.\n     */\n    function is_valid_cleanup_result(test, result) {\n        if (result === undefined) {\n            return true;\n        }\n\n        if (test._is_promise_test) {\n            return result && typeof result.then === \"function\";\n        }\n\n        return false;\n    }\n\n    function cleanup_done(test, errors, bad_value_count) {\n        if (errors.length || bad_value_count) {\n            var total = test._user_defined_cleanup_count;\n\n            tests.status.status = tests.status.ERROR;\n            tests.status.stack = null;\n            tests.status.message = \"Test named '\" + test.name +\n                \"' specified \" + total +\n                \" 'cleanup' function\" + (total > 1 ? \"s\" : \"\");\n\n            if (errors.length) {\n                tests.status.message += \", and \" + errors.length + \" failed\";\n                tests.status.stack = ((typeof errors[0] === \"object\" &&\n                                       errors[0].hasOwnProperty(\"stack\")) ?\n                                      errors[0].stack : null);\n            }\n\n            if (bad_value_count) {\n                var type = test._is_promise_test ?\n                   \"non-thenable\" : \"non-undefined\";\n                tests.status.message += \", and \" + bad_value_count +\n                    \" returned a \" + type + \" value\";\n            }\n\n            tests.status.message += \".\";\n        }\n\n        test.phase = test.phases.COMPLETE;\n        tests.result(test);\n        forEach(test._done_callbacks,\n                function(callback) {\n                    callback();\n                });\n        test._done_callbacks.length = 0;\n    }\n\n    /**\n     * Gives an AbortSignal that will be aborted when the test finishes.\n     */\n    Test.prototype.get_signal = function() {\n        if (!this._abortController) {\n            throw new Error(\"AbortController is not supported in this browser\");\n        }\n        return this._abortController.signal;\n    }\n\n    /**\n     * A RemoteTest object mirrors a Test object on a remote worker. The\n     * associated RemoteWorker updates the RemoteTest object in response to\n     * received events. In turn, the RemoteTest object replicates these events\n     * on the local document. This allows listeners (test result reporting\n     * etc..) to transparently handle local and remote events.\n     */\n    function RemoteTest(clone) {\n        var this_obj = this;\n        Object.keys(clone).forEach(\n                function(key) {\n                    this_obj[key] = clone[key];\n                });\n        this.index = null;\n        this.phase = this.phases.INITIAL;\n        this.update_state_from(clone);\n        this._done_callbacks = [];\n        tests.push(this);\n    }\n\n    RemoteTest.prototype.structured_clone = function() {\n        var clone = {};\n        Object.keys(this).forEach(\n                (function(key) {\n                    var value = this[key];\n                    // `RemoteTest` instances are responsible for managing\n                    // their own \"done\" callback functions, so those functions\n                    // are not relevant in other execution contexts. Because of\n                    // this (and because Function values cannot be serialized\n                    // for cross-realm transmittance), the property should not\n                    // be considered when cloning instances.\n                    if (key === '_done_callbacks' ) {\n                        return;\n                    }\n\n                    if (typeof value === \"object\" && value !== null) {\n                        clone[key] = merge({}, value);\n                    } else {\n                        clone[key] = value;\n                    }\n                }).bind(this));\n        clone.phases = merge({}, this.phases);\n        return clone;\n    };\n\n    /**\n     * `RemoteTest` instances are objects which represent tests running in\n     * another realm. They do not define \"cleanup\" functions (if necessary,\n     * such functions are defined on the associated `Test` instance within the\n     * external realm). However, `RemoteTests` may have \"done\" callbacks (e.g.\n     * as attached by the `Tests` instance responsible for tracking the overall\n     * test status in the parent realm). The `cleanup` method delegates to\n     * `done` in order to ensure that such callbacks are invoked following the\n     * completion of the `RemoteTest`.\n     */\n    RemoteTest.prototype.cleanup = function() {\n        this.done();\n    };\n    RemoteTest.prototype.phases = Test.prototype.phases;\n    RemoteTest.prototype.update_state_from = function(clone) {\n        this.status = clone.status;\n        this.message = clone.message;\n        this.stack = clone.stack;\n        if (this.phase === this.phases.INITIAL) {\n            this.phase = this.phases.STARTED;\n        }\n    };\n    RemoteTest.prototype.done = function() {\n        this.phase = this.phases.COMPLETE;\n\n        forEach(this._done_callbacks,\n                function(callback) {\n                    callback();\n                });\n    }\n\n    RemoteTest.prototype.format_status = function() {\n        return Test.prototype.status_formats[this.status];\n    }\n\n    /*\n     * A RemoteContext listens for test events from a remote test context, such\n     * as another window or a worker. These events are then used to construct\n     * and maintain RemoteTest objects that mirror the tests running in the\n     * remote context.\n     *\n     * An optional third parameter can be used as a predicate to filter incoming\n     * MessageEvents.\n     */\n    function RemoteContext(remote, message_target, message_filter) {\n        this.running = true;\n        this.started = false;\n        this.tests = new Array();\n        this.early_exception = null;\n\n        var this_obj = this;\n        // If remote context is cross origin assigning to onerror is not\n        // possible, so silently catch those errors.\n        try {\n          remote.onerror = function(error) { this_obj.remote_error(error); };\n        } catch (e) {\n          // Ignore.\n        }\n\n        // Keeping a reference to the remote object and the message handler until\n        // remote_done() is seen prevents the remote object and its message channel\n        // from going away before all the messages are dispatched.\n        this.remote = remote;\n        this.message_target = message_target;\n        this.message_handler = function(message) {\n            var passesFilter = !message_filter || message_filter(message);\n            // The reference to the `running` property in the following\n            // condition is unnecessary because that value is only set to\n            // `false` after the `message_handler` function has been\n            // unsubscribed.\n            // TODO: Simplify the condition by removing the reference.\n            if (this_obj.running && message.data && passesFilter &&\n                (message.data.type in this_obj.message_handlers)) {\n                this_obj.message_handlers[message.data.type].call(this_obj, message.data);\n            }\n        };\n\n        if (self.Promise) {\n            this.done = new Promise(function(resolve) {\n                this_obj.doneResolve = resolve;\n            });\n        }\n\n        this.message_target.addEventListener(\"message\", this.message_handler);\n    }\n\n    RemoteContext.prototype.remote_error = function(error) {\n        if (error.preventDefault) {\n            error.preventDefault();\n        }\n\n        // Defer interpretation of errors until the testing protocol has\n        // started and the remote test's `allow_uncaught_exception` property\n        // is available.\n        if (!this.started) {\n            this.early_exception = error;\n        } else if (!this.allow_uncaught_exception) {\n            this.report_uncaught(error);\n        }\n    };\n\n    RemoteContext.prototype.report_uncaught = function(error) {\n        var message = error.message || String(error);\n        var filename = (error.filename ? \" \" + error.filename: \"\");\n        // FIXME: Display remote error states separately from main document\n        // error state.\n        tests.set_status(tests.status.ERROR,\n                         \"Error in remote\" + filename + \": \" + message,\n                         error.stack);\n    };\n\n    RemoteContext.prototype.start = function(data) {\n        this.started = true;\n        this.allow_uncaught_exception = data.properties.allow_uncaught_exception;\n\n        if (this.early_exception && !this.allow_uncaught_exception) {\n            this.report_uncaught(this.early_exception);\n        }\n    };\n\n    RemoteContext.prototype.test_state = function(data) {\n        var remote_test = this.tests[data.test.index];\n        if (!remote_test) {\n            remote_test = new RemoteTest(data.test);\n            this.tests[data.test.index] = remote_test;\n        }\n        remote_test.update_state_from(data.test);\n        tests.notify_test_state(remote_test);\n    };\n\n    RemoteContext.prototype.test_done = function(data) {\n        var remote_test = this.tests[data.test.index];\n        remote_test.update_state_from(data.test);\n        remote_test.done();\n        tests.result(remote_test);\n    };\n\n    RemoteContext.prototype.remote_done = function(data) {\n        if (tests.status.status === null &&\n            data.status.status !== data.status.OK) {\n            tests.set_status(data.status.status, data.status.message, data.status.stack);\n        }\n\n        for (let assert of data.asserts) {\n            var record = new AssertRecord();\n            record.assert_name = assert.assert_name;\n            record.args = assert.args;\n            record.test = assert.test != null ? this.tests[assert.test.index] : null;\n            record.status = assert.status;\n            record.stack = assert.stack;\n            tests.asserts_run.push(record);\n        }\n\n        this.message_target.removeEventListener(\"message\", this.message_handler);\n        this.running = false;\n\n        // If remote context is cross origin assigning to onerror is not\n        // possible, so silently catch those errors.\n        try {\n          this.remote.onerror = null;\n        } catch (e) {\n          // Ignore.\n        }\n\n        this.remote = null;\n        this.message_target = null;\n        if (this.doneResolve) {\n            this.doneResolve();\n        }\n\n        if (tests.all_done()) {\n            tests.complete();\n        }\n    };\n\n    RemoteContext.prototype.message_handlers = {\n        start: RemoteContext.prototype.start,\n        test_state: RemoteContext.prototype.test_state,\n        result: RemoteContext.prototype.test_done,\n        complete: RemoteContext.prototype.remote_done\n    };\n\n    /**\n     * @class\n     * Status of the overall harness\n     */\n    function TestsStatus()\n    {\n        /** The status code */\n        this.status = null;\n        /** Message in case of failure */\n        this.message = null;\n        /** Stack trace in case of an exception. */\n        this.stack = null;\n    }\n\n    /**\n     * Enum of possible harness statuses.\n     *\n     * :values:\n     *   - ``OK``\n     *   - ``ERROR``\n     *   - ``TIMEOUT``\n     *   - ``PRECONDITION_FAILED``\n     */\n    TestsStatus.statuses = {\n        OK:0,\n        ERROR:1,\n        TIMEOUT:2,\n        PRECONDITION_FAILED:3\n    };\n\n    TestsStatus.prototype = merge({}, TestsStatus.statuses);\n\n    TestsStatus.prototype.formats = {\n        0: \"OK\",\n        1: \"Error\",\n        2: \"Timeout\",\n        3: \"Optional Feature Unsupported\"\n    };\n\n    TestsStatus.prototype.structured_clone = function()\n    {\n        if (!this._structured_clone) {\n            var msg = this.message;\n            msg = msg ? String(msg) : msg;\n            this._structured_clone = merge({\n                status:this.status,\n                message:msg,\n                stack:this.stack\n            }, TestsStatus.statuses);\n        }\n        return this._structured_clone;\n    };\n\n    TestsStatus.prototype.format_status = function() {\n        return this.formats[this.status];\n    };\n\n    /**\n     * @class\n     * Record of an assert that ran.\n     *\n     * @param {Test} test - The test which ran the assert.\n     * @param {string} assert_name - The function name of the assert.\n     * @param {Any} args - The arguments passed to the assert function.\n     */\n    function AssertRecord(test, assert_name, args = []) {\n        /** Name of the assert that ran */\n        this.assert_name = assert_name;\n        /** Test that ran the assert */\n        this.test = test;\n        // Avoid keeping complex objects alive\n        /** Stringification of the arguments that were passed to the assert function */\n        this.args = args.map(x => format_value(x).replace(/\\n/g, \" \"));\n        /** Status of the assert */\n        this.status = null;\n    }\n\n    AssertRecord.prototype.structured_clone = function() {\n        return {\n            assert_name: this.assert_name,\n            test: this.test ? this.test.structured_clone() : null,\n            args: this.args,\n            status: this.status,\n        };\n    };\n\n    function Tests()\n    {\n        this.tests = [];\n        this.num_pending = 0;\n\n        this.phases = {\n            INITIAL:0,\n            SETUP:1,\n            HAVE_TESTS:2,\n            HAVE_RESULTS:3,\n            COMPLETE:4\n        };\n        this.phase = this.phases.INITIAL;\n\n        this.properties = {};\n\n        this.wait_for_finish = false;\n        this.processing_callbacks = false;\n\n        this.allow_uncaught_exception = false;\n\n        this.file_is_test = false;\n        // This value is lazily initialized in order to avoid introducing a\n        // dependency on ECMAScript 2015 Promises to all tests.\n        this.promise_tests = null;\n        this.promise_setup_called = false;\n\n        this.timeout_multiplier = 1;\n        this.timeout_length = test_environment.test_timeout();\n        this.timeout_id = null;\n\n        this.start_callbacks = [];\n        this.test_state_callbacks = [];\n        this.test_done_callbacks = [];\n        this.all_done_callbacks = [];\n\n        this.hide_test_state = false;\n        this.pending_remotes = [];\n\n        this.current_test = null;\n        this.asserts_run = [];\n\n        // Track whether output is enabled, and thus whether or not we should\n        // track asserts.\n        //\n        // On workers we don't get properties set from testharnessreport.js, so\n        // we don't know whether or not to track asserts. To avoid the\n        // resulting performance hit, we assume we are not meant to. This means\n        // that assert tracking does not function on workers.\n        this.output = settings.output && 'document' in global_scope;\n\n        this.status = new TestsStatus();\n\n        var this_obj = this;\n\n        test_environment.add_on_loaded_callback(function() {\n            if (this_obj.all_done()) {\n                this_obj.complete();\n            }\n        });\n\n        this.set_timeout();\n    }\n\n    Tests.prototype.setup = function(func, properties)\n    {\n        if (this.phase >= this.phases.HAVE_RESULTS) {\n            return;\n        }\n\n        if (this.phase < this.phases.SETUP) {\n            this.phase = this.phases.SETUP;\n        }\n\n        this.properties = properties;\n\n        for (var p in properties) {\n            if (properties.hasOwnProperty(p)) {\n                var value = properties[p];\n                if (p == \"allow_uncaught_exception\") {\n                    this.allow_uncaught_exception = value;\n                } else if (p == \"explicit_done\" && value) {\n                    this.wait_for_finish = true;\n                } else if (p == \"explicit_timeout\" && value) {\n                    this.timeout_length = null;\n                    if (this.timeout_id)\n                    {\n                        clearTimeout(this.timeout_id);\n                    }\n                } else if (p == \"single_test\" && value) {\n                    this.set_file_is_test();\n                } else if (p == \"timeout_multiplier\") {\n                    this.timeout_multiplier = value;\n                    if (this.timeout_length) {\n                         this.timeout_length *= this.timeout_multiplier;\n                    }\n                } else if (p == \"hide_test_state\") {\n                    this.hide_test_state = value;\n                } else if (p == \"output\") {\n                    this.output = value;\n                } else if (p === \"debug\") {\n                    settings.debug = value;\n                }\n            }\n        }\n\n        if (func) {\n            try {\n                func();\n            } catch (e) {\n                this.status.status = e instanceof OptionalFeatureUnsupportedError ? this.status.PRECONDITION_FAILED : this.status.ERROR;\n                this.status.message = String(e);\n                this.status.stack = e.stack ? e.stack : null;\n                this.complete();\n            }\n        }\n        this.set_timeout();\n    };\n\n    Tests.prototype.set_file_is_test = function() {\n        if (this.tests.length > 0) {\n            throw new Error(\"Tried to set file as test after creating a test\");\n        }\n        this.wait_for_finish = true;\n        this.file_is_test = true;\n        // Create the test, which will add it to the list of tests\n        tests.current_test = async_test();\n    };\n\n    Tests.prototype.set_status = function(status, message, stack)\n    {\n        this.status.status = status;\n        this.status.message = message;\n        this.status.stack = stack ? stack : null;\n    };\n\n    Tests.prototype.set_timeout = function() {\n        if (global_scope.clearTimeout) {\n            var this_obj = this;\n            clearTimeout(this.timeout_id);\n            if (this.timeout_length !== null) {\n                this.timeout_id = setTimeout(function() {\n                                                 this_obj.timeout();\n                                             }, this.timeout_length);\n            }\n        }\n    };\n\n    Tests.prototype.timeout = function() {\n        var test_in_cleanup = null;\n\n        if (this.status.status === null) {\n            forEach(this.tests,\n                    function(test) {\n                        // No more than one test is expected to be in the\n                        // \"CLEANUP\" phase at any time\n                        if (test.phase === test.phases.CLEANING) {\n                            test_in_cleanup = test;\n                        }\n\n                        test.phase = test.phases.COMPLETE;\n                    });\n\n            // Timeouts that occur while a test is in the \"cleanup\" phase\n            // indicate that some global state was not properly reverted. This\n            // invalidates the overall test execution, so the timeout should be\n            // reported as an error and cancel the execution of any remaining\n            // tests.\n            if (test_in_cleanup) {\n                this.status.status = this.status.ERROR;\n                this.status.message = \"Timeout while running cleanup for \" +\n                    \"test named \\\"\" + test_in_cleanup.name + \"\\\".\";\n                tests.status.stack = null;\n            } else {\n                this.status.status = this.status.TIMEOUT;\n            }\n        }\n\n        this.complete();\n    };\n\n    Tests.prototype.end_wait = function()\n    {\n        this.wait_for_finish = false;\n        if (this.all_done()) {\n            this.complete();\n        }\n    };\n\n    Tests.prototype.push = function(test)\n    {\n        if (this.phase < this.phases.HAVE_TESTS) {\n            this.start();\n        }\n        this.num_pending++;\n        test.index = this.tests.push(test);\n        this.notify_test_state(test);\n    };\n\n    Tests.prototype.notify_test_state = function(test) {\n        var this_obj = this;\n        forEach(this.test_state_callbacks,\n                function(callback) {\n                    callback(test, this_obj);\n                });\n    };\n\n    Tests.prototype.all_done = function() {\n        return (this.tests.length > 0 || this.pending_remotes.length > 0) &&\n                test_environment.all_loaded &&\n                (this.num_pending === 0 || this.is_aborted) && !this.wait_for_finish &&\n                !this.processing_callbacks &&\n                !this.pending_remotes.some(function(w) { return w.running; });\n    };\n\n    Tests.prototype.start = function() {\n        this.phase = this.phases.HAVE_TESTS;\n        this.notify_start();\n    };\n\n    Tests.prototype.notify_start = function() {\n        var this_obj = this;\n        forEach (this.start_callbacks,\n                 function(callback)\n                 {\n                     callback(this_obj.properties);\n                 });\n    };\n\n    Tests.prototype.result = function(test)\n    {\n        // If the harness has already transitioned beyond the `HAVE_RESULTS`\n        // phase, subsequent tests should not cause it to revert.\n        if (this.phase <= this.phases.HAVE_RESULTS) {\n            this.phase = this.phases.HAVE_RESULTS;\n        }\n        this.num_pending--;\n        this.notify_result(test);\n    };\n\n    Tests.prototype.notify_result = function(test) {\n        var this_obj = this;\n        this.processing_callbacks = true;\n        forEach(this.test_done_callbacks,\n                function(callback)\n                {\n                    callback(test, this_obj);\n                });\n        this.processing_callbacks = false;\n        if (this_obj.all_done()) {\n            this_obj.complete();\n        }\n    };\n\n    Tests.prototype.complete = function() {\n        if (this.phase === this.phases.COMPLETE) {\n            return;\n        }\n        var this_obj = this;\n        var all_complete = function() {\n            this_obj.phase = this_obj.phases.COMPLETE;\n            this_obj.notify_complete();\n        };\n        var incomplete = filter(this.tests,\n                                function(test) {\n                                    return test.phase < test.phases.COMPLETE;\n                                });\n\n        /**\n         * To preserve legacy behavior, overall test completion must be\n         * signaled synchronously.\n         */\n        if (incomplete.length === 0) {\n            all_complete();\n            return;\n        }\n\n        all_async(incomplete,\n                  function(test, testDone)\n                  {\n                      if (test.phase === test.phases.INITIAL) {\n                          test.phase = test.phases.COMPLETE;\n                          testDone();\n                      } else {\n                          add_test_done_callback(test, testDone);\n                          test.cleanup();\n                      }\n                  },\n                  all_complete);\n    };\n\n    Tests.prototype.set_assert = function(assert_name, args) {\n        this.asserts_run.push(new AssertRecord(this.current_test, assert_name, args))\n    }\n\n    Tests.prototype.set_assert_status = function(status, stack) {\n        let assert_record = this.asserts_run[this.asserts_run.length - 1];\n        assert_record.status = status;\n        assert_record.stack = stack;\n    }\n\n    /**\n     * Update the harness status to reflect an unrecoverable harness error that\n     * should cancel all further testing. Update all previously-defined tests\n     * which have not yet started to indicate that they will not be executed.\n     */\n    Tests.prototype.abort = function() {\n        this.status.status = this.status.ERROR;\n        this.is_aborted = true;\n\n        forEach(this.tests,\n                function(test) {\n                    if (test.phase === test.phases.INITIAL) {\n                        test.phase = test.phases.COMPLETE;\n                    }\n                });\n    };\n\n    /*\n     * Determine if any tests share the same `name` property. Return an array\n     * containing the names of any such duplicates.\n     */\n    Tests.prototype.find_duplicates = function() {\n        var names = Object.create(null);\n        var duplicates = [];\n\n        forEach (this.tests,\n                 function(test)\n                 {\n                     if (test.name in names && duplicates.indexOf(test.name) === -1) {\n                        duplicates.push(test.name);\n                     }\n                     names[test.name] = true;\n                 });\n\n        return duplicates;\n    };\n\n    function code_unit_str(char) {\n        return 'U+' + char.charCodeAt(0).toString(16);\n    }\n\n    function sanitize_unpaired_surrogates(str) {\n        return str.replace(\n            /([\\ud800-\\udbff]+)(?![\\udc00-\\udfff])|(^|[^\\ud800-\\udbff])([\\udc00-\\udfff]+)/g,\n            function(_, low, prefix, high) {\n                var output = prefix || \"\";  // prefix may be undefined\n                var string = low || high;  // only one of these alternates can match\n                for (var i = 0; i < string.length; i++) {\n                    output += code_unit_str(string[i]);\n                }\n                return output;\n            });\n    }\n\n    function sanitize_all_unpaired_surrogates(tests) {\n        forEach (tests,\n                 function (test)\n                 {\n                     var sanitized = sanitize_unpaired_surrogates(test.name);\n\n                     if (test.name !== sanitized) {\n                         test.name = sanitized;\n                         delete test._structured_clone;\n                     }\n                 });\n    }\n\n    Tests.prototype.notify_complete = function() {\n        var this_obj = this;\n        var duplicates;\n\n        if (this.status.status === null) {\n            duplicates = this.find_duplicates();\n\n            // Some transports adhere to UTF-8's restriction on unpaired\n            // surrogates. Sanitize the titles so that the results can be\n            // consistently sent via all transports.\n            sanitize_all_unpaired_surrogates(this.tests);\n\n            // Test names are presumed to be unique within test files--this\n            // allows consumers to use them for identification purposes.\n            // Duplicated names violate this expectation and should therefore\n            // be reported as an error.\n            if (duplicates.length) {\n                this.status.status = this.status.ERROR;\n                this.status.message =\n                   duplicates.length + ' duplicate test name' +\n                   (duplicates.length > 1 ? 's' : '') + ': \"' +\n                   duplicates.join('\", \"') + '\"';\n            } else {\n                this.status.status = this.status.OK;\n            }\n        }\n\n        forEach (this.all_done_callbacks,\n                 function(callback)\n                 {\n                     callback(this_obj.tests, this_obj.status, this_obj.asserts_run);\n                 });\n    };\n\n    /*\n     * Constructs a RemoteContext that tracks tests from a specific worker.\n     */\n    Tests.prototype.create_remote_worker = function(worker) {\n        var message_port;\n\n        if (is_service_worker(worker)) {\n            message_port = navigator.serviceWorker;\n            worker.postMessage({type: \"connect\"});\n        } else if (is_shared_worker(worker)) {\n            message_port = worker.port;\n            message_port.start();\n        } else {\n            message_port = worker;\n        }\n\n        return new RemoteContext(worker, message_port);\n    };\n\n    /*\n     * Constructs a RemoteContext that tracks tests from a specific window.\n     */\n    Tests.prototype.create_remote_window = function(remote) {\n        remote.postMessage({type: \"getmessages\"}, \"*\");\n        return new RemoteContext(\n            remote,\n            window,\n            function(msg) {\n                return msg.source === remote;\n            }\n        );\n    };\n\n    Tests.prototype.fetch_tests_from_worker = function(worker) {\n        if (this.phase >= this.phases.COMPLETE) {\n            return;\n        }\n\n        var remoteContext = this.create_remote_worker(worker);\n        this.pending_remotes.push(remoteContext);\n        return remoteContext.done;\n    };\n\n    /**\n     * Get test results from a worker and include them in the current test.\n     *\n     * @param {Worker|SharedWorker|ServiceWorker|MessagePort} port -\n     * Either a worker object or a port connected to a worker which is\n     * running tests..\n     * @returns {Promise} - A promise that's resolved once all the remote tests are complete.\n     */\n    function fetch_tests_from_worker(port) {\n        return tests.fetch_tests_from_worker(port);\n    }\n    expose(fetch_tests_from_worker, 'fetch_tests_from_worker');\n\n    Tests.prototype.fetch_tests_from_window = function(remote) {\n        if (this.phase >= this.phases.COMPLETE) {\n            return;\n        }\n\n        var remoteContext = this.create_remote_window(remote);\n        this.pending_remotes.push(remoteContext);\n        return remoteContext.done;\n    };\n\n    /**\n     * Aggregate tests from separate windows or iframes\n     * into the current document as if they were all part of the same test file.\n     *\n     * The document of the second window (or iframe) should include\n     * ``testharness.js``, but not ``testharnessreport.js``, and use\n     * :js:func:`test`, :js:func:`async_test`, and :js:func:`promise_test` in\n     * the usual manner.\n     *\n     * @param {Window} window - The window to fetch tests from.\n     */\n    function fetch_tests_from_window(window) {\n        return tests.fetch_tests_from_window(window);\n    }\n    expose(fetch_tests_from_window, 'fetch_tests_from_window');\n\n    /**\n     * Get test results from a shadow realm and include them in the current test.\n     *\n     * @param {ShadowRealm} realm - A shadow realm also running the test harness\n     * @returns {Promise} - A promise that's resolved once all the remote tests are complete.\n     */\n    function fetch_tests_from_shadow_realm(realm) {\n        var chan = new MessageChannel();\n        function receiveMessage(msg_json) {\n            chan.port1.postMessage(JSON.parse(msg_json));\n        }\n        var done = tests.fetch_tests_from_worker(chan.port2);\n        realm.evaluate(\"begin_shadow_realm_tests\")(receiveMessage);\n        chan.port2.start();\n        return done;\n    }\n    expose(fetch_tests_from_shadow_realm, 'fetch_tests_from_shadow_realm');\n\n    /**\n     * Begin running tests in this shadow realm test harness.\n     *\n     * To be called after all tests have been loaded; it is an error to call\n     * this more than once or in a non-Shadow Realm environment\n     *\n     * @param {Function} postMessage - A function to send test updates to the\n     * incubating realm-- accepts JSON-encoded messages in the format used by\n     * RemoteContext\n     */\n    function begin_shadow_realm_tests(postMessage) {\n        if (!(test_environment instanceof ShadowRealmTestEnvironment)) {\n            throw new Error(\"begin_shadow_realm_tests called in non-Shadow Realm environment\");\n        }\n\n        test_environment.begin(function (msg) {\n            postMessage(JSON.stringify(msg));\n        });\n    }\n    expose(begin_shadow_realm_tests, 'begin_shadow_realm_tests');\n\n    /**\n     * Timeout the tests.\n     *\n     * This only has an effect when ``explicit_timeout`` has been set\n     * in :js:func:`setup`. In other cases any call is a no-op.\n     *\n     */\n    function timeout() {\n        if (tests.timeout_length === null) {\n            tests.timeout();\n        }\n    }\n    expose(timeout, 'timeout');\n\n    /**\n     * Add a callback that's triggered when the first :js:class:`Test` is created.\n     *\n     * @param {Function} callback - Callback function. This is called\n     * without arguments.\n     */\n    function add_start_callback(callback) {\n        tests.start_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when a test state changes.\n     *\n     * @param {Function} callback - Callback function, called with the\n     * :js:class:`Test` as the only argument.\n     */\n    function add_test_state_callback(callback) {\n        tests.test_state_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when a test result is received.\n     *\n     * @param {Function} callback - Callback function, called with the\n     * :js:class:`Test` as the only argument.\n     */\n    function add_result_callback(callback) {\n        tests.test_done_callbacks.push(callback);\n    }\n\n    /**\n     * Add a callback that's triggered when all tests are complete.\n     *\n     * @param {Function} callback - Callback function, called with an\n     * array of :js:class:`Test` objects, a :js:class:`TestsStatus`\n     * object and an array of :js:class:`AssertRecord` objects. If the\n     * debug setting is ``false`` the final argument will be an empty\n     * array.\n     *\n     * For performance reasons asserts are only tracked when the debug\n     * setting is ``true``. In other cases the array of asserts will be\n     * empty.\n     */\n    function add_completion_callback(callback) {\n        tests.all_done_callbacks.push(callback);\n    }\n\n    expose(add_start_callback, 'add_start_callback');\n    expose(add_test_state_callback, 'add_test_state_callback');\n    expose(add_result_callback, 'add_result_callback');\n    expose(add_completion_callback, 'add_completion_callback');\n\n    function remove(array, item) {\n        var index = array.indexOf(item);\n        if (index > -1) {\n            array.splice(index, 1);\n        }\n    }\n\n    function remove_start_callback(callback) {\n        remove(tests.start_callbacks, callback);\n    }\n\n    function remove_test_state_callback(callback) {\n        remove(tests.test_state_callbacks, callback);\n    }\n\n    function remove_result_callback(callback) {\n        remove(tests.test_done_callbacks, callback);\n    }\n\n    function remove_completion_callback(callback) {\n       remove(tests.all_done_callbacks, callback);\n    }\n\n    /*\n     * Output listener\n    */\n\n    function Output() {\n        this.output_document = document;\n        this.output_node = null;\n        this.enabled = settings.output;\n        this.phase = this.INITIAL;\n    }\n\n    Output.prototype.INITIAL = 0;\n    Output.prototype.STARTED = 1;\n    Output.prototype.HAVE_RESULTS = 2;\n    Output.prototype.COMPLETE = 3;\n\n    Output.prototype.setup = function(properties) {\n        if (this.phase > this.INITIAL) {\n            return;\n        }\n\n        //If output is disabled in testharnessreport.js the test shouldn't be\n        //able to override that\n        this.enabled = this.enabled && (properties.hasOwnProperty(\"output\") ?\n                                        properties.output : settings.output);\n    };\n\n    Output.prototype.init = function(properties) {\n        if (this.phase >= this.STARTED) {\n            return;\n        }\n        if (properties.output_document) {\n            this.output_document = properties.output_document;\n        } else {\n            this.output_document = document;\n        }\n        this.phase = this.STARTED;\n    };\n\n    Output.prototype.resolve_log = function() {\n        var output_document;\n        if (this.output_node) {\n            return;\n        }\n        if (typeof this.output_document === \"function\") {\n            output_document = this.output_document.apply(undefined);\n        } else {\n            output_document = this.output_document;\n        }\n        if (!output_document) {\n            return;\n        }\n        var node = output_document.getElementById(\"log\");\n        if (!node) {\n            if (output_document.readyState === \"loading\") {\n                return;\n            }\n            node = output_document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"div\");\n            node.id = \"log\";\n            if (output_document.body) {\n                output_document.body.appendChild(node);\n            } else {\n                var root = output_document.documentElement;\n                var is_html = (root &&\n                               root.namespaceURI == \"http://www.w3.org/1999/xhtml\" &&\n                               root.localName == \"html\");\n                var is_svg = (output_document.defaultView &&\n                              \"SVGSVGElement\" in output_document.defaultView &&\n                              root instanceof output_document.defaultView.SVGSVGElement);\n                if (is_svg) {\n                    var foreignObject = output_document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\");\n                    foreignObject.setAttribute(\"width\", \"100%\");\n                    foreignObject.setAttribute(\"height\", \"100%\");\n                    root.appendChild(foreignObject);\n                    foreignObject.appendChild(node);\n                } else if (is_html) {\n                    root.appendChild(output_document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"body\"))\n                        .appendChild(node);\n                } else {\n                    root.appendChild(node);\n                }\n            }\n        }\n        this.output_document = output_document;\n        this.output_node = node;\n    };\n\n    Output.prototype.show_status = function() {\n        if (this.phase < this.STARTED) {\n            this.init({});\n        }\n        if (!this.enabled || this.phase === this.COMPLETE) {\n            return;\n        }\n        this.resolve_log();\n        if (this.phase < this.HAVE_RESULTS) {\n            this.phase = this.HAVE_RESULTS;\n        }\n        var done_count = tests.tests.length - tests.num_pending;\n        if (this.output_node && !tests.hide_test_state) {\n            if (done_count < 100 ||\n                (done_count < 1000 && done_count % 100 === 0) ||\n                done_count % 1000 === 0) {\n                this.output_node.textContent = \"Running, \" +\n                    done_count + \" complete, \" +\n                    tests.num_pending + \" remain\";\n            }\n        }\n    };\n\n    Output.prototype.show_results = function (tests, harness_status, asserts_run) {\n        if (this.phase >= this.COMPLETE) {\n            return;\n        }\n        if (!this.enabled) {\n            return;\n        }\n        if (!this.output_node) {\n            this.resolve_log();\n        }\n        this.phase = this.COMPLETE;\n\n        var log = this.output_node;\n        if (!log) {\n            return;\n        }\n        var output_document = this.output_document;\n\n        while (log.lastChild) {\n            log.removeChild(log.lastChild);\n        }\n\n        var stylesheet = output_document.createElementNS(xhtml_ns, \"style\");\n        stylesheet.textContent = stylesheetContent;\n        var heads = output_document.getElementsByTagName(\"head\");\n        if (heads.length) {\n            heads[0].appendChild(stylesheet);\n        }\n\n        var status_number = {};\n        forEach(tests,\n                function(test) {\n                    var status = test.format_status();\n                    if (status_number.hasOwnProperty(status)) {\n                        status_number[status] += 1;\n                    } else {\n                        status_number[status] = 1;\n                    }\n                });\n\n        function status_class(status)\n        {\n            return status.replace(/\\s/g, '').toLowerCase();\n        }\n\n        var summary_template = [\"section\", {\"id\":\"summary\"},\n                                [\"h2\", {}, \"Summary\"],\n                                function()\n                                {\n                                    var status = harness_status.format_status();\n                                    var rv = [[\"section\", {},\n                                               [\"p\", {},\n                                                \"Harness status: \",\n                                                [\"span\", {\"class\":status_class(status)},\n                                                 status\n                                                ],\n                                               ],\n                                               [\"button\",\n                                                {\"onclick\": \"let evt = new Event('__test_restart'); \" +\n                                                 \"let canceled = !window.dispatchEvent(evt);\" +\n                                                 \"if (!canceled) { location.reload() }\"},\n                                                \"Rerun\"]\n                                              ]];\n\n                                    if (harness_status.status === harness_status.ERROR) {\n                                        rv[0].push([\"pre\", {}, harness_status.message]);\n                                        if (harness_status.stack) {\n                                            rv[0].push([\"pre\", {}, harness_status.stack]);\n                                        }\n                                    }\n                                    return rv;\n                                },\n                                [\"p\", {}, \"Found ${num_tests} tests\"],\n                                function() {\n                                    var rv = [[\"div\", {}]];\n                                    var i = 0;\n                                    while (Test.prototype.status_formats.hasOwnProperty(i)) {\n                                        if (status_number.hasOwnProperty(Test.prototype.status_formats[i])) {\n                                            var status = Test.prototype.status_formats[i];\n                                            rv[0].push([\"div\", {},\n                                                        [\"label\", {},\n                                                         [\"input\", {type:\"checkbox\", checked:\"checked\"}],\n                                                         status_number[status] + \" \",\n                                                         [\"span\", {\"class\":status_class(status)}, status]]]);\n                                        }\n                                        i++;\n                                    }\n                                    return rv;\n                                },\n                               ];\n\n        log.appendChild(render(summary_template, {num_tests:tests.length}, output_document));\n\n        forEach(output_document.querySelectorAll(\"section#summary label\"),\n                function(element)\n                {\n                    on_event(element, \"click\",\n                             function(e)\n                             {\n                                 if (output_document.getElementById(\"results\") === null) {\n                                     e.preventDefault();\n                                     return;\n                                 }\n                                 var result_class = element.querySelector(\"span[class]\").getAttribute(\"class\");\n                                 var style_element = output_document.querySelector(\"style#hide-\" + result_class);\n                                 var input_element = element.querySelector(\"input\");\n                                 if (!style_element && !input_element.checked) {\n                                     style_element = output_document.createElementNS(xhtml_ns, \"style\");\n                                     style_element.id = \"hide-\" + result_class;\n                                     style_element.textContent = \"table#results > tbody > tr.overall-\"+result_class+\"{display:none}\";\n                                     output_document.body.appendChild(style_element);\n                                 } else if (style_element && input_element.checked) {\n                                     style_element.parentNode.removeChild(style_element);\n                                 }\n                             });\n                });\n\n        // This use of innerHTML plus manual escaping is not recommended in\n        // general, but is necessary here for performance.  Using textContent\n        // on each individual <td> adds tens of seconds of execution time for\n        // large test suites (tens of thousands of tests).\n        function escape_html(s)\n        {\n            return s.replace(/\\&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#39;\");\n        }\n\n        function has_assertions()\n        {\n            for (var i = 0; i < tests.length; i++) {\n                if (tests[i].properties.hasOwnProperty(\"assert\")) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function get_assertion(test)\n        {\n            if (test.properties.hasOwnProperty(\"assert\")) {\n                if (Array.isArray(test.properties.assert)) {\n                    return test.properties.assert.join(' ');\n                }\n                return test.properties.assert;\n            }\n            return '';\n        }\n\n        var asserts_run_by_test = new Map();\n        asserts_run.forEach(assert => {\n            if (!asserts_run_by_test.has(assert.test)) {\n                asserts_run_by_test.set(assert.test, []);\n            }\n            asserts_run_by_test.get(assert.test).push(assert);\n        });\n\n        function get_asserts_output(test) {\n            var asserts = asserts_run_by_test.get(test);\n            if (!asserts) {\n                return \"No asserts ran\";\n            }\n            rv = \"<table>\";\n            rv += asserts.map(assert => {\n                var output_fn = \"<strong>\" + escape_html(assert.assert_name) + \"</strong>(\";\n                var prefix_len = output_fn.length;\n                var output_args = assert.args;\n                var output_len = output_args.reduce((prev, current) => prev+current, prefix_len);\n                if (output_len[output_len.length - 1] > 50) {\n                    output_args = output_args.map((x, i) =>\n                    (i > 0 ? \"  \".repeat(prefix_len) : \"\" )+ x + (i < output_args.length - 1 ? \",\\n\" : \"\"));\n                } else {\n                    output_args = output_args.map((x, i) => x + (i < output_args.length - 1 ? \", \" : \"\"));\n                }\n                output_fn += escape_html(output_args.join(\"\"));\n                output_fn += ')';\n                var output_location;\n                if (assert.stack) {\n                    output_location = assert.stack.split(\"\\n\", 1)[0].replace(/@?\\w+:\\/\\/[^ \"\\/]+(?::\\d+)?/g, \" \");\n                }\n                return \"<tr class='overall-\" +\n                    status_class(Test.prototype.status_formats[assert.status]) + \"'>\" +\n                    \"<td class='\" +\n                    status_class(Test.prototype.status_formats[assert.status]) + \"'>\" +\n                    Test.prototype.status_formats[assert.status] + \"</td>\" +\n                    \"<td><pre>\" +\n                    output_fn +\n                    (output_location ? \"\\n\" + escape_html(output_location) : \"\") +\n                    \"</pre></td></tr>\";\n            }\n            ).join(\"\\n\");\n            rv += \"</table>\";\n            return rv;\n        }\n\n        log.appendChild(document.createElementNS(xhtml_ns, \"section\"));\n        var assertions = has_assertions();\n        var html = \"<h2>Details</h2><table id='results' \" + (assertions ? \"class='assertions'\" : \"\" ) + \">\" +\n            \"<thead><tr><th>Result</th><th>Test Name</th>\" +\n            (assertions ? \"<th>Assertion</th>\" : \"\") +\n            \"<th>Message</th></tr></thead>\" +\n            \"<tbody>\";\n        for (var i = 0; i < tests.length; i++) {\n            var test = tests[i];\n            html += '<tr class=\"overall-' +\n                status_class(test.format_status()) +\n                '\">' +\n                '<td class=\"' +\n                status_class(test.format_status()) +\n                '\">' +\n                test.format_status() +\n                \"</td><td>\" +\n                escape_html(test.name) +\n                \"</td><td>\" +\n                (assertions ? escape_html(get_assertion(test)) + \"</td><td>\" : \"\") +\n                escape_html(test.message ? tests[i].message : \" \") +\n                (tests[i].stack ? \"<pre>\" +\n                 escape_html(tests[i].stack) +\n                 \"</pre>\": \"\");\n            if (!(test instanceof RemoteTest)) {\n                 html += \"<details><summary>Asserts run</summary>\" + get_asserts_output(test) + \"</details>\"\n            }\n            html += \"</td></tr>\";\n        }\n        html += \"</tbody></table>\";\n        try {\n            log.lastChild.innerHTML = html;\n        } catch (e) {\n            log.appendChild(document.createElementNS(xhtml_ns, \"p\"))\n               .textContent = \"Setting innerHTML for the log threw an exception.\";\n            log.appendChild(document.createElementNS(xhtml_ns, \"pre\"))\n               .textContent = html;\n        }\n\n        window.dispatchEvent(new CustomEvent('extension_log', {detail: {type: \"DOWNLOAD\", content: \"\", ts: Date.now()}}))\n    };\n\n    /*\n     * Template code\n     *\n     * A template is just a JavaScript structure. An element is represented as:\n     *\n     * [tag_name, {attr_name:attr_value}, child1, child2]\n     *\n     * the children can either be strings (which act like text nodes), other templates or\n     * functions (see below)\n     *\n     * A text node is represented as\n     *\n     * [\"{text}\", value]\n     *\n     * String values have a simple substitution syntax; ${foo} represents a variable foo.\n     *\n     * It is possible to embed logic in templates by using a function in a place where a\n     * node would usually go. The function must either return part of a template or null.\n     *\n     * In cases where a set of nodes are required as output rather than a single node\n     * with children it is possible to just use a list\n     * [node1, node2, node3]\n     *\n     * Usage:\n     *\n     * render(template, substitutions) - take a template and an object mapping\n     * variable names to parameters and return either a DOM node or a list of DOM nodes\n     *\n     * substitute(template, substitutions) - take a template and variable mapping object,\n     * make the variable substitutions and return the substituted template\n     *\n     */\n\n    function is_single_node(template)\n    {\n        return typeof template[0] === \"string\";\n    }\n\n    function substitute(template, substitutions)\n    {\n        if (typeof template === \"function\") {\n            var replacement = template(substitutions);\n            if (!replacement) {\n                return null;\n            }\n\n            return substitute(replacement, substitutions);\n        }\n\n        if (is_single_node(template)) {\n            return substitute_single(template, substitutions);\n        }\n\n        return filter(map(template, function(x) {\n                              return substitute(x, substitutions);\n                          }), function(x) {return x !== null;});\n    }\n\n    function substitute_single(template, substitutions)\n    {\n        var substitution_re = /\\$\\{([^ }]*)\\}/g;\n\n        function do_substitution(input) {\n            var components = input.split(substitution_re);\n            var rv = [];\n            for (var i = 0; i < components.length; i += 2) {\n                rv.push(components[i]);\n                if (components[i + 1]) {\n                    rv.push(String(substitutions[components[i + 1]]));\n                }\n            }\n            return rv;\n        }\n\n        function substitute_attrs(attrs, rv)\n        {\n            rv[1] = {};\n            for (var name in template[1]) {\n                if (attrs.hasOwnProperty(name)) {\n                    var new_name = do_substitution(name).join(\"\");\n                    var new_value = do_substitution(attrs[name]).join(\"\");\n                    rv[1][new_name] = new_value;\n                }\n            }\n        }\n\n        function substitute_children(children, rv)\n        {\n            for (var i = 0; i < children.length; i++) {\n                if (children[i] instanceof Object) {\n                    var replacement = substitute(children[i], substitutions);\n                    if (replacement !== null) {\n                        if (is_single_node(replacement)) {\n                            rv.push(replacement);\n                        } else {\n                            extend(rv, replacement);\n                        }\n                    }\n                } else {\n                    extend(rv, do_substitution(String(children[i])));\n                }\n            }\n            return rv;\n        }\n\n        var rv = [];\n        rv.push(do_substitution(String(template[0])).join(\"\"));\n\n        if (template[0] === \"{text}\") {\n            substitute_children(template.slice(1), rv);\n        } else {\n            substitute_attrs(template[1], rv);\n            substitute_children(template.slice(2), rv);\n        }\n\n        return rv;\n    }\n\n    function make_dom_single(template, doc)\n    {\n        var output_document = doc || document;\n        var element;\n        if (template[0] === \"{text}\") {\n            element = output_document.createTextNode(\"\");\n            for (var i = 1; i < template.length; i++) {\n                element.data += template[i];\n            }\n        } else {\n            element = output_document.createElementNS(xhtml_ns, template[0]);\n            for (var name in template[1]) {\n                if (template[1].hasOwnProperty(name)) {\n                    element.setAttribute(name, template[1][name]);\n                }\n            }\n            for (var i = 2; i < template.length; i++) {\n                if (template[i] instanceof Object) {\n                    var sub_element = make_dom(template[i]);\n                    element.appendChild(sub_element);\n                } else {\n                    var text_node = output_document.createTextNode(template[i]);\n                    element.appendChild(text_node);\n                }\n            }\n        }\n\n        return element;\n    }\n\n    function make_dom(template, substitutions, output_document)\n    {\n        if (is_single_node(template)) {\n            return make_dom_single(template, output_document);\n        }\n\n        return map(template, function(x) {\n                       return make_dom_single(x, output_document);\n                   });\n    }\n\n    function render(template, substitutions, output_document)\n    {\n        return make_dom(substitute(template, substitutions), output_document);\n    }\n\n    /*\n     * Utility functions\n     */\n    function assert(expected_true, function_name, description, error, substitutions)\n    {\n        if (expected_true !== true && false) {\n            var msg = make_message(function_name, description,\n                                   error, substitutions);\n            throw new AssertionError(msg);\n        }\n    }\n\n    /**\n     * @class\n     * Exception type that represents a failing assert.\n     *\n     * @param {string} message - Error message.\n     */\n    function AssertionError(message)\n    {\n        if (typeof message == \"string\") {\n            message = sanitize_unpaired_surrogates(message);\n        }\n        this.message = message;\n        this.stack = get_stack();\n    }\n    expose(AssertionError, \"AssertionError\");\n\n    AssertionError.prototype = Object.create(Error.prototype);\n\n    const get_stack = function() {\n        var stack = new Error().stack;\n\n        // 'Error.stack' is not supported in all browsers/versions\n        if (!stack) {\n            return \"(Stack trace unavailable)\";\n        }\n\n        var lines = stack.split(\"\\n\");\n\n        // Create a pattern to match stack frames originating within testharness.js.  These include the\n        // script URL, followed by the line/col (e.g., '/resources/testharness.js:120:21').\n        // Escape the URL per http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n        // in case it contains RegExp characters.\n        var script_url = get_script_url();\n        var re_text = script_url ? script_url.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') : \"\\\\btestharness.js\";\n        var re = new RegExp(re_text + \":\\\\d+:\\\\d+\");\n\n        // Some browsers include a preamble that specifies the type of the error object.  Skip this by\n        // advancing until we find the first stack frame originating from testharness.js.\n        var i = 0;\n        while (!re.test(lines[i]) && i < lines.length) {\n            i++;\n        }\n\n        // Then skip the top frames originating from testharness.js to begin the stack at the test code.\n        while (re.test(lines[i]) && i < lines.length) {\n            i++;\n        }\n\n        // Paranoid check that we didn't skip all frames.  If so, return the original stack unmodified.\n        if (i >= lines.length) {\n            return stack;\n        }\n\n        return lines.slice(i).join(\"\\n\");\n    }\n\n    function OptionalFeatureUnsupportedError(message)\n    {\n        AssertionError.call(this, message);\n    }\n    OptionalFeatureUnsupportedError.prototype = Object.create(AssertionError.prototype);\n    expose(OptionalFeatureUnsupportedError, \"OptionalFeatureUnsupportedError\");\n\n    function make_message(function_name, description, error, substitutions)\n    {\n        for (var p in substitutions) {\n            if (substitutions.hasOwnProperty(p)) {\n                substitutions[p] = format_value(substitutions[p]);\n            }\n        }\n        var node_form = substitute([\"{text}\", \"${function_name}: ${description}\" + error],\n                                   merge({function_name:function_name,\n                                          description:(description?description + \" \":\"\")},\n                                          substitutions));\n        return node_form.slice(1).join(\"\");\n    }\n\n    function filter(array, callable, thisObj) {\n        var rv = [];\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                var pass = callable.call(thisObj, array[i], i, array);\n                if (pass) {\n                    rv.push(array[i]);\n                }\n            }\n        }\n        return rv;\n    }\n\n    function map(array, callable, thisObj)\n    {\n        var rv = [];\n        rv.length = array.length;\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                rv[i] = callable.call(thisObj, array[i], i, array);\n            }\n        }\n        return rv;\n    }\n\n    function extend(array, items)\n    {\n        Array.prototype.push.apply(array, items);\n    }\n\n    function forEach(array, callback, thisObj)\n    {\n        for (var i = 0; i < array.length; i++) {\n            if (array.hasOwnProperty(i)) {\n                callback.call(thisObj, array[i], i, array);\n            }\n        }\n    }\n\n    /**\n     * Immediately invoke a \"iteratee\" function with a series of values in\n     * parallel and invoke a final \"done\" function when all of the \"iteratee\"\n     * invocations have signaled completion.\n     *\n     * If all callbacks complete synchronously (or if no callbacks are\n     * specified), the ``done_callback`` will be invoked synchronously. It is the\n     * responsibility of the caller to ensure asynchronicity in cases where\n     * that is desired.\n     *\n     * @param {array} value Zero or more values to use in the invocation of\n     *                      ``iter_callback``\n     * @param {function} iter_callback A function that will be invoked\n     *                                 once for each of the values min\n     *                                 ``value``. Two arguments will\n     *                                 be available in each\n     *                                 invocation: the value from\n     *                                 ``value`` and a function that\n     *                                 must be invoked to signal\n     *                                 completion\n     * @param {function} done_callback A function that will be invoked after\n     *                                 all operations initiated by the\n     *                                 ``iter_callback`` function have signaled\n     *                                 completion\n     */\n    function all_async(values, iter_callback, done_callback)\n    {\n        var remaining = values.length;\n\n        if (remaining === 0) {\n            done_callback();\n        }\n\n        forEach(values,\n                function(element) {\n                    var invoked = false;\n                    var elDone = function() {\n                        if (invoked) {\n                            return;\n                        }\n\n                        invoked = true;\n                        remaining -= 1;\n\n                        if (remaining === 0) {\n                            done_callback();\n                        }\n                    };\n\n                    iter_callback(element, elDone);\n                });\n    }\n\n    function merge(a,b)\n    {\n        var rv = {};\n        var p;\n        for (p in a) {\n            rv[p] = a[p];\n        }\n        for (p in b) {\n            rv[p] = b[p];\n        }\n        return rv;\n    }\n\n    function expose(object, name)\n    {\n        var components = name.split(\".\");\n        var target = global_scope;\n        for (var i = 0; i < components.length - 1; i++) {\n            if (!(components[i] in target)) {\n                target[components[i]] = {};\n            }\n            target = target[components[i]];\n        }\n        target[components[components.length - 1]] = object;\n    }\n\n    function is_same_origin(w) {\n        try {\n            'random_prop' in w;\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /** Returns the 'src' URL of the first <script> tag in the page to include the file 'testharness.js'. */\n    function get_script_url()\n    {\n        if (!('document' in global_scope)) {\n            return undefined;\n        }\n\n        var scripts = document.getElementsByTagName(\"script\");\n        for (var i = 0; i < scripts.length; i++) {\n            var src;\n            if (scripts[i].src) {\n                src = scripts[i].src;\n            } else if (scripts[i].href) {\n                //SVG case\n                src = scripts[i].href.baseVal;\n            }\n\n            var matches = src && src.match(/^(.*\\/|)testharness\\.js$/);\n            if (matches) {\n                return src;\n            }\n        }\n        return undefined;\n    }\n\n    /** Returns the <title> or filename or \"Untitled\" */\n    function get_title()\n    {\n        if ('document' in global_scope) {\n            //Don't use document.title to work around an Opera/Presto bug in XHTML documents\n            var title = document.getElementsByTagName(\"title\")[0];\n            if (title && title.firstChild && title.firstChild.data) {\n                return title.firstChild.data;\n            }\n        }\n        if ('META_TITLE' in global_scope && META_TITLE) {\n            return META_TITLE;\n        }\n        if ('location' in global_scope && 'pathname' in location) {\n            return location.pathname.substring(location.pathname.lastIndexOf('/') + 1, location.pathname.indexOf('.'));\n        }\n        return \"Untitled\";\n    }\n\n    /**\n     * Setup globals\n     */\n\n    var tests = new Tests();\n\n    if (global_scope.addEventListener) {\n        var error_handler = function(error, message, stack) {\n            var optional_unsupported = error instanceof OptionalFeatureUnsupportedError;\n            if (tests.file_is_test) {\n                var test = tests.tests[0];\n                if (test.phase >= test.phases.HAS_RESULT) {\n                    return;\n                }\n                var status = optional_unsupported ? test.PRECONDITION_FAILED : test.FAIL;\n                test.set_status(status, message, stack);\n                test.phase = test.phases.HAS_RESULT;\n            } else if (!tests.allow_uncaught_exception) {\n                var status = optional_unsupported ? tests.status.PRECONDITION_FAILED : tests.status.ERROR;\n                tests.status.status = status;\n                tests.status.message = message;\n                tests.status.stack = stack;\n            }\n\n            // Do not transition to the \"complete\" phase if the test has been\n            // configured to allow uncaught exceptions. This gives the test an\n            // opportunity to define subtests based on the exception reporting\n            // behavior.\n            if (!tests.allow_uncaught_exception) {\n                done();\n            }\n        };\n\n        addEventListener(\"error\", function(e) {\n            var message = e.message;\n            var stack;\n            if (e.error && e.error.stack) {\n                stack = e.error.stack;\n            } else {\n                stack = e.filename + \":\" + e.lineno + \":\" + e.colno;\n            }\n            error_handler(e.error, message, stack);\n        }, false);\n\n        addEventListener(\"unhandledrejection\", function(e) {\n            var message;\n            if (e.reason && e.reason.message) {\n                message = \"Unhandled rejection: \" + e.reason.message;\n            } else {\n                message = \"Unhandled rejection\";\n            }\n            var stack;\n            if (e.reason && e.reason.stack) {\n                stack = e.reason.stack;\n            }\n            error_handler(e.reason, message, stack);\n        }, false);\n    }\n\n    test_environment.on_tests_ready();\n\n    /**\n     * Stylesheet\n     */\n     var stylesheetContent = \"\\\nhtml {\\\n    font-family:DejaVu Sans, Bitstream Vera Sans, Arial, Sans;\\\n}\\\n\\\n#log .warning,\\\n#log .warning a {\\\n  color: black;\\\n  background: yellow;\\\n}\\\n\\\n#log .error,\\\n#log .error a {\\\n  color: white;\\\n  background: red;\\\n}\\\n\\\nsection#summary {\\\n    margin-bottom:1em;\\\n}\\\n\\\ntable#results {\\\n    border-collapse:collapse;\\\n    table-layout:fixed;\\\n    width:100%;\\\n}\\\n\\\ntable#results > thead > tr > th:first-child,\\\ntable#results > tbody > tr > td:first-child {\\\n    width:8em;\\\n}\\\n\\\ntable#results > thead > tr > th:last-child,\\\ntable#results > thead > tr > td:last-child {\\\n    width:50%;\\\n}\\\n\\\ntable#results.assertions > thead > tr > th:last-child,\\\ntable#results.assertions > tbody > tr > td:last-child {\\\n    width:35%;\\\n}\\\n\\\ntable#results > thead > > tr > th {\\\n    padding:0;\\\n    padding-bottom:0.5em;\\\n    border-bottom:medium solid black;\\\n}\\\n\\\ntable#results > tbody > tr> td {\\\n    padding:1em;\\\n    padding-bottom:0.5em;\\\n    border-bottom:thin solid black;\\\n}\\\n\\\n.pass {\\\n    color:green;\\\n}\\\n\\\n.fail {\\\n    color:red;\\\n}\\\n\\\ntr.timeout {\\\n    color:red;\\\n}\\\n\\\ntr.notrun {\\\n    color:blue;\\\n}\\\n\\\ntr.optionalunsupported {\\\n    color:blue;\\\n}\\\n\\\n.ok {\\\n    color:green;\\\n}\\\n\\\n.error {\\\n    color:red;\\\n}\\\n\\\n.pass, .fail, .timeout, .notrun, .optionalunsupported .ok, .timeout, .error {\\\n    font-variant:small-caps;\\\n}\\\n\\\ntable#results span {\\\n    display:block;\\\n}\\\n\\\ntable#results span.expected {\\\n    font-family:DejaVu Sans Mono, Bitstream Vera Sans Mono, Monospace;\\\n    white-space:pre;\\\n}\\\n\\\ntable#results span.actual {\\\n    font-family:DejaVu Sans Mono, Bitstream Vera Sans Mono, Monospace;\\\n    white-space:pre;\\\n}\\\n\";\n\n})(self);\n// vim: set expandtab shiftwidth=4 tabstop=4:\n"},{"url":"https://web-platform.test:8443/common/security-features/resources/common.sub.js","request_start":1696742320.6837335,"response_start":1696742320.6895897,"request_end":1696742320.684742,"response_end":1696742320.690999,"ts":1696742320.6913574,"body":"/**\n * @fileoverview Utilities for mixed-content in web-platform-tests.\n * @author burnik@google.com (Kristijan Burnik)\n * Disclaimer: Some methods of other authors are annotated in the corresponding\n *     method's JSDoc.\n */\n\n// ===============================================================\n// Types\n// ===============================================================\n// Objects of the following types are used to represent what kind of\n// subresource requests should be sent with what kind of policies,\n// from what kind of possibly nested source contexts.\n// The objects are represented as JSON objects (not JavaScript/Python classes\n// in a strict sense) to be passed between JavaScript/Python code.\n//\n// See also common/security-features/Types.md for high-level description.\n\n/**\n  @typedef PolicyDelivery\n  @type {object}\n  Referrer policy etc. can be applied/delivered in several ways.\n  A PolicyDelivery object specifies what policy is delivered and how.\n\n  @property {string} deliveryType\n    Specifies how the policy is delivered.\n    The valid deliveryType are:\n\n     \"attr\"\n        [A] DOM attributes e.g. referrerPolicy.\n\n      \"rel-noref\"\n        [A] <link rel=\"noreferrer\"> (referrer-policy only).\n\n      \"http-rp\"\n        [B] HTTP response headers.\n\n      \"meta\"\n        [B] <meta> elements.\n\n  @property {string} key\n  @property {string} value\n    Specifies what policy to be delivered. The valid keys are:\n\n      \"referrerPolicy\"\n        Referrer Policy\n        https://w3c.github.io/webappsec-referrer-policy/\n        Valid values are those listed in\n        https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n        (except that \"\" is represented as null/None)\n\n  A PolicyDelivery can be specified in several ways:\n\n  - (for [A]) Associated with an individual subresource request and\n    specified in `Subresource.policies`,\n    e.g. referrerPolicy attributes of DOM elements.\n    This is handled in invokeRequest().\n\n  - (for [B]) Associated with an nested environmental settings object and\n    specified in `SourceContext.policies`,\n    e.g. HTTP referrer-policy response headers of HTML/worker scripts.\n    This is handled in server-side under /common/security-features/scope/.\n\n  - (for [B]) Associated with the top-level HTML document.\n    This is handled by the generators.d\n*/\n\n/**\n  @typedef Subresource\n  @type {object}\n  A Subresource represents how a subresource request is sent.\n\n  @property{SubresourceType} subresourceType\n    How the subresource request is sent,\n    e.g. \"img-tag\" for sending a request via <img src>.\n    See the keys of `subresourceMap` for valid values.\n\n  @property{string} url\n    subresource's URL.\n    Typically this is constructed by getRequestURLs() below.\n\n  @property{PolicyDelivery} policyDeliveries\n    Policies delivered specific to the subresource request.\n*/\n\n/**\n  @typedef SourceContext\n  @type {object}\n\n  @property {string} sourceContextType\n    Kind of the source context to be used.\n    Valid values are the keys of `sourceContextMap` below.\n\n  @property {Array<PolicyDelivery>} policyDeliveries\n    A list of PolicyDelivery applied to the source context.\n*/\n\n// ===============================================================\n// General utility functions\n// ===============================================================\n\nfunction timeoutPromise(t, ms) {\n  return new Promise(resolve => { t.step_timeout(resolve, ms); });\n}\n\n/**\n * Normalizes the target port for use in a URL. For default ports, this is the\n *     empty string (omitted port), otherwise it's a colon followed by the port\n *     number. Ports 80, 443 and an empty string are regarded as default ports.\n * @param {number} targetPort The port to use\n * @return {string} The port portion for using as part of a URL.\n */\nfunction getNormalizedPort(targetPort) {\n  return ([80, 443, \"\"].indexOf(targetPort) >= 0) ? \"\" : \":\" + targetPort;\n}\n\n/**\n * Creates a GUID.\n *     See: https://en.wikipedia.org/wiki/Globally_unique_identifier\n *     Original author: broofa (http://www.broofa.com/)\n *     Sourced from: http://stackoverflow.com/a/2117523/4949715\n * @return {string} A pseudo-random GUID.\n */\nfunction guid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Initiates a new XHR via GET.\n * @param {string} url The endpoint URL for the XHR.\n * @param {string} responseType Optional - how should the response be parsed.\n *     Default is \"json\".\n *     See: https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype\n * @return {Promise} A promise wrapping the success and error events.\n */\nfunction xhrRequest(url, responseType) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = responseType || \"json\";\n\n    xhr.addEventListener(\"error\", function() {\n      reject(Error(\"Network Error\"));\n    });\n\n    xhr.addEventListener(\"load\", function() {\n      if (xhr.status != 200)\n        reject(Error(xhr.statusText));\n      else\n        resolve(xhr.response);\n    });\n\n    xhr.send();\n  });\n}\n\n/**\n * Sets attributes on a given DOM element.\n * @param {DOMElement} element The element on which to set the attributes.\n * @param {object} An object with keys (serving as attribute names) and values.\n */\nfunction setAttributes(el, attrs) {\n  attrs = attrs || {}\n  for (var attr in attrs) {\n    if (attr !== 'src')\n      el.setAttribute(attr, attrs[attr]);\n  }\n  // Workaround for Chromium: set <img>'s src attribute after all other\n  // attributes to ensure the policy is applied.\n  for (var attr in attrs) {\n    if (attr === 'src')\n      el.setAttribute(attr, attrs[attr]);\n  }\n}\n\n/**\n * Binds to success and error events of an object wrapping them into a promise\n *     available through {@code element.eventPromise}. The success event\n *     resolves and error event rejects.\n * This method adds event listeners, and then removes all the added listeners\n * when one of listened event is fired.\n * @param {object} element An object supporting events on which to bind the\n *     promise.\n * @param {string} resolveEventName [=\"load\"] The event name to bind resolve to.\n * @param {string} rejectEventName [=\"error\"] The event name to bind reject to.\n */\nfunction bindEvents(element, resolveEventName, rejectEventName) {\n  element.eventPromise =\n      bindEvents2(element, resolveEventName, element, rejectEventName);\n}\n\n// Returns a promise wrapping success and error events of objects.\n// This is a variant of bindEvents that can accept separate objects for each\n// events and two events to reject, and doesn't set `eventPromise`.\n//\n// When `resolveObject`'s `resolveEventName` event (default: \"load\") is\n// fired, the promise is resolved with the event.\n//\n// When `rejectObject`'s `rejectEventName` event (default: \"error\") or\n// `rejectObject2`'s `rejectEventName2` event (default: \"error\") is\n// fired, the promise is rejected.\n//\n// `rejectObject2` is optional.\nfunction bindEvents2(resolveObject, resolveEventName, rejectObject, rejectEventName, rejectObject2, rejectEventName2) {\n  return new Promise(function(resolve, reject) {\n    const actualResolveEventName = resolveEventName || \"load\";\n    const actualRejectEventName = rejectEventName || \"error\";\n    const actualRejectEventName2 = rejectEventName2 || \"error\";\n\n    const resolveHandler = function(event) {\n      cleanup();\n      resolve(event);\n    };\n\n    const rejectHandler = function(event) {\n      // Chromium starts propagating errors from worker.onerror to\n      // window.onerror. This handles the uncaught exceptions in tests.\n      event.preventDefault();\n      cleanup();\n      reject(event);\n    };\n\n    const cleanup = function() {\n      resolveObject.removeEventListener(actualResolveEventName, resolveHandler);\n      rejectObject.removeEventListener(actualRejectEventName, rejectHandler);\n      if (rejectObject2) {\n        rejectObject2.removeEventListener(actualRejectEventName2, rejectHandler);\n      }\n    };\n\n    resolveObject.addEventListener(actualResolveEventName, resolveHandler);\n    rejectObject.addEventListener(actualRejectEventName, rejectHandler);\n    if (rejectObject2) {\n      rejectObject2.addEventListener(actualRejectEventName2, rejectHandler);\n    }\n  });\n}\n\n/**\n * Creates a new DOM element.\n * @param {string} tagName The type of the DOM element.\n * @param {object} attrs A JSON with attributes to apply to the element.\n * @param {DOMElement} parent Optional - an existing DOM element to append to\n *     If not provided, the returned element will remain orphaned.\n * @param {boolean} doBindEvents Optional - Whether to bind to load and error\n *     events and provide the promise wrapping the events via the element's\n *     {@code eventPromise} property. Default value evaluates to false.\n * @return {DOMElement} The newly created DOM element.\n */\nfunction createElement(tagName, attrs, parentNode, doBindEvents) {\n  var element = document.createElement(tagName);\n\n  if (doBindEvents) {\n    bindEvents(element);\n    if (element.tagName == \"IFRAME\" && !('srcdoc' in attrs || 'src' in attrs)) {\n      // If we're loading a frame, ensure we spin the event loop after load to\n      // paper over the different event timing in Gecko vs Blink/WebKit\n      // see https://github.com/whatwg/html/issues/4965\n      element.eventPromise = element.eventPromise.then(() => {\n        return new Promise(resolve => setTimeout(resolve, 0))\n      });\n    }\n  }\n  // We set the attributes after binding to events to catch any\n  // event-triggering attribute changes. E.g. form submission.\n  //\n  // But be careful with images: unlike other elements they will start the load\n  // as soon as the attr is set, even if not in the document yet, and sometimes\n  // complete it synchronously, so the append doesn't have the effect we want.\n  // So for images, we want to set the attrs after appending, whereas for other\n  // elements we want to do it before appending.\n  var isImg = (tagName == \"img\");\n  if (!isImg)\n    setAttributes(element, attrs);\n\n  if (parentNode)\n    parentNode.appendChild(element);\n\n  if (isImg)\n    setAttributes(element, attrs);\n\n  return element;\n}\n\nfunction createRequestViaElement(tagName, attrs, parentNode) {\n  return createElement(tagName, attrs, parentNode, true).eventPromise;\n}\n\nfunction wrapResult(server_data) {\n  if (typeof(server_data) === \"string\") {\n    throw server_data;\n  }\n  return {\n    referrer: server_data.headers.referer,\n    headers: server_data.headers\n  }\n}\n\n// ===============================================================\n// Subresources\n// ===============================================================\n\n/**\n  @typedef RequestResult\n  @type {object}\n  Represents the result of sending an request.\n  All properties are optional. See the comments for\n  requestVia*() and invokeRequest() below to see which properties are set.\n\n  @property {Array<Object<string, string>>} headers\n    HTTP request headers sent to server.\n  @property {string} referrer - Referrer.\n  @property {string} location - The URL of the subresource.\n  @property {string} sourceContextUrl\n    the URL of the global object where the actual request is sent.\n*/\n\n/**\n  requestVia*(url, additionalAttributes) functions send a subresource\n  request from the current environment settings object.\n\n  @param {string} url\n    The URL of the subresource.\n  @param {Object<string, string>} additionalAttributes\n    Additional attributes set to DOM elements\n    (element-initiated requests only).\n\n  @returns {Promise} that are resolved with a RequestResult object\n  on successful requests.\n\n  - Category 1:\n      `headers`: set.\n      `referrer`: set via `document.referrer`.\n      `location`: set via `document.location`.\n      See `template/document.html.template`.\n  - Category 2:\n      `headers`: set.\n      `referrer`: set to `headers.referer` by `wrapResult()`.\n      `location`: not set.\n  - Category 3:\n      All the keys listed above are NOT set.\n  `sourceContextUrl` is not set here.\n\n  -------------------------------- -------- --------------------------\n  Function name                    Category Used in\n                                            -------- ------- ---------\n                                            referrer mixed-  upgrade-\n                                            policy   content insecure-\n                                            policy   content request\n  -------------------------------- -------- -------- ------- ---------\n  requestViaAnchor                 1        Y        Y       -\n  requestViaArea                   1        Y        Y       -\n  requestViaAudio                  3        -        Y       -\n  requestViaDedicatedWorker        2        Y        Y       Y\n  requestViaFetch                  2        Y        Y       -\n  requestViaForm                   2        -        Y       -\n  requestViaIframe                 1        Y        Y       -\n  requestViaImage                  2        Y        Y       -\n  requestViaLinkPrefetch           3        -        Y       -\n  requestViaLinkStylesheet         3        -        Y       -\n  requestViaObject                 3        -        Y       -\n  requestViaPicture                3        -        Y       -\n  requestViaScript                 2        Y        Y       -\n  requestViaSendBeacon             3        -        Y       -\n  requestViaSharedWorker           2        Y        Y       Y\n  requestViaVideo                  3        -        Y       -\n  requestViaWebSocket              3        -        Y       -\n  requestViaWorklet                3        -        Y       Y\n  requestViaXhr                    2        Y        Y       -\n  -------------------------------- -------- -------- ------- ---------\n*/\n\n/**\n * Creates a new iframe, binds load and error events, sets the src attribute and\n *     appends it to {@code document.body} .\n * @param {string} url The src for the iframe.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaIframe(url, additionalAttributes) {\n  const iframe = createElement(\n      \"iframe\",\n      Object.assign({\"src\": url}, additionalAttributes),\n      document.body,\n      false);\n  return bindEvents2(window, \"message\", iframe, \"error\", window, \"error\")\n      .then(event => {\n          if (event.source !== iframe.contentWindow)\n            return Promise.reject(new Error('Unexpected event.source'));\n          return event.data;\n        });\n}\n\n/**\n * Creates a new image, binds load and error events, sets the src attribute and\n *     appends it to {@code document.body} .\n * @param {string} url The src for the image.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaImage(url, additionalAttributes) {\n  const img = createElement(\n      \"img\",\n      // crossOrigin attribute is added to read the pixel data of the response.\n      Object.assign({\"src\": url, \"crossOrigin\": \"Anonymous\"}, additionalAttributes),\n      document.body, true);\n  return img.eventPromise.then(() => wrapResult(decodeImageData(img)));\n}\n\n// Helper for requestViaImage().\nfunction decodeImageData(img) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext('2d');\n  context.drawImage(img, 0, 0);\n  var imgData = context.getImageData(0, 0, img.clientWidth, img.clientHeight);\n  const rgba = imgData.data;\n\n  let decodedBytes = new Uint8ClampedArray(rgba.length);\n  let decodedLength = 0;\n\n  for (var i = 0; i + 12 <= rgba.length; i += 12) {\n    // A single byte is encoded in three pixels. 8 pixel octets (among\n    // 9 octets = 3 pixels * 3 channels) are used to encode 8 bits,\n    // the most significant bit first, where `0` and `255` in pixel values\n    // represent `0` and `1` in bits, respectively.\n    // This encoding is used to avoid errors due to different color spaces.\n    const bits = [];\n    for (let j = 0; j < 3; ++j) {\n      bits.push(rgba[i + j * 4 + 0]);\n      bits.push(rgba[i + j * 4 + 1]);\n      bits.push(rgba[i + j * 4 + 2]);\n      // rgba[i + j * 4 + 3]: Skip alpha channel.\n    }\n    // The last one element is not used.\n    bits.pop();\n\n    // Decode a single byte.\n    let byte = 0;\n    for (let j = 0; j < 8; ++j) {\n      byte <<= 1;\n      if (bits[j] >= 128)\n        byte |= 1;\n    }\n\n    // Zero is the string terminator.\n    if (byte == 0)\n      break;\n\n    decodedBytes[decodedLength++] = byte;\n  }\n\n  // Remove trailing nulls from data.\n  decodedBytes = decodedBytes.subarray(0, decodedLength);\n  var string_data = (new TextDecoder(\"ascii\")).decode(decodedBytes);\n\n  return JSON.parse(string_data);\n}\n\n/**\n * Initiates a new XHR GET request to provided URL.\n * @param {string} url The endpoint URL for the XHR.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaXhr(url) {\n  return xhrRequest(url).then(result => wrapResult(result));\n}\n\n/**\n * Initiates a new GET request to provided URL via the Fetch API.\n * @param {string} url The endpoint URL for the Fetch.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaFetch(url) {\n  return fetch(url)\n    .then(res => res.json())\n    .then(j => wrapResult(j));\n}\n\nfunction dedicatedWorkerUrlThatFetches(url) {\n  return `data:text/javascript,\n    fetch('${url}')\n      .then(r => r.json())\n      .then(j => postMessage(j))\n      .catch((e) => postMessage(e.message));`;\n}\n\nfunction workerUrlThatImports(url, additionalAttributes) {\n  let csp = \"\";\n  if (additionalAttributes && additionalAttributes.contentSecurityPolicy) {\n    csp=`&contentSecurityPolicy=${additionalAttributes.contentSecurityPolicy}`;\n  }\n  return `/common/security-features/subresource/static-import.py` +\n      `?import_url=${encodeURIComponent(url)}${csp}`;\n}\n\nfunction workerDataUrlThatImports(url) {\n  return `data:text/javascript,import '${url}';`;\n}\n\n/**\n * Creates a new Worker, binds message and error events wrapping them into.\n *     {@code worker.eventPromise} and posts an empty string message to start\n *     the worker.\n * @param {string} url The endpoint URL for the worker script.\n * @param {object} options The options for Worker constructor.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaDedicatedWorker(url, options) {\n  var worker;\n  try {\n    worker = new Worker(url, options);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  worker.postMessage('');\n  return bindEvents2(worker, \"message\", worker, \"error\")\n    .then(event => wrapResult(event.data));\n}\n\nfunction requestViaSharedWorker(url, options) {\n  var worker;\n  try {\n    worker = new SharedWorker(url, options);\n  } catch(e) {\n    return Promise.reject(e);\n  }\n  const promise = bindEvents2(worker.port, \"message\", worker, \"error\")\n    .then(event => wrapResult(event.data));\n  worker.port.start();\n  return promise;\n}\n\n// Returns a reference to a worklet object corresponding to a given type.\nfunction get_worklet(type) {\n  if (type == 'animation')\n    return CSS.animationWorklet;\n  if (type == 'layout')\n    return CSS.layoutWorklet;\n  if (type == 'paint')\n    return CSS.paintWorklet;\n  if (type == 'audio')\n    return new OfflineAudioContext(2,44100*40,44100).audioWorklet;\n\n  throw new Error('unknown worklet type is passed.');\n}\n\nfunction requestViaWorklet(type, url) {\n  try {\n    return get_worklet(type).addModule(url);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Creates a navigable element with the name `navigableElementName`\n * (<a>, <area>, or <form>) under `parentNode`, and\n * performs a navigation by `trigger()` (e.g. clicking <a>).\n * To avoid navigating away from the current execution context,\n * a target attribute is set to point to a new helper iframe.\n * @param {string} navigableElementName\n * @param {object} additionalAttributes The attributes of the navigable element.\n * @param {DOMElement} parentNode\n * @param {function(DOMElement} trigger A callback called after the navigable\n * element is inserted and should trigger navigation using the element.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaNavigable(navigableElementName, additionalAttributes,\n                             parentNode, trigger) {\n  const name = guid();\n\n  const iframe =\n    createElement(\"iframe\", {\"name\": name, \"id\": name}, parentNode, false);\n\n  const navigable = createElement(\n      navigableElementName,\n      Object.assign({\"target\": name}, additionalAttributes),\n      parentNode, false);\n\n  const promise =\n    bindEvents2(window, \"message\", iframe, \"error\", window, \"error\")\n      .then(event => {\n          if (event.source !== iframe.contentWindow)\n            return Promise.reject(new Error('Unexpected event.source'));\n          return event.data;\n        });\n  trigger(navigable);\n  return promise;\n}\n\n/**\n * Creates a new anchor element, appends it to {@code document.body} and\n *     performs the navigation.\n * @param {string} url The URL to navigate to.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaAnchor(url, additionalAttributes) {\n  return requestViaNavigable(\n      \"a\",\n      Object.assign({\"href\": url, \"innerHTML\": \"Link to resource\"},\n                    additionalAttributes),\n      document.body, a => a.click());\n}\n\n/**\n * Creates a new area element, appends it to {@code document.body} and performs\n *     the navigation.\n * @param {string} url The URL to navigate to.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaArea(url, additionalAttributes) {\n  // TODO(kristijanburnik): Append to map and add image.\n  return requestViaNavigable(\n      \"area\",\n      Object.assign({\"href\": url}, additionalAttributes),\n      document.body, area => area.click());\n}\n\n/**\n * Creates a new script element, sets the src to url, and appends it to\n *     {@code document.body}.\n * @param {string} url The src URL.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaScript(url, additionalAttributes) {\n  const script = createElement(\n      \"script\",\n      Object.assign({\"src\": url}, additionalAttributes),\n      document.body,\n      false);\n\n  return bindEvents2(window, \"message\", script, \"error\", window, \"error\")\n    .then(event => wrapResult(event.data));\n}\n\n/**\n * Creates a new script element that performs a dynamic import to `url`, and\n * appends the script element to {@code document.body}.\n * @param {string} url The src URL.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaDynamicImport(url, additionalAttributes) {\n  const scriptUrl = `data:text/javascript,import(\"${url}\");`;\n  const script = createElement(\n      \"script\",\n      Object.assign({\"src\": scriptUrl}, additionalAttributes),\n      document.body,\n      false);\n\n  return bindEvents2(window, \"message\", script, \"error\", window, \"error\")\n    .then(event => wrapResult(event.data));\n}\n\n/**\n * Creates a new form element, sets attributes, appends it to\n *     {@code document.body} and submits the form.\n * @param {string} url The URL to submit to.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaForm(url, additionalAttributes) {\n  return requestViaNavigable(\n      \"form\",\n      Object.assign({\"action\": url, \"method\": \"POST\"}, additionalAttributes),\n      document.body, form => form.submit());\n}\n\n/**\n * Creates a new link element for a stylesheet, binds load and error events,\n *     sets the href to url and appends it to {@code document.head}.\n * @param {string} url The URL for a stylesheet.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaLinkStylesheet(url) {\n  return createRequestViaElement(\"link\",\n                                 {\"rel\": \"stylesheet\", \"href\": url},\n                                 document.head);\n}\n\n/**\n * Creates a new link element for a prefetch, binds load and error events, sets\n *     the href to url and appends it to {@code document.head}.\n * @param {string} url The URL of a resource to prefetch.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaLinkPrefetch(url) {\n  var link = document.createElement('link');\n  if (link.relList && link.relList.supports && link.relList.supports(\"prefetch\")) {\n    return createRequestViaElement(\"link\",\n                                   {\"rel\": \"prefetch\", \"href\": url},\n                                   document.head);\n  } else {\n    return Promise.reject(\"This browser does not support 'prefetch'.\");\n  }\n}\n\n/**\n * Initiates a new beacon request.\n * @param {string} url The URL of a resource to prefetch.\n * @return {Promise} The promise for success/error events.\n */\nasync function requestViaSendBeacon(url) {\n  function wait(ms) {\n    return new Promise(resolve => step_timeout(resolve, ms));\n  }\n  if (!navigator.sendBeacon(url)) {\n    // If mixed-content check fails, it should return false.\n    throw new Error('sendBeacon() fails.');\n  }\n  // We don't have a means to see the result of sendBeacon() request\n  // for sure. Let's wait for a while and let the generic test function\n  // ask the server for the result.\n  await wait(500);\n  return 'allowed';\n}\n\n/**\n * Creates a new media element with a child source element, binds loadeddata and\n *     error events, sets attributes and appends to document.body.\n * @param {string} type The type of the media element (audio/video/picture).\n * @param {object} media_attrs The attributes for the media element.\n * @param {object} source_attrs The attributes for the child source element.\n * @return {DOMElement} The newly created media element.\n */\nfunction createMediaElement(type, media_attrs, source_attrs) {\n  var mediaElement = createElement(type, {});\n\n  var sourceElement = createElement(\"source\", {});\n\n  mediaElement.eventPromise = new Promise(function(resolve, reject) {\n    mediaElement.addEventListener(\"loadeddata\", function (e) {\n      resolve(e);\n    });\n\n    // Safari doesn't fire an `error` event when blocking mixed content.\n    mediaElement.addEventListener(\"stalled\", function(e) {\n      reject(e);\n    });\n\n    sourceElement.addEventListener(\"error\", function(e) {\n      reject(e);\n    });\n  });\n\n  setAttributes(mediaElement, media_attrs);\n  setAttributes(sourceElement, source_attrs);\n\n  mediaElement.appendChild(sourceElement);\n  document.body.appendChild(mediaElement);\n\n  return mediaElement;\n}\n\n/**\n * Creates a new video element, binds loadeddata and error events, sets\n *     attributes and source URL and appends to {@code document.body}.\n * @param {string} url The URL of the video.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaVideo(url) {\n  return createMediaElement(\"video\",\n                            {},\n                            {\"src\": url}).eventPromise;\n}\n\n/**\n * Creates a new audio element, binds loadeddata and error events, sets\n *     attributes and source URL and appends to {@code document.body}.\n * @param {string} url The URL of the audio.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaAudio(url) {\n  return createMediaElement(\"audio\",\n                            {},\n                            {\"type\": \"audio/wav\", \"src\": url}).eventPromise;\n}\n\n/**\n * Creates a new picture element, binds loadeddata and error events, sets\n *     attributes and source URL and appends to {@code document.body}. Also\n *     creates new image element appending it to the picture\n * @param {string} url The URL of the image for the source and image elements.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaPicture(url) {\n  var picture = createMediaElement(\"picture\", {}, {\"srcset\": url,\n                                                \"type\": \"image/png\"});\n  return createRequestViaElement(\"img\", {\"src\": url}, picture);\n}\n\n/**\n * Creates a new object element, binds load and error events, sets the data to\n *     url, and appends it to {@code document.body}.\n * @param {string} url The data URL.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaObject(url) {\n  return createRequestViaElement(\"object\", {\"data\": url, \"type\": \"text/html\"}, document.body);\n}\n\n/**\n * Creates a new WebSocket pointing to {@code url} and sends a message string\n * \"echo\". The {@code message} and {@code error} events are triggering the\n * returned promise resolve/reject events.\n * @param {string} url The URL for WebSocket to connect to.\n * @return {Promise} The promise for success/error events.\n */\nfunction requestViaWebSocket(url) {\n  return new Promise(function(resolve, reject) {\n    var websocket = new WebSocket(url);\n\n    websocket.addEventListener(\"message\", function(e) {\n      resolve(e.data);\n    });\n\n    websocket.addEventListener(\"open\", function(e) {\n      websocket.send(\"echo\");\n    });\n\n    websocket.addEventListener(\"error\", function(e) {\n      reject(e)\n    });\n  })\n  .then(data => {\n      return JSON.parse(data);\n    });\n}\n\n/**\n  @typedef SubresourceType\n  @type {string}\n\n  Represents how a subresource is sent.\n  The keys of `subresourceMap` below are the valid values.\n*/\n\n// Subresource paths and invokers.\nconst subresourceMap = {\n  \"a-tag\": {\n    path: \"/common/security-features/subresource/document.py\",\n    invoker: requestViaAnchor,\n  },\n  \"area-tag\": {\n    path: \"/common/security-features/subresource/document.py\",\n    invoker: requestViaArea,\n  },\n  \"audio-tag\": {\n    path: \"/common/security-features/subresource/audio.py\",\n    invoker: requestViaAudio,\n  },\n  \"beacon\": {\n    path: \"/common/security-features/subresource/empty.py\",\n    invoker: requestViaSendBeacon,\n  },\n  \"fetch\": {\n    path: \"/common/security-features/subresource/xhr.py\",\n    invoker: requestViaFetch,\n  },\n  \"form-tag\": {\n    path: \"/common/security-features/subresource/document.py\",\n    invoker: requestViaForm,\n  },\n  \"iframe-tag\": {\n    path: \"/common/security-features/subresource/document.py\",\n    invoker: requestViaIframe,\n  },\n  \"img-tag\": {\n    path: \"/common/security-features/subresource/image.py\",\n    invoker: requestViaImage,\n  },\n  \"link-css-tag\": {\n    path: \"/common/security-features/subresource/empty.py\",\n    invoker: requestViaLinkStylesheet,\n  },\n  \"link-prefetch-tag\": {\n    path: \"/common/security-features/subresource/empty.py\",\n    invoker: requestViaLinkPrefetch,\n  },\n  \"object-tag\": {\n    path: \"/common/security-features/subresource/empty.py\",\n    invoker: requestViaObject,\n  },\n  \"picture-tag\": {\n    path: \"/common/security-features/subresource/image.py\",\n    invoker: requestViaPicture,\n  },\n  \"script-tag\": {\n    path: \"/common/security-features/subresource/script.py\",\n    invoker: requestViaScript,\n  },\n  \"script-tag-dynamic-import\": {\n    path: \"/common/security-features/subresource/script.py\",\n    invoker: requestViaDynamicImport,\n  },\n  \"video-tag\": {\n    path: \"/common/security-features/subresource/video.py\",\n    invoker: requestViaVideo,\n  },\n  \"xhr\": {\n    path: \"/common/security-features/subresource/xhr.py\",\n    invoker: requestViaXhr,\n  },\n\n  \"worker-classic\": {\n    path: \"/common/security-features/subresource/worker.py\",\n    invoker: url => requestViaDedicatedWorker(url),\n  },\n  \"worker-module\": {\n    path: \"/common/security-features/subresource/worker.py\",\n    invoker: url => requestViaDedicatedWorker(url, {type: \"module\"}),\n  },\n  \"worker-import\": {\n    path: \"/common/security-features/subresource/worker.py\",\n    invoker: (url, additionalAttributes) =>\n        requestViaDedicatedWorker(workerUrlThatImports(url, additionalAttributes), {type: \"module\"}),\n  },\n  \"worker-import-data\": {\n    path: \"/common/security-features/subresource/worker.py\",\n    invoker: url =>\n        requestViaDedicatedWorker(workerDataUrlThatImports(url), {type: \"module\"}),\n  },\n  \"sharedworker-classic\": {\n    path: \"/common/security-features/subresource/shared-worker.py\",\n    invoker: url => requestViaSharedWorker(url),\n  },\n  \"sharedworker-module\": {\n    path: \"/common/security-features/subresource/shared-worker.py\",\n    invoker: url => requestViaSharedWorker(url, {type: \"module\"}),\n  },\n  \"sharedworker-import\": {\n    path: \"/common/security-features/subresource/shared-worker.py\",\n    invoker: (url, additionalAttributes) =>\n        requestViaSharedWorker(workerUrlThatImports(url, additionalAttributes), {type: \"module\"}),\n  },\n  \"sharedworker-import-data\": {\n    path: \"/common/security-features/subresource/shared-worker.py\",\n    invoker: url =>\n        requestViaSharedWorker(workerDataUrlThatImports(url), {type: \"module\"}),\n  },\n\n  \"websocket\": {\n    path: \"/stash_responder\",\n    invoker: requestViaWebSocket,\n  },\n};\nfor (const workletType of ['animation', 'audio', 'layout', 'paint']) {\n  subresourceMap[`worklet-${workletType}`] = {\n      path: \"/common/security-features/subresource/worker.py\",\n      invoker: url => requestViaWorklet(workletType, url)\n    };\n  subresourceMap[`worklet-${workletType}-import-data`] = {\n      path: \"/common/security-features/subresource/worker.py\",\n      invoker: url =>\n          requestViaWorklet(workletType, workerDataUrlThatImports(url))\n    };\n}\n\n/**\n  @typedef RedirectionType\n  @type {string}\n\n  Represents what redirects should occur to the subresource request\n  after initial request.\n  See preprocess_redirection() in\n  /common/security-features/subresource/subresource.py for valid values.\n*/\n\n/**\n  Construct subresource (and related) origin.\n\n  @param {string} originType\n  @returns {object} the origin of the subresource.\n*/\nfunction getSubresourceOrigin(originType) {\n  const httpProtocol = \"http\";\n  const httpsProtocol = \"https\";\n  const wsProtocol = \"ws\";\n  const wssProtocol = \"wss\";\n\n  const sameOriginHost = \"web-platform.test\";\n  const crossOriginHost = \"www1.web-platform.test\";\n\n  // These values can evaluate to either empty strings or a \":port\" string.\n  const httpPort = getNormalizedPort(parseInt(\"8000\", 10));\n  const httpsRawPort = parseInt(\"8443\", 10);\n  const httpsPort = getNormalizedPort(httpsRawPort);\n  const wsPort = getNormalizedPort(parseInt(\"8888\", 10));\n  const wssRawPort = parseInt(\"8889\", 10);\n  const wssPort = getNormalizedPort(wssRawPort);\n\n  /**\n    @typedef OriginType\n    @type {string}\n\n    Represents the origin of the subresource request URL.\n    The keys of `originMap` below are the valid values.\n\n    Note that there can be redirects from the specified origin\n    (see RedirectionType), and thus the origin of the subresource\n    response URL might be different from what is specified by OriginType.\n  */\n  const originMap = {\n    \"same-https\": httpsProtocol + \"://\" + sameOriginHost + httpsPort,\n    \"same-http\": httpProtocol + \"://\" + sameOriginHost + httpPort,\n    \"cross-https\": httpsProtocol + \"://\" + crossOriginHost + httpsPort,\n    \"cross-http\": httpProtocol + \"://\" + crossOriginHost + httpPort,\n    \"same-wss\": wssProtocol + \"://\" + sameOriginHost + wssPort,\n    \"same-ws\": wsProtocol + \"://\" + sameOriginHost + wsPort,\n    \"cross-wss\": wssProtocol + \"://\" + crossOriginHost + wssPort,\n    \"cross-ws\": wsProtocol + \"://\" + crossOriginHost + wsPort,\n\n    // The following origin types are used for upgrade-insecure-requests tests:\n    // These rely on some unintuitive cleverness due to WPT's test setup:\n    // 'Upgrade-Insecure-Requests' does not upgrade the port number,\n    // so we use URLs in the form `http://[domain]:[https-port]`,\n    // which will be upgraded to `https://[domain]:[https-port]`.\n    // If the upgrade fails, the load will fail, as we don't serve HTTP over\n    // the secure port.\n    \"same-http-downgrade\":\n        httpProtocol + \"://\" + sameOriginHost + \":\" + httpsRawPort,\n    \"cross-http-downgrade\":\n        httpProtocol + \"://\" + crossOriginHost + \":\" + httpsRawPort,\n    \"same-ws-downgrade\":\n        wsProtocol + \"://\" + sameOriginHost + \":\" + wssRawPort,\n    \"cross-ws-downgrade\":\n        wsProtocol + \"://\" + crossOriginHost + \":\" + wssRawPort,\n  };\n\n  return originMap[originType];\n}\n\n/**\n  Construct subresource (and related) URLs.\n\n  @param {SubresourceType} subresourceType\n  @param {OriginType} originType\n  @param {RedirectionType} redirectionType\n  @returns {object} with following properties:\n    {string} testUrl\n      The subresource request URL.\n    {string} announceUrl\n    {string} assertUrl\n      The URLs to be used for detecting whether `testUrl` is actually sent\n      to the server.\n      1. Fetch `announceUrl` first,\n      2. then possibly fetch `testUrl`, and\n      3. finally fetch `assertUrl`.\n         The fetch result of `assertUrl` should indicate whether\n         `testUrl` is actually sent to the server or not.\n*/\nfunction getRequestURLs(subresourceType, originType, redirectionType) {\n  const key = guid();\n  const value = guid();\n\n  // We use the same stash path for both HTTP/S and WS/S stash requests.\n  const stashPath = encodeURIComponent(\"/mixed-content\");\n\n  const stashEndpoint = \"/common/security-features/subresource/xhr.py?key=\" +\n                        key + \"&path=\" + stashPath;\n  return {\n    testUrl:\n      getSubresourceOrigin(originType) +\n        subresourceMap[subresourceType].path +\n        \"?redirection=\" + encodeURIComponent(redirectionType) +\n        \"&action=purge&key=\" + key +\n        \"&path=\" + stashPath,\n    announceUrl: stashEndpoint + \"&action=put&value=\" + value,\n    assertUrl: stashEndpoint + \"&action=take\",\n  };\n}\n\n// ===============================================================\n// Source Context\n// ===============================================================\n// Requests can be sent from several source contexts,\n// such as the main documents, iframes, workers, or so,\n// possibly nested, and possibly with <meta>/http headers added.\n// invokeRequest() and invokeFrom*() functions handles\n// SourceContext-related setup in client-side.\n\n/**\n  invokeRequest() invokes a subresource request\n  (specified as `subresource`)\n  from a (possibly nested) environment settings object\n  (specified as `sourceContextList`).\n\n  For nested contexts, invokeRequest() calls an invokeFrom*() function\n  that creates a nested environment settings object using\n  /common/security-features/scope/, which calls invokeRequest()\n  again inside the nested environment settings object.\n  This cycle continues until all specified\n  nested environment settings object are created, and\n  finally invokeRequest() calls a requestVia*() function to start the\n  subresource request from the inner-most environment settings object.\n\n  @param {Subresource} subresource\n  @param {Array<SourceContext>} sourceContextList\n\n  @returns {Promise} A promise that is resolved with an RequestResult object.\n  `sourceContextUrl` is always set. For whether other properties are set,\n  see the comments for requestVia*() above.\n*/\nfunction invokeRequest(subresource, sourceContextList) {\n  if (sourceContextList.length === 0) {\n    // No further nested global objects. Send the subresource request here.\n\n    const additionalAttributes = {};\n    /** @type {PolicyDelivery} policyDelivery */\n    for (const policyDelivery of (subresource.policyDeliveries || [])) {\n      // Depending on the delivery method, extend the subresource element with\n      // these attributes.\n      if (policyDelivery.deliveryType === \"attr\") {\n        additionalAttributes[policyDelivery.key] = policyDelivery.value;\n      } else if (policyDelivery.deliveryType === \"rel-noref\") {\n        additionalAttributes[\"rel\"] = \"noreferrer\";\n      } else if (policyDelivery.deliveryType === \"http-rp\") {\n        additionalAttributes[policyDelivery.key] = policyDelivery.value;\n      } else if (policyDelivery.deliveryType === \"meta\") {\n        additionalAttributes[policyDelivery.key] = policyDelivery.value;\n      }\n    }\n\n    return subresourceMap[subresource.subresourceType].invoker(\n        subresource.url,\n        additionalAttributes)\n      .then(result => Object.assign(\n          {sourceContextUrl: location.toString()},\n          result));\n  }\n\n  // Defines invokers for each valid SourceContext.sourceContextType.\n  const sourceContextMap = {\n    \"srcdoc\": { // <iframe srcdoc></iframe>\n      invoker: invokeFromIframe,\n    },\n    \"iframe\": { // <iframe src=\"same-origin-URL\"></iframe>\n      invoker: invokeFromIframe,\n    },\n    \"iframe-blank\": { // <iframe></iframe>\n      invoker: invokeFromIframe,\n    },\n    \"worker-classic\": {\n      // Classic dedicated worker loaded from same-origin.\n      invoker: invokeFromWorker.bind(undefined, \"worker\", false, {}),\n    },\n    \"worker-classic-data\": {\n      // Classic dedicated worker loaded from data: URL.\n      invoker: invokeFromWorker.bind(undefined, \"worker\", true, {}),\n    },\n    \"worker-module\": {\n      // Module dedicated worker loaded from same-origin.\n      invoker: invokeFromWorker.bind(undefined, \"worker\", false, {type: 'module'}),\n    },\n    \"worker-module-data\": {\n      // Module dedicated worker loaded from data: URL.\n      invoker: invokeFromWorker.bind(undefined, \"worker\", true, {type: 'module'}),\n    },\n    \"sharedworker-classic\": {\n      // Classic shared worker loaded from same-origin.\n      invoker: invokeFromWorker.bind(undefined, \"sharedworker\", false, {}),\n    },\n    \"sharedworker-classic-data\": {\n      // Classic shared worker loaded from data: URL.\n      invoker: invokeFromWorker.bind(undefined, \"sharedworker\", true, {}),\n    },\n    \"sharedworker-module\": {\n      // Module shared worker loaded from same-origin.\n      invoker: invokeFromWorker.bind(undefined, \"sharedworker\", false, {type: 'module'}),\n    },\n    \"sharedworker-module-data\": {\n      // Module shared worker loaded from data: URL.\n      invoker: invokeFromWorker.bind(undefined, \"sharedworker\", true, {type: 'module'}),\n    },\n  };\n\n  return sourceContextMap[sourceContextList[0].sourceContextType].invoker(\n      subresource, sourceContextList);\n}\n\n// Quick hack to expose invokeRequest when common.sub.js is loaded either\n// as a classic or module script.\nself.invokeRequest = invokeRequest;\n\n/**\n  invokeFrom*() functions are helper functions with the same parameters\n  and return values as invokeRequest(), that are tied to specific types\n  of top-most environment settings objects.\n  For example, invokeFromIframe() is the helper function for the cases where\n  sourceContextList[0] is an iframe.\n*/\n\n/**\n  @param {string} workerType\n    \"worker\" (for dedicated worker) or \"sharedworker\".\n  @param {boolean} isDataUrl\n    true if the worker script is loaded from data: URL.\n    Otherwise, the script is loaded from same-origin.\n  @param {object} workerOptions\n    The `options` argument for Worker constructor.\n\n  Other parameters and return values are the same as those of invokeRequest().\n*/\nfunction invokeFromWorker(workerType, isDataUrl, workerOptions,\n                          subresource, sourceContextList) {\n  const currentSourceContext = sourceContextList[0];\n  let workerUrl =\n    \"/common/security-features/scope/worker.py?policyDeliveries=\" +\n    encodeURIComponent(JSON.stringify(\n        currentSourceContext.policyDeliveries || []));\n  if (workerOptions.type === 'module') {\n    workerUrl += \"&type=module\";\n  }\n\n  let promise;\n  if (isDataUrl) {\n    promise = fetch(workerUrl)\n      .then(r => r.text())\n      .then(source => {\n          return 'data:text/javascript;base64,' + btoa(source);\n        });\n  } else {\n    promise = Promise.resolve(workerUrl);\n  }\n\n  return promise\n    .then(url => {\n      if (workerType === \"worker\") {\n        const worker = new Worker(url, workerOptions);\n        worker.postMessage({subresource: subresource,\n                            sourceContextList: sourceContextList.slice(1)});\n        return bindEvents2(worker, \"message\", worker, \"error\", window, \"error\");\n      } else if (workerType === \"sharedworker\") {\n        const worker = new SharedWorker(url, workerOptions);\n        worker.port.start();\n        worker.port.postMessage({subresource: subresource,\n                                 sourceContextList: sourceContextList.slice(1)});\n        return bindEvents2(worker.port, \"message\", worker, \"error\", window, \"error\");\n      } else {\n        throw new Error('Invalid worker type: ' + workerType);\n      }\n    })\n    .then(event => {\n        if (event.data.error)\n          return Promise.reject(event.data.error);\n        return event.data;\n      });\n}\n\nfunction invokeFromIframe(subresource, sourceContextList) {\n  const currentSourceContext = sourceContextList[0];\n  const frameUrl =\n    \"/common/security-features/scope/document.py?policyDeliveries=\" +\n    encodeURIComponent(JSON.stringify(\n        currentSourceContext.policyDeliveries || []));\n\n  let iframe;\n  let promise;\n  if (currentSourceContext.sourceContextType === 'srcdoc') {\n    promise = fetch(frameUrl)\n      .then(r => r.text())\n      .then(srcdoc => {\n          iframe = createElement(\n              \"iframe\", {srcdoc: srcdoc}, document.body, true);\n          return iframe.eventPromise;\n        });\n  } else if (currentSourceContext.sourceContextType === 'iframe') {\n    iframe = createElement(\"iframe\", {src: frameUrl}, document.body, true);\n    promise = iframe.eventPromise;\n  } else if (currentSourceContext.sourceContextType === 'iframe-blank') {\n    let frameContent;\n    promise = fetch(frameUrl)\n      .then(r => r.text())\n      .then(t => {\n          frameContent = t;\n          iframe = createElement(\"iframe\", {}, document.body, true);\n          return iframe.eventPromise;\n        })\n      .then(() => {\n          // Reinitialize `iframe.eventPromise` with a new promise\n          // that catches the load event for the document.write() below.\n          bindEvents(iframe);\n\n          iframe.contentDocument.write(frameContent);\n          iframe.contentDocument.close();\n          return iframe.eventPromise;\n        });\n  }\n\n  return promise\n    .then(() => {\n        const promise = bindEvents2(\n            window, \"message\", iframe, \"error\", window, \"error\");\n        iframe.contentWindow.postMessage(\n            {subresource: subresource,\n             sourceContextList: sourceContextList.slice(1)},\n            \"*\");\n        return promise;\n      })\n    .then(event => {\n        if (event.data.error)\n          return Promise.reject(event.data.error);\n        return event.data;\n      });\n}\n\n// SanityChecker does nothing in release mode. See sanity-checker.js for debug\n// mode.\nfunction SanityChecker() {}\nSanityChecker.prototype.checkScenario = function() {};\nSanityChecker.prototype.setFailTimeout = function(test, timeout) {};\nSanityChecker.prototype.checkSubresourceResult = function() {};\n"},{"url":"https://web-platform.test:8443/resources/testharnessreport.js","request_start":1696742320.6751544,"response_start":1696742320.7197356,"request_end":1696742320.6762974,"response_end":1696742320.7205834,"ts":1696742320.7207844,"body":"class MessageQueue {\n  constructor() {\n    this.item_id = 0;\n    this._queue = [];\n  }\n\n  push(item) {\n    let cmd_id = this.item_id++;\n    item.id = cmd_id;\n    this._queue.push(item);\n    __wptrunner_process_next_event();\n    return cmd_id;\n  }\n\n  shift() {\n    return this._queue.shift();\n  }\n}\n\nwindow.__wptrunner_testdriver_callback = null;\nwindow.__wptrunner_message_queue = new MessageQueue();\nwindow.__wptrunner_url = null;\n\nwindow.__wptrunner_process_next_event = function() {\n  /* This function handles the next testdriver event. The presence of\n     window.testdriver_callback is used as a switch; when that function\n     is present we are able to handle the next event and when is is not\n     present we must wait. Therefore to drive the event processing, this\n     function must be called in two circumstances:\n       * Every time there is a new event that we may be able to handle\n       * Every time we set the callback function\n     This function unsets the callback, so no further testdriver actions\n     will be run until it is reset, which wptrunner does after it has\n     completed handling the current action.\n   */\n\n  if (!window.__wptrunner_testdriver_callback) {\n    return;\n  }\n  var data = window.__wptrunner_message_queue.shift();\n  if (!data) {\n    return;\n  }\n\n  var payload = undefined;\n\n  switch(data.type) {\n  case \"complete\":\n    var tests = data.tests;\n    var status = data.status;\n\n    var subtest_results = tests.map(function(x) {\n      return [x.name, x.status, x.message, x.stack];\n    });\n    payload = [status.status,\n               status.message,\n               status.stack,\n               subtest_results];\n    clearTimeout(window.__wptrunner_timer);\n    break;\n  case \"action\":\n    payload = data;\n    break;\n  default:\n    return;\n  }\n  var callback = window.__wptrunner_testdriver_callback;\n  window.__wptrunner_testdriver_callback = null;\n  callback([__wptrunner_url, data.type, payload]);\n};\n\n(function() {\n  var props = {output: 1,\n               timeout_multiplier: 1,\n               explicit_timeout: false,\n               debug: false,\n               message_events: [\"completion\"]};\n\n  add_completion_callback(function(tests, harness_status) {\n    __wptrunner_message_queue.push({\n      \"type\": \"complete\",\n      \"tests\": tests,\n      \"status\": harness_status});\n    __wptrunner_process_next_event();\n  });\n  setup(props);\n})();\n\n"},{"url":"https://web-platform.test:8443/mixed-content/generic/test-case.sub.js","request_start":1696742320.688708,"response_start":1696742320.7316003,"request_end":1696742320.6893594,"response_end":1696742320.7324862,"ts":1696742320.732685,"body":"/**\n * @fileoverview Test case for mixed-content in web-platform-tests.\n * @author burnik@google.com (Kristijan Burnik)\n */\n\n/**\n * MixedContentTestCase exercises all the tests for checking browser behavior\n * when resources regarded as mixed-content are requested. A single run covers\n * only a single scenario.\n * @param {object} scenario A JSON describing the test arrangement and\n *     expectation(s). Refer to /mixed-content/spec.src.json for details.\n * @param {string} description The test scenario verbose description.\n * @param {SanityChecker} sanityChecker Instance of an object used to check the\n *     running scenario. Useful in debug mode. See ./sanity-checker.js.\n *     Run {@code ./tools/generate.py -h} for info on test generating modes.\n * @return {object} Object wrapping the start method used to run the test.\n */\nfunction TestCase(scenarios, sanityChecker) {\n  function runTest(scenario) {\n    sanityChecker.checkScenario(scenario, subresourceMap);\n\n    const urls = getRequestURLs(scenario.subresource,\n                                scenario.origin,\n                                scenario.redirection);\n    const checkResult = _ => {\n      // Send request to check if the key has been torn down.\n      return xhrRequest(urls.assertUrl)\n        .then(assertResult => {\n            // Now check if the value has been torn down. If it's still there,\n            // we have blocked the request to mixed-content.\n            assert_equals(assertResult.status, scenario.expectation,\n              \"The resource request should be '\" + scenario.expectation + \"'.\");\n          });\n    };\n\n    /** @type {Subresource} */\n    const subresource = {\n      subresourceType: scenario.subresource,\n      url: urls.testUrl,\n      policyDeliveries: scenario.subresource_policy_deliveries,\n    };\n\n    promise_test(() => {\n      return xhrRequest(urls.announceUrl)\n        // Send out the real resource request.\n        // This should tear down the key if it's not blocked.\n        .then(_ => invokeRequest(subresource, scenario.source_context_list))\n        // We check the key state, regardless of whether the main request\n        // succeeded or failed.\n        .then(checkResult, checkResult);\n      }, scenario.test_description);\n  }  // runTest\n\n  function runTests() {\n    for (const scenario of scenarios) {\n      runTest(scenario);\n    }\n  }\n\n  return {start: runTests};\n}\n"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=put&value=52b61006-143c-4179-ac9a-f34f01167662","request_start":1696742320.7736986,"response_start":1696742320.7913103,"request_end":1696742320.7745354,"response_end":1696742320.7921712,"ts":1696742320.7924683,"body":"{\"status\": \"success\", \"result\": \"2bd8a0db-35ec-4b60-9a80-0ef0699f2855\"}"},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","request_start":1696742320.997527,"response_start":1696742321.0049,"request_end":1696742320.9986107,"response_end":1696742321.0062988,"ts":1696742321.0065563,"body":""},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content","request_start":1696742321.0487115,"response_start":1696742321.0628064,"request_end":1696742321.049654,"response_end":1696742321.0636902,"ts":1696742321.0639503,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=2bd8a0db-35ec-4b60-9a80-0ef0699f2855&path=%2Fmixed-content&action=take","request_start":1696742321.230314,"response_start":1696742321.234853,"request_end":1696742321.2311401,"response_end":1696742321.2355342,"ts":1696742321.2357793,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=put&value=5769c96a-9980-4319-8585-6d2d89fb066d","request_start":1696742321.246735,"response_start":1696742321.2510707,"request_end":1696742321.2474945,"response_end":1696742321.2517104,"ts":1696742321.251964,"body":"{\"status\": \"success\", \"result\": \"0f6926e1-c6c9-410b-b06b-1683a63248e2\"}"},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content","request_start":1696742321.2607882,"response_start":1696742321.2665102,"request_end":1696742321.2615836,"response_end":1696742321.2671938,"ts":1696742321.2674057,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=0f6926e1-c6c9-410b-b06b-1683a63248e2&path=%2Fmixed-content&action=take","request_start":1696742321.3001425,"response_start":1696742321.304943,"request_end":1696742321.3011708,"response_end":1696742321.3061967,"ts":1696742321.3064802,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=put&value=4f2d36bf-89d4-4e0c-ba05-fa1968755251","request_start":1696742321.3384054,"response_start":1696742321.3434725,"request_end":1696742321.339243,"response_end":1696742321.3443162,"ts":1696742321.3446102,"body":"{\"status\": \"success\", \"result\": \"4cd1d0d7-8893-44d3-ba86-f0ca5f615a07\"}"},{"url":"http://www1.web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","request_start":1696742321.3613424,"response_start":1696742321.3677502,"request_end":1696742321.3620784,"response_end":1696742321.368393,"ts":1696742321.3686473,"body":""},{"url":"https://www1.web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content","request_start":1696742321.452069,"response_start":1696742321.4580135,"request_end":1696742321.4529803,"response_end":1696742321.459191,"ts":1696742321.4595115,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=4cd1d0d7-8893-44d3-ba86-f0ca5f615a07&path=%2Fmixed-content&action=take","request_start":1696742321.525737,"response_start":1696742321.5317168,"request_end":1696742321.5264232,"response_end":1696742321.5322762,"ts":1696742321.5325043,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=put&value=89748437-26e9-4ae9-a435-23c29a0c8714","request_start":1696742321.5567372,"response_start":1696742321.5603826,"request_end":1696742321.557289,"response_end":1696742321.5609365,"ts":1696742321.5611448,"body":"{\"status\": \"success\", \"result\": \"404ddbc9-78bf-430e-935c-8645512fc3e3\"}"},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","request_start":1696742321.5715048,"response_start":1696742321.5754547,"request_end":1696742321.572361,"response_end":1696742321.5764134,"ts":1696742321.5766063,"body":""},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?action=purge&key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content","request_start":1696742321.5846207,"response_start":1696742321.5895247,"request_end":1696742321.5851393,"response_end":1696742321.590107,"ts":1696742321.590302,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=404ddbc9-78bf-430e-935c-8645512fc3e3&path=%2Fmixed-content&action=take","request_start":1696742321.637276,"response_start":1696742321.6413765,"request_end":1696742321.6377935,"response_end":1696742321.641961,"ts":1696742321.6421824,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=put&value=aa27c451-1454-42f6-a22c-cb5ecf2b23ca","request_start":1696742321.669583,"response_start":1696742321.673965,"request_end":1696742321.6700912,"response_end":1696742321.674572,"ts":1696742321.6748457,"body":"{\"status\": \"success\", \"result\": \"edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f\"}"},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content","request_start":1696742321.7029676,"response_start":1696742321.7090094,"request_end":1696742321.7037833,"response_end":1696742321.7096314,"ts":1696742321.7098258,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=edd7b7b2-3f20-4e5d-92fe-77e6208e4c3f&path=%2Fmixed-content&action=take","request_start":1696742321.7395704,"response_start":1696742321.7437224,"request_end":1696742321.7400799,"response_end":1696742321.7442691,"ts":1696742321.7444873,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=put&value=4ce00bb6-3f21-4cfd-be4f-e3f43a4589e1","request_start":1696742321.7826638,"response_start":1696742321.7870648,"request_end":1696742321.7832077,"response_end":1696742321.787634,"ts":1696742321.7878516,"body":"{\"status\": \"success\", \"result\": \"8c7f446b-245d-4a5c-b58e-495deb83cef4\"}"},{"url":"http://web-platform.test:8000/common/security-features/subresource/video.py?redirection=swap-scheme&action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","request_start":1696742321.7965949,"response_start":1696742321.8000958,"request_end":1696742321.797139,"response_end":1696742321.8005505,"ts":1696742321.800729,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content","request_start":1696742321.8302698,"response_start":1696742321.8359973,"request_end":1696742321.8307967,"response_end":1696742321.8370929,"ts":1696742321.8373148,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=8c7f446b-245d-4a5c-b58e-495deb83cef4&path=%2Fmixed-content&action=take","request_start":1696742321.8851018,"response_start":1696742321.891207,"request_end":1696742321.8856833,"response_end":1696742321.8917773,"ts":1696742321.892006,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=put&value=e9fd5625-a4b2-4456-b928-ec1244884eca","request_start":1696742321.919776,"response_start":1696742321.9239182,"request_end":1696742321.9202988,"response_end":1696742321.9244685,"ts":1696742321.924685,"body":"{\"status\": \"success\", \"result\": \"3ff92551-6cae-4886-8d93-095f828f10e9\"}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=keep-scheme&action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","request_start":1696742321.956693,"response_start":1696742321.9596505,"request_end":1696742321.957264,"response_end":1696742321.960182,"ts":1696742321.9604135,"body":""},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?action=purge&key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content","request_start":1696742321.9787097,"response_start":1696742321.9841585,"request_end":1696742321.9792879,"response_end":1696742321.984751,"ts":1696742321.9850004,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=3ff92551-6cae-4886-8d93-095f828f10e9&path=%2Fmixed-content&action=take","request_start":1696742322.0649476,"response_start":1696742322.0691144,"request_end":1696742322.0655942,"response_end":1696742322.0697303,"ts":1696742322.069968,"body":"{\"status\": \"allowed\", \"result\": null}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=put&value=10ec93b3-05e7-4504-9710-f4d33d99840e","request_start":1696742322.101451,"response_start":1696742322.107278,"request_end":1696742322.1020446,"response_end":1696742322.1081693,"ts":1696742322.1085112,"body":"{\"status\": \"success\", \"result\": \"e38fbdd2-8840-47d6-a823-36eb5291475d\"}"},{"url":"https://web-platform.test:8443/common/security-features/subresource/video.py?redirection=no-redirect&action=purge&key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content","request_start":1696742322.1392508,"response_start":1696742322.1445735,"request_end":1696742322.1398778,"response_end":1696742322.1451762,"ts":1696742322.1454034,"body":"OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0000\u0000\u0000\u0000ÿ¸ð\u0001@fishead\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000è\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0000\u0000\u0000\u0000àÒA\u0001*theora\u0003\u0002\u0001\u0000\u0014\u0000\u000f\u0000\u0001@\u0000\u0000ð\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000ÀOggS\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0000\u0000\u0000\u0000\u0003Æ\rÆ\u0001\u001e\u0001vorbis\u0000\u0000\u0000\u0000\u0001\"V\u0000\u0000\u0000\u0000\u0000\u0000ìv\u0000\u0000\u0000\u0000\u0000\u0000©\u0001OggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0001\u0000\u0000\u0000öf}g\u0002PPfisbone\u0000,\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000Content-Type: video/theora\r\nfisbone\u0000,\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u0000\"V\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000Content-Type: audio/vorbis\r\nOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0001\u0000\u0000\u0000úUZý\fPÿÿÿÿÿÿÿÿÿÿ?theora#\u0000\u0000\u0000Xiph.Org libTheora I 20081020 3 2 1\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23theora¾Í(÷¹Ík\u0018µ©IJ\u0010sæ1R¤!\b1b\u0010!\b@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011ôád.UI´v\u0012õp´k¢©@H¡ÐGÓ¸Öd0\u0017K%R,F\"\u0010\u0007ÀÐd1\u0016\u0005b0F!\u0010\u0007¡ÀÈ`,\u0015\t ðh0\u0014û\u0017ÖUT\u0014\u0012ÒÑPO\u000f\rÍÌKKJ\n\n\bÈÈÇFFFE\u0005\u0005\u0005\u0005\u0003ÃÃÃÃÃÃÂAAAAAA@!\u0000°¡\u00013ÐÀÀá1££ÃpàÑ\u0001Sá\u0011aÓ5u\u0003á!bS¤FÖtÑ3t\u0005\u0016\u0015Ã\u0014\u0004åvwTÅö'\u0006Fv1\u0011!ö6661!Q¤&6661£66662ô&66666666666666666666666666666666666661\u0001\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0001\u0001AÂ\u0002\u0004\u0001AÂ\u0002\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0001Â\u0002\u0004\u0004\u0004\u0006\u0002\u0002\u0004\u0004\u0004\u0006\b\u0002\u0004\u0004\u0004\u0006\b\b\u0003âü·Ð\r3\u0013¾Bàê½¹f\"ÝG\u001bà?r\"^àØÉ}j©\u001afWbìB\u0004ä`ö¦Kç0ÚÕÆU)^}»äÄ4Ì®ÅØ\u0017È£ÃU¨62^?9w1+£Ú<ûª¤ ÅsTûª¤WcA\u0019ÊiAí\u001euÜàek1·Î\u001fÅx^\tyÛþ\u0013Ó\u000fhó©\"c\u0001uk3)¨5ß\f£û@½\nxØæ] w(=£Î¹M¶»Ø+F\u0004_\u0012Å¢Ö9\u0007Ü\"\u001dÍ¯÷\u0010´bÊÐ\u001b§%r({·IzªJy'JÖl\u0017\u001bÅ\b®ÀÒ@äñCÝºïÿ²cyl\u0014ÙàZuÇ\u0016+1ÀeG#F¢idÚÿêRÜì,>\u000fidÚ<\u0016ð\u0019õt\u000b+\u0002-1äÊÿêRÜÖ^v\u0003j\"ÿì|¾ÜÂv}-°V¸\u0013K&ºbó'wª¤@\u0012kõî^§\u0013Kµ\u0006çY°j\u001bâ#¿8UIJ\u0002èÎ²bQ¯ÂÊÅääÒí#ÎÜ9C¸÷6\u000fô¶¢\u0004W8bõ¬¢ÊÇ/í»j>ÌFaÐý2[\rE(\u0011Â,¬Ýyö¤ó?mB\"\\Øt-2{§\u0005Ì|Hçº©\u0016V/>÷ÀmDÿëÓ<#\u0011H2ánm\u0017\u001dé¼0\u0005õ¬Ô@u\u000f\r¾]P§\u0015­Ï9;DzJ¢i#üÓ#\tó\u000bçW`CùÓ¸¶Åsè\u000554´8r&í\u0012y®F\u001bæ\r\\Ã{IÊìcp\u0011íû¸3Ú%ÎªSè\u0016°Ü\u0007\u0005\u0013{,5öóâ³0rê=2\\ÇÅT­a\u0000}{\u0018\tòn5í\u0017Na\u0016V¹ð±DÞÉ\u001e¬ßðªKâ7þNã4\u0016\nînÀ5&6£Ùd§E¬Âc}BªF\\g\tþ7\u0007\bÂbÚû.Ø®Ò\rËç\t<\u000f\u0015)#w¡û\u0014V±ÄãQ!¹¸f\r(m¯³Kÿ\n\\N1fÑ\u00122BivÖãÎýð}jÊÁD8¸Ë¨*\u0015R\u001d´\u0004Òí&´spÎ\u001bà\u001fZ~z.¬+<ÂvæXð)\u0011(\u0006ÓK¬B¿£Ü¼Zaß#ë\u0015³ò\u0004÷7¨,®¥;÷\u0011fÚË¤Bà¿ß\u0007BðíoÇ&1\u0000ª&L1ò\u0003w\u0007±Z:ù\u000b¹Äe\u0000ÛY´;×~²±U$+^Ï¹\u0003Ñ\u0017~²³¢ù;r0Ä\u001a6ÖlåQBª[Í£mrÆ[¾ÃÂö\n&üEb´-{:>D\u0015)p=\u0018µdÓ:0¿»\rÐ«Zâ4]\u000f%MÿÜîó\u0013&ÔC\u0003:ÅªÈ¹¡Ó°Y=óì-\u000f|áæ[£×Å®4t\u0013K´ÑMFpZ-_\u0001óÛÎ\u0006\t\t[M¯¾ap#¾r¬²¥,Yº>e*ÝC\u0000¹\rë,´¼\tS6ÖM#ÏÇhÑ8}u*Y\u0006S6ÖOcx;D£?\u000e°ámp71q\u0003çü©¨ZqÙí\u00031¤ÍµL_Ybï\u000e\fpE\u001eãr×r¢2\u001bj¦rÐÇ\u000eÝEYb\u001f\u0011É{FèVÔ\ffm®,&´\nì)¨EñÔÉ}º7\n©\u001d_Âs\fy\u001fZ\u0010Ñßè\u0006hmR&Hòô²²ï7\u0014îyÂß(nåxH&¶ºg\u001e\u000fÝ± ²²w½T)|1$\u001bj¤ÙåD-Ü:ô?0\u0015þ+°OÊÕÝ ¨oR\u0003µÑp[ÓïD%äfÚ¥i6LpÿÃê#YXÞ¥(x\bú\u0012/`ÅÛTÍ3ÿ`\u001c§]AoÕ¼X±å*\u0012\u0017¥`6ÔÊfãr{D(¹zùGë+#wÖãÊ~Ï¤\bVVF\u000bÉ4Í¶¸ÝÿQ\u000eÓ¥£Äg!tÅæ\f±4Í¶´[ì )\u001dwb´¤ÿüBâ&þ\nG°QÔ\u0004ì8?Ëá½Æ,ù¬°\"$%m6±÷åëj\u0015R\\eß\u0018&¶ºI*/ø?uë\u0018 Ü¶Åd<Î*¤#$%4¶¹Ñ{8\u0010ùð;e\u0017özãq=Ö+\u0005\u0018ßú~`SPµwfi3meË\b÷aZ\u0017½\u001c}¸ÜèbdÓ6ÚÊ£\u0004£åMD\u0007VXOÛÛx?\u0011¸OÄª\u0004'¿ÚYXï¨Ü\u0005\u0001¶¬g\tËwqúuÀÓ6ÚPË\u001bæ4\u0007'²ý\tU\"'Ö°ï®\u0004\t\u001cJBäëþ÷*¤²²!9ðÛU\f/\\eLýå±¯x¥SëA@\u001bj¤Òg\u001e<ßr\u0007îØ2Oå÷\u0014ÔÃ¨GùW`/ï¨0$\u0012´Û\\òÆ&ï]þ)¨wó«`\u001eÅÊÊÏ7!~^\u0011¶²4Ï+èà,¬¨TÔ\u0011¾\\^\u0019LÓ9FÚãVÑ\u0001æïGó÷ÀFå#éýUHßÈ\bJ;âÅarUãLÛja3,· Þ/Akÿ»ãÂÊÁ*á-36Õ3\u000bç£\u0010#U%(ÍÝõ\u0011\u0001#\nÜÓ0¿ñ¶¦X´Ïå\u000bgðö\u001a©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôä\u001eZ¦ ç?\u0012\tfm¬¹cÝ{\u0011¢¿ç\u000e½\u0007_§$\u0006ÚLÓ9Xá}Õ)xçáDVîXãÕgqÂ)¨ÒÞ| #P4Í¶¦\u00132Æû·\u000fûâÅdÿ:#\u0000Ë\u0016j÷Kú¹YZ>@n\"^¸uØôä¡iüÁ-36Õs\u000bçït\u0015\u0014¼qa\u001a·I~BA¼dÄ@8\u001d\u000683È¶u÷&|k£ý¹Qß¥¼U#xÉ!p:\fpglëîLø×Gûr£¿K+y*ªFñC\u0011\u0000àt\u0018àÏ\"Ù×Üñ®öåG~VòUT©8OÔ\u0000x&i¶²å#\u001c!ñebÞ_z.ì÷\u0005±ÃR®_Ð,®\u0003ÍÂä\fFS4ÌÛYo¿t\u0007óóå*V\u000f¨Öð 8$/J4Í¶¤Ì±ÂîÑ­è,¬åkéü#p¶þ!:?J\u0018LË\u0015æ¶Öê\"SQIä@úz;qÏ¡]À7\u0016±i3\u000bÍµº^¤¡\n'«+¥R\u0001¼\u0000ù2û§Z5ÑþÆ83Ê^]¸QÔd\bQ\u0004¢ëX^L¢s¾ýb°m«\f±iþù\u0012ªJ©@F,¬q¿d®DÊ'6ÕÿÃ,Zf]k\u000búôäOggS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0001\u0000\u0000\u0000ÓÁ\u0001T\u000eKÿÿÿÿÿÿÿÿÿÿÿÿÅ\u0003vorbis\u001d\u0000\u0000\u0000Xiph.Org libVorbis I 20070622\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000ENCODER=ffmpeg2theora-0.23\u0001\u0005vorbis\"BCV\u0001\u0000@\u0000\u0000\u0018B\u0010*\u0005­c:È\u0015!\u0019¢ BÊ)Ç\u001dBÐ!£$C:Æ5Ç\u0018cG¹dBÉÐU\u0000\u0000@\u0000\u0000¤\u001cWPrI-çs£\u0018WÌqè çså gÌq\t%çs9çr1çs£\u0018W\u000er)-çs\u0014Gq§\u0018çs¤\u001cGq¨\u0018çsm1·rÎ9çsæ Rr®5çs¤\u0018g\u000er\u000b%çsÆ gÌqë çs5·ÔrÎ9çsÎ9çsÎ9çs1çsÎ9çsn1ç\u0016s®9çsÎ9ç\u001csÎ9çs 4d\u0015\u0000\u0000\u0000 ¡(â(\u000e\u0010\u001a²\n\u0000È\u0000\u0000\u0010@q\u0014G\u0014K±\u001cËÑ$\r\b\rY\u0005\u0000\u0000\u0001\u0000\b\u0000\u0000 H¤H¥Xfi&z¢(¢*«²iÊ²,Ë²ëº.\u0010\u001a²\n\u0000H\u0000\u0000PQ\u0014Åp\u0014\u0007\b\rY\u0005\u0000d\u0000\u0000\b`(£8äX¥Y\u0007¬\u0002\u0000\u0000\u0000\u0004\u0000\u0000P\fG±\u0014Mñ$Ïò<Ïó<Ïó<Ïó<Ïó<Ïó<Ïó<\r\b\rY\u0005\u0000 \u0000\u0000\u0000(d\u0018\u0003BCV\u0001\u0000@\u0000\u0000\b!\u001a\u0019CR\u0012\\\n\u0016B\u001c\u0011C\u001dBÎC©¥à)%cÒS¬A\b!|ï=÷Þ{ïÐU\u0000\u0000\u0010\u0000\u0000a\u00148Ç$\b!b\u0014'Dq¦ \b!å$XÊyè$\bÝ\u0010B¸{Ë¹÷Þ{ 4d\u0015\u0000\u0000\b\u0000À \u0010B\b!\u0010B\b)¤RH)¦b)Ç\u001csÌ1Ç \f2è N:É¤N:Ê$£Rk)µ\u0014SL±å\u0016c­µÖs¯A)c1Æ\u0018c1Æ\u0018c1Æ\u0018#\b\rY\u0005\u0000\u0000\u0000\u0010\u0006\u0019dA\b!\u0014RH)¦rÌ1Ç\u001c\u0003BCV\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001cER$Gr$G$É,I<Ë³<Ë³<MÔDM\u0015UÕUm×öm_ömßÕeßöeÛÕe]eÝµm]Ö]]×u]×u]×u]×u]×u]×ÐU\u0000\u0004\u0000ä8ä8äH¤H\n\u0010\u001a²\n\u0000\u0001\u0000\u0010\u0000£8ãHäX%Y&igy§y¨\u001e\u0010\u001a²\n\u0000\u0000\u0004\u0000\u0010\u0000\u0000\u0000\u0000\u0000¢(£8$Y¦i§z¢(ªª¦©ªªj¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i¦i\u0002¡!«\u0000\u0000\t\u0000\u0000\u001dÇq\u001cGq\u001cÇq$G$ 4d\u0015\u0000 \u0003\u0000 \u0000\u0000CQ\u001cEr,Ç4K³<ËÓDÏô\\Q6uSWm 4d\u0015\u0000\u0000\b\u0000 \u0000\u0000\u0000\u0000\u0000\u0000Çs<Çs<É<Ës<Ç<IÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4MÓ4M\u0003BCV\u0002\u0000d\u0000\u0000\u0010JN±WF)Æ$´^*¤\u0014Ô{¨bL:í©B\u0006)\u0007¹J!¥ ÓÞ2¥R\f{§BÈ\u0018ê¡1°×ÚsÏ½÷\u001e\b\rY\u0011\u0000D\u0001\u0000\u0000Æ Æ\u0010cÈ1&%\u00121Ç$dR\"çNJ&¥¤VZÌ¤JsNJ'%RZ\u000b©eJk%¦\u0002\u0000\u0000\u0002\u001c\u0000\u0000\u0002,BCV\u0004\u0000Q\u0000\u00001H)¤\u0014RJ1§CJ)ÇcH)årN9Çt\u0010*ç\u0018t\u000eJ¤r9§s\u00122\u0007s\u000eB&\u0000\u0000\u0000\u0007\u0000\u0000\u000b¡Ð\u0015\u0001@\u0000\u0000s1\b\u0011c\u0010B\t)PRªÒAI©RI©ÅRsR:\t)u\u0012R*)ÅXR-¤Tci-×ÒR-Æ[½b-©ÕZZ«¹ÅXs5÷È9JÖ:)­¥ÖjM­ÕÚIi-¤Öbi-ÆÖbÍ)Æ3)­b+©ÅØbË5µsi-×\u0014cÏ)Æk¬¹Ç0­ÕZË9Å{Ì±çs\u000fs:)­uRZK­ÕZ«5ÒZi­ÆZ-Æ[1gRZ,©ÅXZ1Ås-×ÐZ®)ÆS9ÇZ±ö^Z«9Å{­çs06Ç;J¹Öz.­õ^s.BÖÜh-çÔj\u000f*ÆsÎÁØÜ\u0010­åjì=ÅØ{î9\u0018Ûsð­Öà[ÍEÈÐ¹ø¦{0FÕÚÌµ\bs\u0010:è\"tðÉxj.­å\\Zë=Ö\u001a|Í9\bÑZî)ÆÞS½×°½\u0007!ZË=ÅØ1øs0:çbT­ÁÇµ\u0016¡{/Jç ªµ\u0007kP2×\"tðÅè /\u0000\u0000`À\u0001\u0000 À2PhÈ\u0000 N\u0000AÈ9¥\u0018J)\b¡B()UIÈ1'¥RZ\b%µ1\bcR2Ç¤\u0012Z*%´\u0012Ji©ÒZ(¥µZ)µ\u0016C)©RZ+¥´Zª1µVcÄÌ9)cRJ)­RZ«\u001c1(©J))ÅRRsR2è¨t\u0010J*©ÄTRi­¤ÒR)¥ÅRl)ÅT[µRZ,©ÄVRj1µT[1×1)\u0019sR2ç¤RR+¥´9'¥Jæ ¤Rk¥¤\u00143æ¤t\u000eJÊ £RR-¥\u0012S(¥µRl¥¤ÖZµ¦ÔZ-%µVRj±\u0012[1×\u0016KMÖJ*1RZk1æZ1\u0012[))ÆJl­Å[l9RZ,©ÄVJj±Õck±æÔR)µ[l¹ÆSµöZ«5µTck±æX[oµÖ;)­RZ+%ÅZ±ÅXs(%¶Rl¥¤\u0018[l¹¶\u0016c\u000f¡´XJj±¤\u0012ck1æ\u0018[©µZ[l¹¦Ôb­µö\u001c[n=¥\u0016k±æÒR5×ÞcM9\u0015\u0000\u00000à\u0000\u0000\u0010`B\u0019(4d%\u0000\u0010\u0005\u0000\u0000\u0018Ã\u0018c\u0010\u001a¥sNJsÎIÉ\u0010BJs\u0010BH)sNBJ-eÎAH©µPJJ­Å\u0016JI©µ\u0016\u000b\u0000\u0000(p\u0000\u0000\b°ASbqBCV\u0002\u0000Q\u0000\u00001J1\u0006¡1F)ç 4Æ(Å\u0018J)ÆP)ÅsP2ÇPJæs\u0010J\t!RJJ!RJI©\u0000\u0000\u0002\u0007\u0000\u0000\u001b4%\u0016\u0007(4dE\u0000\u0010\u0005\u0000\u0000\u0018c3Î!\n¥ÎR$©£ÖQk(¥\u001aKÆV{ë¹Ó\u001a{m¹7J©ÖkË¹ÕÞiM=·\u001c\u000b\u0000\u0000;p\u0000\u0000;°\u0010\n\rY\t\u0000ä\u0001\u0000\u0010Æ(ÅsÎ\u0019\u0018sÎ9ç\fR9çs1ç\u0010BÅsÎA\b!sÎ9\b¡9ç\u001c\u0010JèPJ)¥tÎA\b¡R:ç RJ)s\u0010J)¥\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@\u001e\u0000\u0000`\fBÎIi­aÌ9\b-ÕØ0Æ\u001cbR¹FÌAH)Æ ;()µ\u0018lðZ9\u0007R5çÞH©µÎ=ÕVsÏ½÷b¬5çÞs/\u0000\u0000wÁ\u0001\u0000ìÀFÍ\tF\n\rY\t\u0000ä\u0001\u0000\u0010\b)ÅsÎ\u0019¥\u0018sÌ9çR1æs1ÆsÎAÅ\u0018cÎ9\u0007!cÌ9ç 1æs\u0010Bès\u000eB\b!tÎ9\u0007!\u0010:ç \u0010B\bs\u0010B\b!\u0002\u0000\n\u001c\u0000\u0000\u0002l\u0014Ù`$¨Ð\u0000@8\u0000\u0000\u0000!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010BèsÎ9çsÎ9çsÎ9çsÎ9'\u0000È·Â\u0001ÀÿÁÆ\u0019VÎ\nG\u000b\rY\t\u0000\u0003\u0000\u0000\nA(¥b\u0010J)%N:)PJ)RJé¤RJ\t¥RJ\b¥RJ\b\u001dRB)¥RJ)¥RJ)¥R:)¥RJ)¥Ê9)¥RJ)¥DÎI)!RJ)¥RJ)¥RJ)¥RJ)¥RJ)¥\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0010B\b!\u0002\u0000¸\u001b\u001c\u0000 \u0012la%é¬p4¸Ð\u0000@H\u0000\u0000 \u0014sJ\b)R¨¢B))¤RJ\n\u0011cÎIê\u001cPR(©Ê9\b¥¤B*!uÎA\u0007%R\t!:è(PR*%Ò9(¥\u0014JJ)BH©tR(%B*!RJH%\u0010J\n¤TJ\n©¤TR\btB'%¤J\n©R*%¥JJ%tRB*)¥\u0010BJ©\u0010JH)¥NRI©¤\u0014B(!RJ%¥JJ!TB\t¥¤R(¡¤TRJ)¥R)\u0000\u0000àÀ\u0001\u0000 À\b:É¨²\b\u001bM¸ð\u0000\u0014\u001a²\u0012\u0000 \u0003\u0000@tÖi§I\"\b1E'\r)Æ µ¤,Ã\u0010Sñ\u0014c9(FC\u000e1ä\u0018\u0017J\b¡b<&CÊPQ¹·Ô9\u0005Å\u0016c|ï±\u0017\u0001\u0000\u0000\b\u0002\u0000\u0004\u0004\u0000\u0018 (\u0001\u0000\u0006\u0007\b#\u0007\u0002\u001d\u0001\u0004\u000em\u0000\b\t\f\n¡ÁA&\u0000<@DH\u0005\u0000\tÒ.\b!t\u0011dñÀ\u00137¸á\u000em\u0010\u0000\u0000\u0000\u0000\u0000\u0010\u0000ð\u0001\u0000P\u0000\u0011\u0011ÑÌUX\\`dhlptx|\u0004\u0000\u0000\u0000\u0000\u0000\b\u0000|\u0000\u0000$\"@DD4s\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@@@\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000@@OggS\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000â\nKr\u0002\u0000\u0000\u0000éS0-\u0001\u0000OggS\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0002\u0000\u0000\u0000ur¨\u0017NF4FH***)*%(+(,%&.'.,*,LQ)S\u001a'è¼¾¹ÎåÕ¦Slñøí¶Q\u001c´\u0016Óy®P³îÍØvØ6\u001ap'ÑÜF?\u000e·ÞfQ¡ÿÅ6ÜIÊû³Q}=ÜìæÖÿ\u0015\u001c?Nw¨ÆÉêÿG<ö'å0éb»·¢\u0006ÜÞ;\u0010\u0012ê.Íl¢\ft\u000b³/\u001aÓ§>SËéÛ³ø¦eZºõê\u0005\u0014r¿/ô¯R]ª\u0004»ò¢\u0005`\u0010í1\u000e\u000e\u0016éééHôQI²*n\u0007¯C¦J°V¨¸°¼oÀp\u000bÑ½\u001a\u0004Ð\u0000\u0004¯BXÓÖ8\u000ee\u001cg\t%\u000fô\u0010ðîEk(}ÌÕ\u0014r)ë1\rYB|çYð\tAØ?øéÎÅ8;ãô2\u0015ÒOý)êêXuCC\"<-ÙÜÄ\u0004­yç²ª#%@¸EwñÓxm\u0016ñ4}z-²ütÝ`÷xe,ßÇ§ù\u0004Csf\\}u¾çl @è{Q\u000f,Ìüx×Úlén\u0011`\u0018\bûlç\u000f\u0000\u001e\u0000\"¨$ØV5\r½è·\u0006rµÆ\u0003\u001cöü\u001f=Æ&¤(¯M\u0013ÀK\u0012\bûlç\u000f\u0000\u001e\u0000ÂQI\u00180ïãÊôeAâ\u0000\u000e8;¥F¡dÑÃÍLjHE\u0000\u001e\u0018ûlç\u000f\u0000\u001e\u0000\t`YüK®m¯òå´r\u0000ú)\u001c;ïSôf+\u001a\bP\u001c¬Ô\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000fZÛe8YQØJÓô\u0001$ªÞ0\r<Ý|\u001b@Pó\u0012+\u0000(ûìà\u000f\u0000\u001e\u0000BTÛ.Úme¨Æ])½gÓ\b\u0000\u0016z9z8«§\u0012ÖÉ¶\u0005\u001d$\bûÜÒ\u001f\u0000<\u0000\u0012\b\tp\u001c÷GiQ`õ¦VD*ÆÁÓ¨D\u0010ýèÏ\u0002ØúKý\u0001\u0018O\n DÅô@YSsx;\u000f\u0002\u0000¢a±,+++Ä¾Hãb4Ò@\u0003\u0018ûlç\u000f\u0000\u001e\u0000J\u0002Jn²îNr\u0014 £P\u0010ùþMö±mú\u0017]ä¡\u0003\bûlç\u000f\u0000\u001e\u0000ÂAÒëÞº!ÏýVÂ©;\u0000X\u0003xúÈJ]È£ë\u0002Z\rë(\u000e\bûlç\u000f\u0000\u001e\u00009È\txðî\"\u00075±½Á\u0004\u0016WPÌ±Q9 :°S{±nÀ[^Ñ\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" QöyREwuí³¼[\r8ôCmÉÐ%&|\u0005èúlê\u000fÀy2\u0000!\u0010R°ÃJf\u001d×qdêDµ5y|Üì<ÙãH,\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001cä¤Ô\u0015à¬}þ\u00162»ôQo) AÏðBÀaíW=è\n3\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0014ÄN[]\u001aRÖ\u000e%ðh/ò\u0005]HÕ¥b²4g\u0001\bûló\u0007\u0000\u000fD%\u0001Ò¯ç{\u0006hóú+¡\u0004\nÅ\u0000?OIÍÖwÅsNmÝ;Ïc)\u000f\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014ò\f±¸R\u0013« Sãø\t¡ð]\"ýmeif(Ç»\u0013ëa\u0001\bûÜÒ\u001f\u0000<\u0000r\u0004øÂ é±áM ùU\fÏEÅé-c\u001e)\u001fvNvP\u0000\u0018ûìà\u000f\u0000\u001e\u0000J\u0014£|Qâ»Ú}/Ú\u0003t ÐÚ[^YJô>¨Ò\u0018¶°LõPó\u0000OggS\u0000\u0000V\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0002\u0000\u0000\u0000ª4\u0006 \u0017\u0011\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \u0000\t¥>¥xê}\u0012»\tôJø0j?\u0005gàñx{¬%`à`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000{\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0003\u0000\u0000\u000074C1-)*#*+%)***',*)*,(,(&+'#OE7GH.+'+++(*),%*-(--*\u0018ûìà\u000f\u0000\u001e\u0000J\u0002¦º2·_\u0017'Z»Vº\u0001\u001c\u0000\u001az'\u0018LO\rÛ\u0000Êó`\u0006\u0018ûlç\u000f\u0000\u001e\u0000ÂA\"\u001eøäRõz¹Iï`\bÖÓïËéÝ)p¿Ýf§6G>\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0017½£\u0000$\bò5;ºðv!;´Ç\u001b{\u001a\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQjìp4A°ýA©Z$\tÀñÞ&¥Åï^Ã\nå[h\u001a\u0000\bûlç\u000f\u0000\u001e\u0000ÂQIû\u0014\u000e|ÅÎ29ùdU·Ñ\u00008k\u0007z\u001enm«öåhH$\u0000\u0018ûÜÎ\u001f\u0000<\u0000@H©ÞåYÛµ&[)xù^jtáq\u000eV\n$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\trE\u000eÐóýþ(¯\u0015=h\u0000÷\u0016:`Õz`Ï \u0015¾Åñ\u0000J\u0000\bûlç\u000f\u0000\u001e\u0000ÂAdÞßÄîª\u000bJT½B(>õ8¦xó¿¼å \u001bÂ\u0000\u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002:@5Üå\u0010÷KÏ^£Kè:ÏÑu¿nè \u001feI\u0013Ú\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000&0\t\b!;,\\\t²Î\u0013ë®\t88¨Ì¾90¹Ú ²H \u000e\u0018ûlç\u000f\u0000\u001e\u0000\t(ðÊÑÏËßÝ\rÒx3¡l`Jxù\t¬VíR÷ ,\bûìà\u000f\u0000\u001e\u0000&HN\"°Ê¥ ßnË7Ry÷À\n\u0010:YØ{Î]û\u000fVj\u000e\u0007\bûlç\u000f\u0000\u001e\u0000ÂA¢LÖ<M\u0010Ú8V¡Ð\u0016\rí¹ËUeÔÃ¹ÆÖëºãKu-X\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004IÂÁ~âÉÛÂ\u000eÐ»\u0011i\u000ebiºÜ´½pÚWz\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u00009Hx\u000fª\u00161Ó\u0010cª\u000e\u0012\u0004¡ìFi¢ªv¿Ñ\u0007í0Gò@\u0001èúló\u0007 <\t@\u000eÀY\n'Õ\\§Oõ8y\u0014\u0002N8Ù\u0013Fx»÷d/\u0004\u0012\u0000\u0018ûlç\u000f\u0000\u001e\u0000(°ÛI÷ÞSäË1\u0004À\u0001\n§Ð¼·Bó\u0016fF\u00038KY\r\u0018ûìà\u000f\u0000\u001e\u0000ÂQI±6yOâÎ¾w5û³¤\u0002À\u001aSã\u0003÷éz4\u0010Ê£\u0002\u0000\bûÜÒ\u001f\u0000<\u0000\u0012$\u0001\u000bÛÌ\\´Ö9(Òj\u00168\"Àºó\u0014ºet°%{Ñ±P\u0000\u0018ûìà\u000f\u0000\u001e\u0000BÄrw£Cj÷Q³\u0014\u0000<\u0017øáLr´F\tdR\f,@\u0002\u0018ûlç\u000f\u0000\u001e\u0000BT\u0012á\u0019äÌz;¥0B§\u0000¤çÙS\u0006äy\u0003íVGo$¢<\u0014¥á\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA¢Ð\u001bY\u0018´\u001di\fåè­hGäò\u0002.Ì[´Ó<\u0000\f«òvó\u0006\u0010\u0010¹ÐÚð:hl04\r 0ÁÂ¦T¼ëÞü2LQI\u0013\u000b\u0013tö\u000f²\u001fáèt¼vãmx-=8Äb\rØ6á~Â¨hEýÄ¿Uj\u001aüÖûÚOÏ×üÚ\u000b}JßâN¾%vÉëô~Nú¤÷Õ\u00014E¶wb©q\u0004ÿû)ZÖàr\u001d>í&\u0013h\b?¾}r¹4O,b\u0010ue¢\rÎÐ¾W;ê\t@÷ñSxÆ\u0012@½?\u0013-5bÁ·èIJh\u0004½ò¢M\u00041¥Å®M-·Må,ûl¼x§ã8\u0006È\tjÚÓu§î»{bÀ$\u0014\u0012ï«¦Xù¦@\u0001\u0004/Ö¢qeMä>äy ê¡´ü<Mõ\u001cEê$\u0014 \"ÆO«-ÃNiþô+¦\u00142h8\u001eÔ\u000b]l\u0012j´z$;×W\b¤\f6´²·\u0017\n\u0004«*[KSu¬Î­Vaþû­V'á¹§YX\u0019qò´¿í\u0007ÕI¶xæÜæ4üå3§\bIÓ5pg¸íêÖ-`*\u001có\u0002¿Xn\u0007¡û\u0000\bûìà\u000f\u0000\u001e\u00009*\tX ¼\u001cgÇ1¿Z°àÍÊ¦\u00078FäóÐË¦ôÿÐêç=\u0010<\u0000øúlç\u000f\u0000\u001e\u0000ÂA\u0012\u0006Ü¶Y\u001eÛ\u0019þ\u0005C³pØq]Åva\u001ch'ïp·\u001e`\u0007\bûÜÒ\u001f\u0000<\u0000 (JÝÎJÛ\u0007Y\u0000¬¾ÄñÃr\u000e«¸ ÏW!@Ö\u0000\bûlç\u000f\u0000\u001e\u0000æ \t@ø®\"Á\u0016¸*¦Ö6\u0014q(\u0002ú\u000eÉO\u0001\u0010Íms\u001e(ûìà\u000f\u0000\u001e\u0000BTy\u0011ÿSð4M÷r®Ð\u0000RU ¿­ûdFÏ<´À:\u0000\u0018ûlç\u000f\u0000\u001e\u00009\u0010\u0012àEgrÐ×3ä\u0016¨.\u001a5àiÖ9åÍ×6õÞóèbé\u0000\bûlç\u000f\u0000\u001e\u0000B\u0010£×Ç}Ã¾!Ïî\u0010\u0000bá°öý¨Ä*USð\f£E&\u0000\u0018ûìà\u000f\u0000\u001e\u0000&H\u0014¤£ Ô\u0014+\u0003lF\u0007¢\u001dññoG\u001b\n{\\Á\u0001\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$M\u001b­\u0015a\u0012À¸¸K'\u0000´\u000e«\u0007[^0\u0012\u000fj,Ý\u0014\u0000\bûlç\u000f\u0000\u001e\u0000ÂAãå¶\rf6Þ-mÑó¡i¸k6¶*<e´íH\u001dí-R!\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0005$\nXô¼RçêÚA¼\u0002Þt²Äkå«#Z{ð{\u0005ØúKý\u00018O\u000e DHJeQø®ÞxTô\u0005Ð\u0001%fºµZñrõí]p\u0014£#\u0000(ûìà\u000f\u0000\u001e\u0000\u0012\u001c$j)T%¯\fûP:e«~´!\u000fðæ}WvÞæ´§\u000bCº?0\u0006\u0000\bûë\"\u0006à\u0001 \t\bé\u0010&oé´Þ\u0007°@×\u001f¥r¥Iãn]·Ey\u0007\u0000\bûlç\u000f\u0000\u001e\u0000&*\t8 Õ\b=Ó¨¯\u0001%N8÷\u0002 3\t\u000e_ç(NÏ~äi,(Z\u0000\u0018ûìà\u000f\u0000\u001e\u00009ÈQÀ\u0011a\u0018!'\u000b-®\u0016E\níÜ\r¬©6\"\u0005\u0019Ë2Ìl/¨\u0000\bûÜÒ\u001f\u0000<\u0000r\u00048p¡î`äàÞqÐ°ØLÏúr\\­W$%×bÐX \u0001OggS\u0000\u0000m\u0000\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0003\u0000\u0000\u0000ÎÓìÂ\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000OggS\u0000\u0000Ñ\u0000\u0000\u0000\u0000\u0000\u0000ª?]\u0004\u0000\u0000\u0000Ò\u0006\u0015ð.+,(#**)(+++)-)**/)(%&.(\u0018JL4LD+,'&,('-),&$/+-+'øúlç\u000fÀxRD%N[ªwòÕ>×ô\u000fVrz\u0000(\u001e²ÓhZ§GU3eÉó\u0000\u001a\bûìà\u000f\u0000\u001e\u0000J\u0002Å$ïN?¯òè;ehá\u0000 \u001f­\fþÌ\nuý}4ÇZ\u000f\u0005(ûìà\u000f\u0000\u001e\u0000ÂA\"Â«|;µ'æ¸¥{\u0010(\u0014¾CëÖ)°6[\u0011ö;Ö\u0003\u0018ûlç\u000f\u0000\u001e\u0000B\u0004\u0011Òp§K\u0006hð\u0002k¨9]gJG\u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000BT¢J¸aÊ©zÛ¥ÚÕº\u0002%6EÛÎ×rÚXM§ïA1\u0004\bûlç\u000f\u0000\u001e\u0000ÂQI7á°v\u001f«\u000b:@!°^·oX!­Í§åÍ¬\u0005\u0000\u0000\bûlç\u000f\u0000\u001e\u0000Â6\u0015Ö¾m­Aì`/¾^LZ\u0016ëE+vôâx\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000R\t\u0012&Gy\u001c«|ÛÒê£\u0010\b\u0000°W1\u001eH_:í¡\u0000\bûló\u0007\u0000\u000f\u0004Iõ°v6\u001e\u001f÷[ç\u0015Qt\u001ahÞ\\Ù¤°Å3&;&,å\u0004\u0000øúló\u0007`<\t@¢@nöÜ·¶©[ã$MQ\u0000¥\u0001\u0014ë=}ÏG*±H:Ô\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂIú\u001a0p\u0018®µÓ>\n\u0016§­TØ<\u001e4*Ù\u0000æÒ\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tÀ½öå¨ïmÞÂÐG­\b\u0000\u0019]\u000f¡2«½Áþ\u000e\u0018ûìà\u000f\u0000\u001e\u00009H\u0002ç>i³ÌZó(Ø*PÎãs/ì%_ãÚ3ºCxX\u0003\bûlç\u000f\u0000\u001e\u0000ÂA¢^´7VTÆ-¢¬®\u0015Òá¸·ê,!X#üøýÉW`\u0001\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u0004I\nØ-±üVu»ÂÑ\u0017`\u0019Ó\u001cÞÛVV4Ö\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t :Ê+\u001e\u0003Þ17¡Õ\t.\u0007`&ÛTìåx÷è«\u0010\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¦ÌÍ\fwá@hv\u0000\u0014!¢ÖÙiY£f÷\u0001þ=ó¨P\u000f\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0004Þ\u0012'?Åµ\u0013\u0000à\u0000¥IÏ]ï%­\u0017èMy\u000b\r\u0000\bûlç\u000f\u0000\u001e\u0000\" Éii;U¾P.\"m=E\u0000\u0007ï\u000bb\u001b·éHÑ\u001aË2â<\u0000\u0018ûÜÎ\u001f\u0000<\u0000 ëÎ¯û8SÃZ\u0002£À¡xz±(\u000b\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â\u0002I¼Û/Ê\u0000*«§\u001búa-#J\u0005Qnò\u0000\n\u0000\u0018ûìà\u000f\u0000\u001e\u0000ÂQIòÃû4_wèA*ßAÆ,\n®=\u0006´ò\fX\u001bFÇ\u0015Cz\u001d\u0000\u0018ûlç\u000f\u0000\u001e\u0000B(3Ü\u000eS¯öetóqä\fÐÛS^µ\u0015zâ\fÃÞk\u0007ÒÓ\u0000\f³òÝÍ#@\b6¼²ly\u000bÀÑs¤ýªòx\u0000DQE\u0013\u000b\u0013t~ü8]\rÞ¾ô Ïñ<¦ãçqç\u0018fçOP:$¨ÿ\n«Ã\u001büv®ßÎ\u0005\u001e\u0019ó\u0012]\u001dbÉ\n?\u001e|éþ\u00064I\u001636,\u0013ô#KÏ.Ñq.ISiYäÂÚNº\n¹ÜWDTl¨Öå.\u0002ûÉ;rÙ§õÍv_Ø_r­ \u0002[§©g\u0017¾`Kð|zæ©»iü\u0006\u0004¿9¥¡F\u00028â>kv6\u0011÷öM(\u0007\u0016X|_]W´¦PR!×Â°\fÉÀ\u0015¼\u0017è^($\r\u0004±BØ\u0015²\u0000N0óUãCÂtpy§.][ÛÛuK\u0005\faü¡Þß»\u000fÓ,a/õÁ\nm¤4ÃÓÐ#\u001aØ9ùRxGòR\u000eL½ÅgÝx\nüªÂÂ¹Fãb¾qqªýýâtj?N\u0005$5G\u0016rI\u0013üsÓ{\u0003ó9´ÏOA.à\u001b\u0012T ß/4îÖ*\u0016\u0017ãUÉ´s\u0000\bûlç\u000f\u0000\u001e\u0000\"¨$(½MëWûö\n \u000f|\u0000\u001a=´¬§~Jë55ãÐt\u0000\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àV}1ü8ÈVá\b\u0005,<vÞ\u001cÌ=B\u0011Q(\u0001G\u0002\u001eøú+#\tà\u0001 \tèhÅ\tå\\¼ô\u0002Ðß\u0011Ï\r=\u000fz³Ý¦4\n\u001a(4\u0000\u0018ûlç\u000f\u0000\u001e\u0000RA\u0012<\u001a]^û0&ÃNc\u0004ôvË!G\u0000è-\u0004\bûlç\u000f\u0000\u001e\u0000J\u0002\u000e\u0017ÌD¨´ZD®{K'\u0001Xd)O\u000fØÙ?Ê+)Äü\u0000\u0018ûló\u0007\u0000\u000f\u0004B\u0002|äÉ^ZA\fK3\u0003YJ;\t*ÚS¬òòKà<\u001dh\bûlç\u000f\u0000\u001e\u0000RA¢\"|rÀ®\nýær(\\\u0016zK{Z³ýQT³[Pt(ûìè\u000f\u0000\u001e\u00009*\tds·u\u001cê(/\u0000i©\u0006@\n\u0005nç¢¬í%\u001ak\u0005@pð\u0000\u0018ûÜÎ\u001f\u0000<\u0000\u0012$\u0001VôÞý;§m¾säT\u0001~Ðß­os&¹\u0007N¥\u0001\bûlç\u000f\u0000\u001e\u0000ÂA\u0012Þ°\u0018\u0015Ol|:\u0016í±â¡èÒÎyQ}¥¡2\bO9Ý2P\u0000$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005<^®ÏÄé¯:I\u001f¹+\u0000Ao§áÞ¦\u0010\u0000èúlê\u000f yr\u0000!H\neOKb\u0000\u0000x\u001dÐ°²g­WåÑ­¯\u0003j4\u0018ûlç\u000f\u0000\u001e\u0000\u0012\u001c¤(V/tÀ|\u0013Ûõ%¦4\u0000(ÈéªÕÝ{óP\u0010Ú\u0000bê\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀ#&úÀ¥L@y÷\u001f\u0018\u001d%Ý«½(¤OçÚQN§éË\t\u0000\u0018ûlç\u000f\u0000\u001e\u00009*\t\u0010üÏGÿÞE`d^_b\u0001h\u001côþxv«wwÏi¶(hå\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014BsÚ®.,]\u0019ò|x@hÚªMÂþÕZ&<;-\u0001\u0001\bûë\"\u0006à\u0001 \tð`£ïûGdâ\u0010\u0005BKr´ÄA_!\u0011}\u0001êëE\u0007\u0000OggS\u0000\u0000D\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0004\u0000\u0000\u0000Ö\u00195í\u0017\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u0011\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000`?\u0005gà­à\u0000\u0000 \u0000\t¥>¥xê}\u0012»\tôJø0`?\u0004G»ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004G»ðUto\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000'\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0005\u0000\u0000\u0000zõ.-))&*++(*,/'**,-/%'&&)*\u001cGO4ED..',+)(()0'&,)++'\u0018ûìà\u000f\u0000\u001e\u0000BTR9Óy^m\u0002N¹\u0003t\u0000¹ã\u001fM39-Å9­ü¦gYË\u0003\b\u0000\bûìà\u000f\u0000\u001e\u00001H\u0002OvÒ;ýs\u0010­h\u0016F\u0000Å`°ÓÔÂ#ó\u001cX\u0000\u0018ûlç\u000f\u0000\u001e\u0000Âè\u0016rm½GâucX i¡\u001c°\u0013mX9¥=´\u0017\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u00041\u0012~¸¨cf5@^ÅÓæ-Ö.ñ\u001c\"¬îÐ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI0\u000fkCÌ\u0015¥Ú¥\u0000À±Éú(ZVè§iÚ{Ð\u0014\u0000\u0014\bûlç\u000f\u0000\u001e\u0000\tL\u0002ã4\u000f«²Ç¦»Õ[¢øLP'¬çu+ZÙÌ1ô@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012\u001c\biÇ§$Ðô .ÂDÓXÝ¸ªL[<Õ²\u001cQP\n\t\u0000(ûìè\u000f\u0000\u001e\u0000&HâYRÏ\n\u000eWXyÕ§÷\u0004\t:W\u0005\u000bò´n\fpZ[\u0016\nH\bûló\u0007\u0000\u000f\u0004I8Xëãòs¿µNÓ¤Bíô\u0017\ts\nã\u0003©IKà\u0001\u0018ûÜÎ\u001f\u0000<\u0000ÌA\u0012x\u0000%¯öOê¥Ô\u0012\u0016\u0002¡ë·º\u0001Ké\u000e}ÏæRÕy\b4\u0000\bûìà\u000f\u0000\u001e\u0000B`²Kç<Ãmýi¯´A,úóÎB\u0018Ý@ªr×óuËÐªX×u\u000b\u0018ûlç\u000f\u0000\u001e\u0000\u0012¢ UnÒpÃ|Le\rä^\u0004N7Ô{5¤µ@ý\u0000\u0018ûìà\u000f\u0000\u001e\u0000î \txEJ{\u001c>­up÷Á8¿m\u001e\u0010pÐi-v\u00155íþ\u000e\t\u0000\rèúlé\u000fÀx2\u001c$\u0001\u001aµö±£\u0019ærÞ§»¯\u0000S\u001a`ïý9do¼\u0003\t\u000b\bûlç\u000f\u0000\u001e\u0000\u0012\u0004I\u0002øz\u0018î=6jXr\u000fÐOimyl-ô¾yâCA;-Þ\u0005\u0000\u0018ûìà\u000f\u0000\u001e\u0000\u0004ÑÚ\u000bûE¼CÙiÖ)\u0012ÐÀ+\tô\u0010[M¬w8úVa`%\t\u0000\bûìà\u000f\u0000\u001e\u0000fC\u0012X((1;rpìËÃÑÛª@\u0006\u0006,Re¬ÍWh\u0012ç³´z!\u0000\u001a\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005î¤9Çv|\u0017Ù\u0000h\u0016è¶\u000ea0T<ÖXé\u0005\u0018ûlç\u000f\u0000\u001e\u0000B¤ß¥³\fú\u001bZÇp=]b\t°E· üSõ%ZÀrp\u0007\u0000\bûlç\u000f\u0000\u001e\u0000J\u0014èq\u001aÛÑðRx#Ð\u0001,¤\u0006Ä&xXGJ1*ï\u0001(ûìà\u000f\u0000\u001e\u0000BÄvÞåH©Þ¢|$\u0000O[~Xg¡ Íh\u0006\u0002\u0002\u0000\u0018ûìà\u000f\u0000\u001e\u0000BT\u0012w¡n½KÉÈ7HíÁ6@4)P6¥M}\u001b|\u0017\u0003 à\u0001\u0018ûlç\u000f\u0000\u001e\u0000BÄ±Êö?ÒÍýÞ:\"\u001aX½´®ô\\Cq\u001aÏj\u0007\u001f\u0005K\u0007\u0000\f³÷\u000eæ\u0019\u0010¥¦«Ü?»uÄ\u0000àæøò\u0003$Q^4½½:MØüpuú|þüù|>7RO}êSZí'>õ©©\u0014\u0005»Ãáÿ\u001fkø)O}êS£N!ÿïï/úÁ À\u0005Á`0\u0018\u0000DM%V¦\n:üòÉÚêñk¬§¨öÁé=z§=¢®¼³ÊÝU¸¬ÖÖÜ\u0017R_Ëap\t\u0011e¥ÆÇÇµ\u00000â_ýÕ_-1????\u000f\u000bñøø8\u0004¿9ðT4\u0013À ~JÌ\u001eÊ9a÷8]ÛÊ»¾Ýy=ç!Í\n ²HäZ57yVÀ¡,Ì$/(\u0000\u00041N[j\u0012Îål:öW(D!h#:dÐ×5âH·ji;cwæyç\u0017Ý3ÝrýJIÆ¦+¿ N\tÍ-¡ú~ùâæ2»\u00031\u0004«Âù¨:Î±üòrû§OÑò$Ü>}Z6\u0018\u0018øì\u0014äÐæåÅ?.g\u001eÁ\u001f\u0011È\u0018¿_\b/ôB\u0018\u001f\u001f\u001fK\n(U|s\u001du¾\u0000\bûìà\u000f\u0000\u001e\u0000æ¨$ \u0003 N=êæ¢-\u0000@\\§÷<ÀS(OÃj;¹(ç²R\u0010\u0010t\u0000\bûìà\u000f\u0000\u001e\u0000\u0012$!Æ­yO,Ëâüií\u0001 ±]ó»Æ)Xá+3\u0018¾\u0007\u001a8\bûÜÒ\u001f\u0000<\u0000$²haþ\u001bØoàU<·\bFå\u001cL\u0016\u001bõ×\u000b\t$Á\u0002\u0000\bûlç\u000f\u0000\u001e\u0000.H\u0002\u0004Å©pÑ6sâSS= ñè'\u001d\u0006¦§;k;ÛÀ£\u0017¢8\u0007\u0018ûlç\u000f\u0000\u001e\u0000\"¨$±½z*4ó·,\n\u0000(¥w+al\u0003Î¸µ\u0015ùz\u0012è \u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0004XqÅÜ@L[\u0015ùmu8M³Ñi&lÚ3ÔÛÓIò°,\u0000Øú+ý\u0001\u0018O\n \u00041AÉÑ~Ív·f\u0004\u0004<\u000fÏ­$Ù+:\u0003½¼\u0006ý\u0005\u0018ûlç\u000f\u0000\u001e\u0000BTRÔ&þRjD, ÃSå?º¦_é+8\u0016\u001e\u0014\u000e(ûìà\u000f\u0000\u001e\u0000æ \tÐCÎë6Õ~7¥6ä\r\u0000è\të­»S;X;8\u001a\u0000\bûlç\u000f\u0000\u001e\u00009Ê$àñØºË¹\u0005Ø»Co­\u0002ð4#U¼t\u0006¹s\u001cÝ3¹\u000eB'\u0001\u0018ûlç\u000f\u0000\u001e\u0000\tr\u0002\u001cåï\u001fRÉjòÇ6Eb\u0011'JFb¼C£@â\u0004\u0004\u0000èúlé\u000fÀxr\u0000!BR²'Âj\u0017\u000eKX\u0000\u0016Xp((2-©gY6\u0015\u0012c\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂANåc5oûü\u00034aºL%W\u0007\u0014x}É\u0012X©­\"¡÷!\t\u0018ûlç\u000f\u0000\u001e\u0000\u00128$1 >\u0011~FÀÉ3â\u0001\u0011°p¢½¢\u0014£C\tÂ$\u0000\bûló\u0007\u0000\u000fD%\u0001Ráýcµ¢´ÚcI4\u00001¬ÃÓºÔ{_çèÃ¾Æ\u0012V\u0003\u0000\u0018ûìà\u000f\u0000\u001e\u00009H\u0014\u0002Ï¤ÜZa§\rÜ¸Í\u0003\u001aM¼õÍ;Ù3.ÏR][=,\bûló\u0007\u0000\u000f\u0004I\u0003¦ïêÄf½\rqÐ$ÇNçxgD\u001d\u0006 l \u0000OggS\u0000\u0000[\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0005\u0000\u0000\u0000©)&å\u0017\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t`?\u0004G»ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004G»ðUx/\u0000à`?\u0004W³ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUi×\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUpsá8`?\u0004W³ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004W³ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004W³ðUx/\u0000à`?\u0004g«ðUSÇ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUaß\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUi×\u0000à`?\u0005gà­à\u0000\u0000OggS\u0000\u0000}\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0006\u0000\u0000\u0000)6¼.+'*((*&(-+)-(*(\"-+*\"**)\u001aIIKIE.0')(,(&+**+*&+,(\u0018ûlç\u000f\u0000\u001e\u0000ÂAÞ\fn¢¨©5xzt ^\u0013ÁE¶»¶ß2Go\u001e@\u0000\bûìà\u000f\u0000\u001e\u0000\tIäu«K«\r­\u0006´n\u0007¨]­\u0002!x\r¶^\u0001\r\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂX\u001a×ÖÙõ~(u\u0005ô\u0000R¯\u0002¢\u000eÅÞÚV\u001bGW\u000fG\u0001\u0018ûlç\u000f\u0000\u001e\u0000B\u0004AöiïÂXkÒBáxrÐ\\ï\\Þ@ ¶:=\n\u0000\u0018ûlç\u000f\u0000\u001e\u0000BI¤Û®×5«ÉTh\u0004¬MÝVØGè©\u001dç \b\u0000$Øú+ý\u0001\u0018O\u0006 D%=§9Ø½.U×ø<«\u0000 ð0×\u001e\u000eë]µ6eß¨Úq@øú+#\tà\u0001 \u0004BÚ´\u0014úúH\"R°pú¬´K£\t§µt^éæKá\u0005\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tæâ} Wö\u0010ª5°Ø\u0001cÊñÊñ¢7¼âXBë\u0000øúlç\u000f\u0000\u001e\u00009H\u0002¤ÄÛ¼ñ@ïñ¼ª³\u0000¥¦õ´Ü$?Ìö\u0017\"4}û¡\u0000\u0018ûlç\u000f\u0000\u001e\u0000æ \t¨\u0002ê¼b·{iáò$\u0014EI\u0014=wQõðÂ\u0004\bûlç\u000f\u0000\u001e\u0000Bd~ôÉÂýI¤h\u0007â±\u0016äÚþá¥<Z\u000f¯GW÷x\u0000\bûlç\u000f\u0000\u001e\u00009*\tô§[g\u001fÏI-n,R\u0004\u0000eµ\r\b¼bwµ\u0015[ï\u000eæK\u0002\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000ÍbÚ®íã+W·øqsÕÁ\\µ\u0013÷e-ÿ;\u0010\u000ex8Øú+ý\u0001\u0018O\u0006 \u001ctNom)`¥(îhvZ\u0003xÐ\b\n,§³ü£gñ\u000e\u0004\u0014\u0018ûlç\u000f\u0000\u001e\u0000\t\u0000Ùøov\u0013j­Ó}\u0001x+[\u0016\u001d|\fÜ¿\u0004JO\u0005\u0000(ûìà\u000f\u0000\u001e\u0000B ¢R0`¶2C3´\u0000d\u001eziâ\u001dÝá\u0003\u0003²\u0003Øú+ý\u0001\u0018O\n$ðÀYíÔÔaÎFY+²ÝZ\u000e\u0007j\u0015HóÉcÿx«Ó$°\t\bûlç\u000f\u0000\u001e\u0000\t.lñÁlrËõshÐÚÑ5ÑùÅZQÆ!K)\u000bº~\u001a:\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTRßônMçaW<Mø\u0000@Þá<ÁòßSg-Q`i\u0002\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0012ßÔÜO#NP@Ï\u0003k~\nR\u001cÆ\u0018ûìà\u000f\u0000\u001e\u0000\u0012\u0004I\u0006hä·\n¦Ó~ê!?4×¸n¢7R,¹er)Â\u0003\u0018ûlç\u000f\u0000\u001e\u0000BTq\fôÙ*«ñ\u0011\u0006\tp\u0000\u0014!Lj]1õ\u0001vÂã X8\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂA\u0012ÍÊ·Ç¶ÉªC·cëQ ;­k²Äk¯PNK(\u0001\u0016\u0000\f±òÝÍ3  xºvÖ gg¢W¶\u00008öºv#±\u00004K0°YÓ6\u000e¶ÿþÉ:ÇFyüßõÔzÿÇ=±~WJ²;Â-]ÿ\u0016\tÛá¨wGS\u0003%pàØ?ÏZcIû-\u0003úÕû.DQE\u0013\u000b\u0013¸Jý Ë/×V]tª|µòÜ/\"¸;ï§ì\u0012âÏíÉ|¶å-{-ß¾)µ^\nAT4üeÓøý2ñó.ãx¡ü\u0004\u0004¹9ÐÚFÊ\u000fÉ^³¤\u0013Zv}¢×¬¯Ý`\u001c^¸*9üøU\u001b\u0010cþ\u0004\u0007\u0006ïãüt5¿§M<W÷\nW!hÒª\\ôîBÎç¸\\Þ.\u0000\u00045ÎgJ5ÎñõMþ´¸?_êÊxBIÆ+\u0019ÓÓï Í6\b\u001axÖe©ÒI~\b¢UcEjcéMpÃ8¥AK\u0019ºC¦%ä\t¾CY\u001a\u0004+Â£VÕq==OÆÏ\u0017Ø>\r°¢çîfÿQº\"~¶Î\u0000þc%\u0016]|\u0001'¿[ç\u0005áåå 0\u000efÄ¼ð\u0005L9!¸¸µó\f\bûìà\u000f\u0000\u001e\u00009*\t8ÐîVõ¯\u000fG\u0000øµ\u001cñ\u0000\u001a<ÿ\u00037´\u0011KY«Þ×rð\u0000:\u0000øúlç\u000f\u0000\u001e\u0000\u0012\u001c\u0004àÆ¥×\u001a)K²\u00158/\u0015\u000f°@n¥Ò²³º^®ÊNÞjN;U\t\nÁ\u0003\bûló\u0007\u0000\u000f\u0000!HêJñ¶Jv\u0010$à.¹ØzDaYº*\r|h \u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\têÛW·¸U`éA\u0017¤²Öê×mv@\u0003=\u0017ï\b(ûìà\u000f\u0000\u001e\u0000BTOâT¦¯()ûRt\n\u0000\b\u0016PZÎ´ØK[,\u0010\u0000\u0018ûlç\u000f\u0000\u001e\u0000\u0005\b\tÐó\"ÜÌ\u000fÞJ&Â\r¯U\u001bâU(VÍç§Ñÿý\u0010X¢\u000eØúKý\u0001\u0018O\n D\t¦mí1sÑ:\u0004\u0001Ç\u0001¯,)¨xA\u0017oáÃ\u0003\u0018ûlç\u000f\u0000\u001e\u0000\t@+2%]ó%wPÀÂiK*\u001fà¯%\u001e \u0000\u0018ûlç\u000f\u0000\u001e\u0000&H\u0002¬²äe*4ý+ÞãnK$ Ó\u0013ë¼rZ¹\u00135\u0007ÜÁ\u0000\bûlç\u000f\u0000\u001e\u0000ÂQI&ÙjFË/)&CÃ£\u0000@òø|©ó´ç¡ëN\u0003\u0000\bûlç\u000f\u0000\u001e\u0000\t\u0000\u000fî¯PÝ8õ³ôT[:íiø\u0010gõKhQ\u001cG\u001aq \u0000\u0018ûÜÎ\u001f\u0000<\u0000L\u0004<\u0004ÕÕÉNÛ¥ðB\u0000¼®YíÖTÑ#¢-ÝýÐCar\u0006t\u0000(ûìà\u000f\u0000\u001e\u0000ÂAR+÷Y£fÔ«!9\u0005\b<¢x(Ëmf\u000b\u001f`Ý=,\u0000\bûë\"\u000eà\u0001 \u0004IÑ5Ùwy4¢ïÜ\u0002³\bY5\u0005¯ø¼!½E¡\u001f\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000J\u0002\u000e÷ª£¾#(ç6Ö±P\u0000\n\u0005I±ÕûyÏac\u0002\u0000\bûlç\u000f\u0000\u001e\u00009H\u0014\u0002ç±u)ñ¹c2ÀfÞ\u0002ÑÂ?7M?L*\u0019ýô8\u0000\bûló\u0007\u0000\u000f\u0004I§èýØ¬­¹NÑ\n\u0016\u0011·äáõ\u0012\u0004ÁÿÐ \u0003OggS\u0000\u0000r\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0006\u0000\u0000\u0000-I­\u0017\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f\t\f\t\f\t\f\f`?\u0004g«ðUpsá8`?\u0004g«ðUrqá8`?\u0005gà­à\u0000\u0000`?\u0004g«ðUto\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUvg\u0000à`?\u0005gà­à\u0000\u0000`?\u0004g«ðUx/\u0000à`?\u0004w£ðU\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðU\u0007¿\f\u0001À`?\u0004w£ðU{\u000f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUz\u001f\f\u0001À`?\u0005gà­à\u0000\u0000`?\u0004w£ðUy'\u0000à`?\u0005gà­à\u0000\u0000`?\u0004w£ðU|\u000f\f\u0001À`?\u0004ðU\u000f\f\u0001ÀOggS\u0000\u0004w\u0010\u0000\u0000\u0000\u0000\u0000\u0000¹ÚîM\u0007\u0000\u0000\u0000)á­R\u0005\t\f\t\f\t`?\u0005gà­à\u0000\u0000`?\u0004ðUCÏ\u0000à`?\u0005gà­à\u0000\u0000`?\u0004ðU'¯\f\u0001À`?\u0005gà­à\u0000\u0000OggS\u0000\u0004¯®\u0001\u0000\u0000\u0000\u0000\u0000ª?]\u0007\u0000\u0000\u0000\u001e µ\u0019)--')*(%(*+*-**'+(+'),*(\u0016\u0018ûlç\u000f\u0000\u001e\u0000BÔÿÝàp¶­]\u0016³&\u001cÀ '2¤\u000egµÏ5sÝ*í\u0001\u001e\u0000\bûìà\u000f\u0000\u001e\u0000\tr\u0002ç½\u0003v[\u0016w/cÜ­ö\n\u001e]¿\u0016\nµ1gO ¼<Õï\nh\u0000\u0018ûlç\u000f\u0000\u001e\u0000Â1b¬\rxÕCÉ\u0011¾\t]²\u0012\u0014Ju\u0002{¡\u0018¸¯·º\u0016xÁ½ÆS\u0004\u0000\u0018ûlç\u000f\u0000\u001e\u0000\" &Z·ëê)ê£¡#áu¬ùúÐp¦XØN¡<C\u0000\u0018ûlç\u000f\u0000\u001e\u0000BTÂm;ÿm©\u0012B+Ë\u0000ÈÓBkyz=ñ¨=Ï&4\r\u0000\u0001Øú+ý\u0001\u0018O\u0006 \u001c$´#h\u001du!`2må°\u0000°ØkÐXîá.(,;èX\u0016\bûlç\u000f\u0000\u001e\u0000\u0012\u0004Bz\u0002Gèa_Õdh­Ýãø¶N\nºQ8½/=ñ\u000e\u0000(ûìà\u000f\u0000\u001e\u0000\t¢â@l\u001aW\u001aÝ·õÑ¢­\u0005`¯ÃSÒ\tm\u0002©\u0003\u000f\u0002\bûló\u0007\u0000\u000f\u0004 êÇ?ûK±cÑ\u0001ÑL#,\u0015íª¥iGP\u001e]·\t\u0018ûlç\u000f\u0000\u001e\u00009H\u0002¶àlmC½/Í\u000f\u0004f\u0004Ðg\u0019Àó¼\u001d«\u0015Mï÷h@\u0007\bûlç\u000f\u0000\u001e\u0000\u0012DH\u0012Ü(eÐ¸¥]\u0001p\u001e\u001c)WoO4ÙWyËZòuM\u0003\u0000\u0018ûlç\u000f\u0000\u001e\u0000\tÀÑVoÛÊ¦Jù:K«F\u0002Ð­ÆG¥gyO\u0007t\u0003\u0014\u0000\u0018ûìà\u000f\u0000\u001e\u0000&*\t¼\u0003Æ`Ó\u001e¤¼I}òî\u0007\u000f@ÀÒö§Ö·z÷û£Ã±\u0002\bûlç\u000f\u0000\u001e\u0000\u0012\u001c$-È:Ò\t\u001f=Ù ,\u000f:;Q\në¤óÒÝ\nz>ê«ã@\u0002\u0018ûlç\u000f\u0000\u001e\u0000\" \tïêM`ÌKbs_\u0012°\u001aw,°Ñd&+Ófö/\n½$\u0000\u0018ûlç\u000f\u0000\u001e\u0000\t\u0012\u0005\u000bEx\f61±n²4°1ñà­ºíH±[Q\u001co\u001bQ\u001a\bûlç\u000f\u0000\u001e\u00009H\u0014tpÄ+Î\u001fÏN¤ÊÊF·\u001e\f\u001cGT{xEÐ}ø\b?¦+qR\u0002\bûlç\u000f\u0000\u001e\u0000&H\u0014\u001c\u0018}Å3ÖdóE.\u0000G9Êy]\u0017q¹ûuèE_\u000b\u0018ûìà\u000f\u0000\u001e\u00009H\u0002Ä:·¼­âÞ¬J\u0006éO\u0010¼Ý(V\u001eZ\u001e»GIq\b\u0000\u0018ûÜÎ\u001f\u0000<\u0000\\\u0004<|Ggy`z\u00188K\u0000\u0007Ø:|Ck§ ~\u0016\t\u0000\bûìà\u000f\u0000\u001e\u0000B´¼í-væ\u001dRR\u0016à\u0019¨õ~G_PR\u0017­\u0018\u00198§ \u0001\u0000\u0018ûlç\u000f\u0000\u001e\u0000ÂQIT2¹ÒDÍ \u000b\u0000Òi\"S÷ôË\u0016îÉÂÑN×\u0000\u0018ûlç\u000f\u0000\u001e\u0000BD§m>n«kù¥\u0006mÕw\u0017\u0011_ûÖ³(´hIÓ\u0000\u0018ûlç\u000f\u0000\u001e\u0000B\u0013©LÏ(îY}\u0019\u0016\u0000\b\u0014ÊZ\u0005¬sy\u001d-f¾ÝYH<\u0000XúKý\u0001À\u0003\u0000@¢ pò[\u0003\u0005 \t?\u0003"},{"url":"https://web-platform.test:8443/common/security-features/subresource/xhr.py?key=e38fbdd2-8840-47d6-a823-36eb5291475d&path=%2Fmixed-content&action=take","request_start":1696742322.1810985,"response_start":1696742322.1885157,"request_end":1696742322.181667,"response_end":1696742322.1891167,"ts":1696742322.1893504,"body":"{\"status\": \"allowed\", \"result\": null}"}]}}
